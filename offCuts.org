
xxxxxxxxxxxxxxxxx

: This first part controls the shells. It will force Emacs to place them at the bottom, with a window height of no more than 30% of the size of the frame.
: 
: ;; left, top, right, bottom
: (setq window-sides-slots '(1 0 1 0))
:                                      CONDITION                             ACTION                        A-LIST
: (add-to-list 'display-buffer-alist '("\\*e?shell\\*"                       display-buffer-in-direction   (direction . bottom) (window . root)  (window-height . 0.2)))
: (add-to-list 'display-buffer-alist `(,(rx (| "*compilation*" "*grep*"))    display-buffer-in-side-window (side . right) (slot . 0) (window-parameters . ((no-delete-other-windows . t)))  (window-width . 80)))
: (add-to-list 'display-buffer-alist `(,(rx (| "*xref*" "*grep*" "*Occur*")) display-buffer-reuse-window   (inhibit-same-window . nil)))
: (add-to-list 'display-buffer-alist `("^test[-_]"                           display-buffer-in-direction   (direction . right)))
: (setq         display-buffer-alist `(("\\*Occur\\*" display-buffer-in-side-window                        (side . left) (slot . 0) (window-width . fit-window-to-buffer)   (preserve-size . (t . nil))   (window-parameters . ((no-delete-other-windows . t)))))))
: 
:  (setq fit-window-to-buffer-horizontally t)
:         (setq window-resize-pixelwise t)
: 
: Controlling side windows is equally straight forward. I recommend you
: limit the number of side window slots – nil means infinite, and a
: positive number the maximum you’ll allow – as that means Emacs swaps
: out the buffer in that slot instead of creating a new entry. Great for
: situations where you have a handful of ephemeral things – compilation,
: test output, shell command output, etc. – that you want to share
: windows.
: 
: I also set a window parameter, no-delete-other-windows, that prevents
: Emacs from destroying the side window when you type C-x 1. It also has
: a fixed size of 80.
: 
: 
: And don’t forget: you can type M-x window-toggle-side-windows to toggle them visible or hidden.
: 
: This snippet places a buffer to the immediate right of the current window if the buffer name starts with test_ or test-.
: 
: You probably don’t want that. I recommend you set this:
: ;; Requires Emacs 27+
: (setq switch-to-buffer-obey-display-actions t)
: 
: (window-tree)  = 
:    ((nil (0 0 371 101)
:     (t (0 0 54 101) #<window 64 on :~/.emacs.d/> #<window 66 on *:Buffers:*>) 
:     (nil (54 0 371 101) #<window 62 on dotEmacs.org> 
:     (t (213 0 371 101) #<window 68 on dotEmacs.org> #<window 70 on dotEmacs.org>)))
:     #<window 49 on  *Minibuf-0*>)
: 
: display-buffer-alist = nil
: (current-window-configuration) = #<window-configuration>
: window-dedicated-p

;; Also highly recommended is RefTeX, a cross-reference, bibliography, glossary, and index manager initially written by the creator of Org Mode, Carsten Dominik. Add the following line to .emacs:
;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

xxxxxxxxxxxxxxxxx
; (dired-sidebar-toggle dirname)


(defun make-ide-windows ()
  "Toggles window dedication in the selected window."
  (interactive)

  (let* ((dired-buffer (dired-sidebar-get-or-create-buffer "/home/kleyn/"))
         (dired-window (get-buffer-window dired-buffer)))

       (ibuffer-sidebar-show-sidebar)
       (dired-sidebar-show-sidebar dired-buffer)    ;; dired and ibuffer on the left
       (set-window-dedicated-p dired-window    t)
       (setq window-size-fixed nil))
)
  ;; window--make-major-side-window
  ;; (display-buffer-in-side-window (get-buffer "*Messages*") `((side . right) (window-width . 50)))  ;; messages on the right
  ;; (display-buffer-in-side-window (get-buffer "*eshell*")   `((side . bottom) (window-height . 10))))


(global-set-key (kbd "M-#") 'hydra-windows/body)

(defun split-window-3 ()
 "Splite window into 4 sub-window"
 (interactive)
 (if (= 1 (length (window-list)))
     (progn  (split-window-horizontally -60)
             (split-window-vertically -30) ; lower window gets 40 lines
	    ;(other-window 2)
	    ;(split-window-horizontally)
	    )
   )
)


(defhydra hydra-windows ()
  "C-arrow = switch, S-arrow = size, M-arrow = move"
  ("C-<left>" windmove-left nil)
  ("C-<right>" windmove-right nil)
  ("C-<up>" windmove-up nil)
  ("C-<down>" windmove-down nil)
  ("S-<left>" hydra-move-splitter-left nil)
  ("S-<right>" hydra-move-splitter-right  nil)
  ("S-<up>" hydra-move-splitter-up nil)
  ("S-<down>" hydra-move-splitter-down nil)
  ("M-<left>" buf-move-left nil)
  ("M-<right>" buf-move-right nil)
  ("M-<up>" buf-move-up nil)
  ("M-<down>" buf-move-down nil)
  ("p" previous-buffer "prev-buf")
  ("n" next-buffer "next-buf")
  ("1" delete-other-windows "1")
  ("d" delete-window "del")
  ("k" kill-buffer "kill")
  ("s" save-buffer "save")
  ("u" (progn (winner-undo) (setq this-command 'winner-undo)) "undo")
  ("r" winner-redo "redo")
  ("b" helm-mini "helm-mini" :exit t)
  ("f" helm-find-files "helm-find" :exit t)
  ("|" (lambda () (interactive) (split-window-right) (windmove-right)))
  ("_" (lambda () (interactive) (split-window-below) (windmove-down)))
  ("q" nil "cancel")
  )
** ace-window keys
: (defvar aw-dispatch-alist
:   '((?x aw-delete-window "Delete Window")
: 	(?m aw-swap-window "Swap Windows")
: 	(?M aw-move-window "Move Window")
: 	(?c aw-copy-window "Copy Window")
: 	(?j aw-switch-buffer-in-window "Select Buffer")
: 	(?n aw-flip-window)
: 	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
: 	(?c aw-split-window-fair "Split Fair Window")
: 	(?v aw-split-window-vert "Split Vert Window")
: 	(?b aw-split-window-horz "Split Horz Window")
: 	(?o delete-other-windows "Delete Other Windows")
: 	(?? aw-show-dispatch-help))
:   "List of actions for `aw-dispatch-default'.")


:  ;-------------------------------------------------------------------------------- Ace jump
:  ;;
:  ;; ace jump mode major function
:  ;;
:  ;;(add-to-list 'load-path "/full/path/where/ace-jump-mode.el/in/")
:  (autoload
:    'ace-jump-mode
:    "ace-jump-mode"
:    "Emacs quick move minor mode"
:    t)
:  ;; you can select the key you prefer to
:  ;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
: 
:  ;; ;;
:  ;; ;; enable a more powerful jump back function from ace jump mode
:  ;; ;;
:  ;; (autoload
:  ;;   'ace-jump-mode-pop-mark
:  ;;   "ace-jump-mode"
:  ;;   "Ace jump back:-)"
:  ;;   t)
:  ;; (eval-after-load "ace-jump-mode"
:  ;;   '(ace-jump-mode-enable-mark-sync))
:  ;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)


(global-set-key (kbd "M-o")     'ace-window)  ;(setq aw-background nil)

(defun filepath-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
 (let ((filename (if (memq major-mode '(dired-mode dired-sidebar-mode)) 
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename)))
)

*** faded

:  ;; if it's a folder=>insert subdir  & move to first; elseif it's a file = >preview-in-other window and move to next, if it's previewed,....
:  (defun my-subdired-dfs ()
:    (interactive)
:    (dired-subtree--is-expanded-p)
:    (dired-utils-is-dir-p)
:    (dired-utils-is-file-p)
:    (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
:      (if (eq sDpth 0)
:          (if (dired-utils-is-dir-p)
:              (dired-subtree-insert))
:          (dired-subtree-remove))))
: 
:  (defun my-subdired-dfs ()
:    (interactive)
:    (dired-utils-is-dir-p)
:    (dired-utils-is-file-p)
:    (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
:          (if (dired-utils-is-dir-p)
:              (if (dired-subtree--is-expanded-p)
:                  (dired-subtree-remove)
:                  (dired-subtree-insert)))))
:  (define-key dired-mode-map [left]            'dired-up) ;; dired-up-directory
:  (define-key dired-mode-map [left]            'dired-up-directory)
:  (define-key dired-mode-map [right]           'dired-go-subdir-kbm)
:  (define-key dired-mode-map (kbd "<S-down>")  'dired-subtree-next-sibling)
:  (define-key dired-mode-map (kbd "<S-left>")  'dired-subtree-remove)
:  (define-key dired-mode-map (kbd "<S-right>") 'dired-subtree-insert)
:  (define-key dired-mode-map (kbd "<S-up>")    'dired-subtree-previous-sibling)
:  (define-key dired-mode-map [right]           'dired-find-file-drop-prev-dired-buffer)
:  (define-key dired-mode-map [left]            'dired-up-directory-drop-prev-dired-buffer)
:  (define-key dired-mode-map (kbd "C-n")       'dired-next-line)
:  (define-key dired-mode-map (kbd "C-p")       'dired-previous-line)

*** faded

 (defun my-subdired-dfs ()
   (interactive)
   (dired-utils-is-dir-p)
   (dired-utils-is-file-p)
   (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
         (if (dired-utils-is-dir-p)
             (if (dired-subtree--is-expanded-p)
                 (dired-subtree-remove)
                 (dired-subtree-insert)))))
 (define-key dired-mode-map [left]            'dired-up) ;; dired-up-directory
 (define-key dired-mode-map [left]            'dired-up-directory)
 (define-key dired-mode-map [right]           'dired-go-subdir-kbm)
 (define-key dired-mode-map (kbd "<S-down>")  'dired-subtree-next-sibling)
 (define-key dired-mode-map (kbd "<S-left>")  'dired-subtree-remove)
 (define-key dired-mode-map (kbd "<S-right>") 'dired-subtree-insert)
 (define-key dired-mode-map (kbd "<S-up>")    'dired-subtree-previous-sibling)
 (define-key dired-mode-map [right]           'dired-find-file-drop-prev-dired-buffer)
 (define-key dired-mode-map [left]            'dired-up-directory-drop-prev-dired-buffer)
 (define-key dired-mode-map (kbd "C-n")       'dired-next-line)
 (define-key dired-mode-map (kbd "C-p")       'dired-previous-line)


*** faded
: ;---------------------------------------- expand and collapse
: (defun org-advance ()
:   (interactive)
:   (when (buffer-narrowed-p)
:   (beginning-of-buffer)
:   (widen)
:   (org-forward-heading-same-level 1))
:   (org-narrow-to-subtree)
:   )
: 
: (defun org-retreat ()
:   (interactive)
:   (when (buffer-narrowed-p)
:     (beginning-of-buffer)
:     (widen)
:     (org-backward-heading-same-level 1))
:     (org-narrow-to-subtree)
:     )
: 
: --------------;--------------------------------------------------------------------- org-confluence
: ; needs ox.el = org-exporter.el
: (require 'ox-confluence)
: (require 'org-exp)
: (require 'org-export)
: (require 'org-confluence)
: 
: ;----------------------------------------------------------------------------------- org-trello
: ;; NO: (add-to-list 'load-path "L:/MyDocs/ulib/emacs/org-trello-master/")
: ;;its here: /home/kleynmi/l_C/cygwin64/home/kleynmi/.emacs.d/elpa/org-trello-0.8.1/org-trello.el:
: 
: (require 'org-trello)
: ;; load trello-key.el
: (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode)) ;; org-trello major mode for all .trello files
: (add-hook 'org-mode-hook                                  ;; add a hook function to check if this is trello file
:           (lambda ()                                      ;; then activate the org-trello minor mode.
:             (let ((filename (buffer-file-name (current-buffer))))
:               (when (and filename (string= "trello" (file-name-extension filename)))
:               (org-trello-mode)))))
: 
: (org-trello-install-key-and-token)
: (org-trello-install-board-metadata)
: (org-trello-update-board-metadata)
: (org-trello-sync-buffer t) ; sync of the entire buffer FROM trello.
: 
: (setq board-name (read-from-minibuffer "Trello Board: ")
: 
: (defun mk-init-keys-trello ()         ; read keys an register them via org-trello function
:    (load "~/.emacs.d/trello-key.el")
:    (orgtrello-controller--do-install-config-file my-trello-id my-trello-consumer-key my-trello-access-token 'do-ask-for-overwrite)
: )
: 
: (defun mk-refresh-from-trello ()   ; sync the entire buffer FROM trello.
:    (interactive)
:    ;; (switch-to-buffer board-name)
:    ;; (buffer-mode "org-mode")
:    (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
:    (org-trello-sync-buffer t)    (message "org-trello-sync-buffer done");; t=> FROM TRELLO -TO-> FILE
: 
: )
: 
: (defun mk-get-from-trello ()   ; prompt for a board, then sync the buffer FROM trello.
:    (interactive)
:    (org-trello-install-board-metadata) (message "org-trello-install-board-metadata done") ;; only for a new board, prompts for board
:    (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
:    (org-trello-sync-buffer t)          (message "org-trello-sync-buffer done")  ;; t=> FROM TRELLO -TO-> FILE
: )
: 
: ;; (orgtrello-controller-do-sync-buffer-from-trello)
: ;; org-trello-install-key-and-token
: ;; (org-trello-update-board-metadata)
: ;; (Org-trello-sync-buffer t)
: 
: ;;(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
: ;; (progn
: ;;   (require 'org)
: ;;   (require 'org-trello-utils)
: ;;   (require 'org-trello-log)
: ;;   (require 'org-trello-hash)
: ;;   (require 'dash)
: ;;   (require 'org-trello))

: ;---------------------------------------- expand and collapse
: (defun org-advance ()
:   (interactive)
:   (when (buffer-narrowed-p)
:   (beginning-of-buffer)
:   (widen)
:   (org-forward-heading-same-level 1))
:   (org-narrow-to-subtree)
:   )
: 
: (defun org-retreat ()
:   (interactive)
:   (when (buffer-narrowed-p)
:     (beginning-of-buffer)
:     (widen)
:     (org-backward-heading-same-level 1))
:     (org-narrow-to-subtree)
:     )
: 
: --------------;--------------------------------------------------------------------- org-confluence
: ; needs ox.el = org-exporter.el
: (require 'ox-confluence)
: (require 'org-exp)
: (require 'org-export)
: (require 'org-confluence)
: 
: ;----------------------------------------------------------------------------------- org-trello
: ;; NO: (add-to-list 'load-path "L:/MyDocs/ulib/emacs/org-trello-master/")
: ;;its here: /home/kleynmi/l_C/cygwin64/home/kleynmi/.emacs.d/elpa/org-trello-0.8.1/org-trello.el:
: 
: (require 'org-trello)
: ;; load trello-key.el
: (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode)) ;; org-trello major mode for all .trello files
: (add-hook 'org-mode-hook                                  ;; add a hook function to check if this is trello file
:           (lambda ()                                      ;; then activate the org-trello minor mode.
:             (let ((filename (buffer-file-name (current-buffer))))
:               (when (and filename (string= "trello" (file-name-extension filename)))
:               (org-trello-mode)))))
: 
: (org-trello-install-key-and-token)
: (org-trello-install-board-metadata)
: (org-trello-update-board-metadata)
: (org-trello-sync-buffer t) ; sync of the entire buffer FROM trello.
: 
: (setq board-name (read-from-minibuffer "Trello Board: ")
: 
: (defun mk-init-keys-trello ()         ; read keys an register them via org-trello function
:    (load "~/.emacs.d/trello-key.el")
:    (orgtrello-controller--do-install-config-file my-trello-id my-trello-consumer-key my-trello-access-token 'do-ask-for-overwrite)
: )
: 
: (defun mk-refresh-from-trello ()   ; sync the entire buffer FROM trello.
:    (interactive)
:    ;; (switch-to-buffer board-name)
:    ;; (buffer-mode "org-mode")
:    (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
:    (org-trello-sync-buffer t)    (message "org-trello-sync-buffer done");; t=> FROM TRELLO -TO-> FILE
: 
: )
: 
: (defun mk-get-from-trello ()   ; prompt for a board, then sync the buffer FROM trello.
:    (interactive)
:    (org-trello-install-board-metadata) (message "org-trello-install-board-metadata done") ;; only for a new board, prompts for board
:    (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
:    (org-trello-sync-buffer t)          (message "org-trello-sync-buffer done")  ;; t=> FROM TRELLO -TO-> FILE
: )
: 
: ;; (orgtrello-controller-do-sync-buffer-from-trello)
: ;; org-trello-install-key-and-token
: ;; (org-trello-update-board-metadata)
: ;; (Org-trello-sync-buffer t)
: 
: ;;(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
: ;; (progn
: ;;   (require 'org)
: ;;   (require 'org-trello-utils)
: ;;   (require 'org-trello-log)
: ;;   (require 'org-trello-hash)
: ;;   (require 'dash)
: ;;   (require 'org-trello))

--------------;--------------------------------------------------------------------- org-confluence
; needs ox.el = org-exporter.el
(require 'ox-confluence)
(require 'org-exp)
(require 'org-export)
(require 'org-confluence)


** Unused
;; ------------------------------------------------------------------- CSHARP Mode
;(autload 'csharp-mode "/home/uri03204/myDocs/ulib/emacs/csharp-mode-0.8.5.elc" t)
(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(defun csharp-mode-untabify ()
  (if (string= (substring mode-name 0 2) "C#")
     (save-excursion
     (delete-trailing-whitespace)
     (untabify (point-min) (point-max)))))
(defun my-csharp-mode-fn ()
  "function that runs when csharp-mode is initialized for a buffer."
  (turn-on-auto-revert-mode)
  (setq indent-tabs-mode nil)
  (require 'flymake)
  (setq flymake-mode nil)
  ;;(add-hook 'write-contents-hooks 'csharp-mode-untabify nil t)
  )
  ;;      (require 'yasnippet)
  ;;      (yas/minor-mode-on)
  ;;      (require 'rfringe)
(add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)
;;(add-hook 'csharp-mode-hook '(lambda () (add-hook 'write-contents-hooks 'csharp-mode-untabify nil t)))

;;-------------------------------------------------------------------- Matlab Mode
(require 'matlab)
(setq matlab-indent-function t)
(setq matlab-shell-command "matlab")
;;(autoload 'matlab-mode "/home/kleyn/myDocs/ulib/emacs/matlab.elc" "Enter Matlab mode." t)
;; User Level customizations:
;;   (setq matlab-verify-on-save-flag nil) ; turn off auto-verify on save
(defun my-matlab-mode-hook ()
  (matlab-mode-hilit)                        ; Turn highlight on
  (setq fill-column 276)             ; where auto-fill should wrap
  (setq matlab-indent-function t)    ; if you want function bodies indented
  (setq matlab-indent-level  2)         ; set matlab indentation
  (set matlab-fill-code nil)
  (setq indent-tabs-mode nil))
(add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

;;-------------------------------------------------------------------- iedit Mode
 TBD (autoload 'iedit-mode "/home/uri03204/myDocs/ulib/emacs/iedit.elc" "Enter iedit mode" t)


;;-------------------------------------------------------------------- ediff
;; (setq ediff-shell "C:/cygwin/bin/mintty.exe")
;;  (if (file-directory-p "c:/cygwin/bin")      (add-to-list 'exec-path "c:/cygwin/bin"))
;;--------------------------------------------------------------------- Diff Stuff
;; (diffview-current)


;;-------------------------------------------------------------------- Switches

;;-------------------------------------------------------------------- Magit
;; (add-to-list 'magit-section-initial-visibility-alist '(stashes . hide))

;; ;; ---------------------------------------------------------------- DOS Mode
;; (autoload 'dos-mode "/home/uri03204/myDocs/ulib/emacs/dos.elc" "Enter DOS CMD mode." t)

;; ------------------------------------------------------------------- Java
;; TBD add hs-minor-mode for hide/show t
;; TDB (add-hook  'java-mode-hook 'my-java-mode-hook t)
;; ;(defun my-java-mode-hook ()
;; ;  (hs-minor-mode)
;; ;  (setq indent-tabs-mode nil))


 ;-------------------------------------------------------------------------------- Ace jump
 ;;
 ;; ace jump mode major function
 ;;
 ;;(add-to-list 'load-path "/full/path/where/ace-jump-mode.el/in/")
 (autoload
   'ace-jump-mode
   "ace-jump-mode"
   "Emacs quick move minor mode"
   t)
 ;; you can select the key you prefer to
 ;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

 ;; ;;
 ;; ;; enable a more powerful jump back function from ace jump mode
 ;; ;;
 ;; (autoload
 ;;   'ace-jump-mode-pop-mark
 ;;   "ace-jump-mode"
 ;;   "Ace jump back:-)"
 ;;   t)
 ;; (eval-after-load "ace-jump-mode"
 ;;   '(ace-jump-mode-enable-mark-sync))
 ;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

 ;-------------------------------------------------------------------------------- ZeeTree
 (add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
  ;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
  (require 'ztree-diff)
  (require 'ztree-dir)
  ;local binf to tab (ztree-perform-action)
  ;Call the ztree-diff interactive function: M-x ztree-diff


 ;;-------------------------------------------------------------------------------- ztree
 (setq load-path (append load-path '("/home/uri03204/ulib/emacs/ztree-master"))) ;; (insert (format "%s" load-path))
 (require 'ztree-diff)
 (require 'ztree-dir)

;;----------------------- neotree
;;tbd
;;(setq neo-smart-open nil)
;;(setq neo-autorefresh nil)
;;(setq neo-window-width 55)
;;(setq neo-force-change-root t)
;neotree-toggle

;;(helm-mode 0)
;; swiper
;; (global-set-key "\C-s" 'swiper)


(desktop-save-mode 1)  ; desktop-revert desktop-change-dir

(global-subword-mode 1)
;; from 'better-defaults.el'
;; Allow clipboard from outside emacs
;; (setq x-select-enable-clipboard t
;;       x-select-enable-primary t
;;       save-interprogram-paste-before-kill t
;;       apropos-do-all t
;;       mouse-yank-at-point t)
(simpleclip-mode 1) ; requires simpleclip


;;---- option2 parallel swap
;(defun parallel-swap (plist &optional start end)  ;; (require 'cl)
;  (interactive
;   `(,(loop with input = (read-from-minibuffer "Swap: ")
;            with limit = (length input)
;            for (item . index) = (read-from-string input 0)
;                            then (read-from-string input index)
;            collect (prin1-to-string item t) until (<= limit index))
;     ,@(if (use-region-p) `(,(region-beginning) ,(region-end)))))
;  (let* ((alist (list (cons (car plist) (cadr plist)) (cons (cadr plist) (car plist))))
;       ;;(alist (loop for (key val . tail) on plist by #'cddr collect (cons key val)))
;         (matcher (regexp-opt (mapcar #'car alist) 'words)))
;    (save-excursion
;      (goto-char (or start (point)))
;      (while (re-search-forward matcher (or end (point-max)) t)
;        (replace-match (cdr (assoc-string (match-string 0) alist)))))))



;; (insert "from util import dbg_toolbag as t; t.brk()")
;; (insert "from see import see; import ipdb; ipdb.set_trace(context=15) # breakpoint()")
;; (newline-and-indent)
;; (end-of-line)
;; (open-line)

* trello
;----------------------------------------------------------------------------------- org-trello
;; NO: (add-to-list 'load-path "L:/MyDocs/ulib/emacs/org-trello-master/")
;;its here: /home/kleynmi/l_C/cygwin64/home/kleynmi/.emacs.d/elpa/org-trello-0.8.1/org-trello.el:

(require 'org-trello)
;; load trello-key.el
(add-to-list 'auto-mode-alist '("\\.trello$" . org-mode)) ;; org-trello major mode for all .trello files
(add-hook 'org-mode-hook                                  ;; add a hook function to check if this is trello file
          (lambda ()                                      ;; then activate the org-trello minor mode.
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
              (org-trello-mode)))))

(org-trello-install-key-and-token)
(org-trello-install-board-metadata)
(org-trello-update-board-metadata)
(org-trello-sync-buffer t) ; sync of the entire buffer FROM trello.

(setq board-name (read-from-minibuffer "Trello Board: ")

(defun mk-init-keys-trello ()         ; read keys an register them via org-trello function
   (load "~/.emacs.d/trello-key.el")
   (orgtrello-controller--do-install-config-file my-trello-id my-trello-consumer-key my-trello-access-token 'do-ask-for-overwrite)
)

(defun mk-refresh-from-trello ()   ; sync the entire buffer FROM trello.
   (interactive)
   ;; (switch-to-buffer board-name)
   ;; (buffer-mode "org-mode")
   (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
   (org-trello-sync-buffer t)    (message "org-trello-sync-buffer done");; t=> FROM TRELLO -TO-> FILE

)

(defun mk-get-from-trello ()   ; prompt for a board, then sync the buffer FROM trello.
   (interactive)
   (org-trello-install-board-metadata) (message "org-trello-install-board-metadata done") ;; only for a new board, prompts for board
   (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
   (org-trello-sync-buffer t)          (message "org-trello-sync-buffer done")  ;; t=> FROM TRELLO -TO-> FILE
)

;; (orgtrello-controller-do-sync-buffer-from-trello)
;; org-trello-install-key-and-token
;; (org-trello-update-board-metadata)
;; (Org-trello-sync-buffer t)

;;(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
;; (progn
;;   (require 'org)
;;   (require 'org-trello-utils)
;;   (require 'org-trello-log)
;;   (require 'org-trello-hash)
;;   (require 'dash)
;;   (require 'org-trello))

* sidebar
;;--------------------------------- sidebar
: ; (use-package dired-sidebar
: ;   :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
: ;   :ensure nil
: ;   :commands (dired-sidebar-toggle-sidebar))
: 
: ;(use-package ibuffer-sidebar
: ;  :bind (("C-x C-b" . ibuffer-sidebar-toggle-sidebar))
: ;  :ensure nil
: ;  :commands (ibuffer-sidebar-toggle-sidebar))

(progn                                       ;; dired-sidebar treepad navigation
  ;(define-key dired-sidebar-mode-map [kp-8]      'dired-previous-line)
  ;(define-key dired-sidebar-mode-map [kp-2]      'dired-next-line)

  (define-key dired-sidebar-mode-map [kp-4]        #'(lambda () (interactive)                                        ;; keep
                                                       (message (format "%d %d" (line-number-at-pos) (dired-subtree--get-depth (dired-subtree--get-ov))))
                                                       (if (= (dired-subtree--get-depth (dired-subtree--get-ov)) 0)
                                                          (dired-sidebar-up-directory)
                                                          (dired-subtree-up))))

  (define-key dired-sidebar-mode-map [kp-8]        'dired-subtree-previous-sibling)                                 ;; move #2=ps
  (define-key dired-sidebar-mode-map [kp-5]        'dired-sidebar-subtree-toggle)
  (define-key dired-sidebar-mode-map [kp-2]        'dired-subtree-next-sibling)                                     ;; move #8=ns                           

  (define-key dired-sidebar-mode-map [kp-6]        'dired-sidebar-find-file)
  ;(define-key dired-sidebar-mode-map [kp-3]       '(lambda () (interactive) (dired-subtree-cycle 4)))
  (define-key dired-sidebar-mode-map [C-kp-6]       #'(lambda () (interactive) ;; first child, open if needed
                                                       (if (not (dired-subtree--is-expanded-p)) (dired-sidebar-subtree-toggle))
                                                       (dired-next-line 1)))                                       ;; dired-sidebar-find-file

  (define-key dired-sidebar-mode-map [kp-subtract]  #'(lambda () (interactive) (dired-sidebar-subtree-toggle) (dired-next-lne)))
  (define-key dired-sidebar-mode-map [kp-0]         #'(lambda () (interactive) (ergoemacs-open-in-external-app)))

  ;(define-key dired-sidebar-mode-map [C-kp-5]      'dired-sidebar-up-directory) now subsumed in kp-5
)
(defun sidebar-toggle ()  ; tbd install ibuffer sidebar  ; not longr used?
  "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
  (interactive)
  (dired-sidebar-toggle-sidebar)
  (ibuffer-sidebar-toggle-sidebar))

(defun dired-sidebar-cmd (dirname)  ;; TBD opne in *current* window?
  (interactive "D")
  (let ((dired-buffer (dired-sidebar-get-or-create-buffer dirname)))
    (dired-sidebar-show-sidebar dired-buffer)
    (pop-to-buffer dired-buffer)
    (setq window-size-fixed nil))
)
; (dired-sidebar-toggle dirname)

total used in directory 372K available 119 GiB

* bashrc

# ----------------------------------------------------------------------------- window title
# function my_set_screen_title() {
#   echo -ne "\ekHELLO$1\e\\"
#   PROMPT_COMMAND='echo -ne "\033]0;"myWindowTitle"\007"'
#   currWindow=`xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)" | awk '{ print $5}'`
#   xdotool set_window --name hello $currWindow
# }

# function swtt(){
#  currWCmd="xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\) \| awk '{print $5}'"
#  currWindow=`$currWindowCmd`
#  echo "Curr Window is $currWindow"
#  xdotool set_window --name "$$:$1" `$currWindow
# }

# function swtt(){
#  curWS=`xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\)`
#  curW= awk '{print $5}'
#  currWindow=`$currWindowCmd`
#  echo "Curr Window is $currWindow"
#  xdotool set_window --name "$$:$1" `$currWindow
# }

# ----------------------------------------------------------------------------- xterm colored
alias xtm='xterm   -sl 2000 &'
alias xtmr='xterm  -sl 20000 -bg darkred   -fg white  -cr lightblue     &'
alias xtmg='xterm  -sl 20000 -bg darkgreen -fg yellow -cr lightblue     &'
alias xtmb='xterm  -sl 20000 -bg darkblue  -fg white  -cr lightblue     &'
alias xtmbl='xterm -sl 20000 -bg lightblue -fg black  -cr red           &'
alias xtmy='xterm  -sl 20000 -bg darkgrey  -fg white  -cr lightblue     &'
alias xtmo='xterm  -sl 20000 -bg orange4   -fg white  -cr lightgreen    &'
alias xtmv='xterm  -sl 20000 -bg palevioletred -fg black -cr lightgreen &'

* foo
(put 'narrow-to-region 'disabled nil)

(defun ora-ediff-file_old ()
  (interactive)
  (let ((files (dired-get-marked-files))
        (wnd (current-window-configuration)))
    (if (leq (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name "file: " (dired-dwim-target-directory)))))
          (make-frame-command)         
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2))
          (add-hook 'ediff-after-quit-hook-internal
                    (lambda ()
                      (setq ediff-after-quit-hook-internal nil)
                      (set-window-configuration wnd))))
      (error "no more than 2 files should be marked"))))

* ztree
: 
:  ;-------------------------------------------------------------------------------- ZeeTree
:  (add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
:   ;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
:   (require 'ztree-diff)
:   (require 'ztree-dir)
:   ;local binf to tab (ztree-perform-action)
:   ;Call the ztree-diff interactive function: M-x ztree-diff
: 
: 
:  ;;-------------------------------------------------------------------------------- ztree
:  (setq load-path (append load-path '("/home/uri03204/ulib/emacs/ztree-master"))) ;; (insert (format "%s" load-path))
:  (require 'ztree-diff)
:  (require 'ztree-dir)


  ;;'ielm) ;; open file under cursor ;;(global-set-key [M-f9] 'my-insert-last-sexp) ;; insert result
  ;; (global-set-key [M-f2]  'buffer-menu-sort-by-filename)
  ;; (global-set-key [M-f10]  'see-shell-output)                 ;; 
  ;; (global-set-key [M-f7]    'show-hist)                       ;; (global-set-key [S-f7] 'buffer-menu-sort-by-filename)
  ;; (global-set-key [C-f4]    '(lambda () (interactive)  (dired-sidebar-switch-to-dir (file-name-directory (buffer-file-name)))))
  ;; (global-set-key [S-f4]    '(lambda () (interactive) (dired "~/projects/repos" nil)))
  ;; (global-set-key [S-f3]    'org-save-code-block)
  ;; dired-sidebar-switch-to-dir 
  ;; (global-set-key [f4]      'neotree-toggle)
  ;; (global-set-key [f4]      '(lambda () (interactive)  (dired-sidebar-cmd "~/")))
  ;; (global-set-key [C-f4]    'dired-omit-mode)


 ;; if it's a folder=>insert subdir  & move to first; elseif it's a file = >preview-in-other window and move to next, if it's previewed,....
 (defun my-subdired-dfs ()
   (interactive)
   (dired-subtree--is-expanded-p)
   (dired-utils-is-dir-p)
   (dired-utils-is-file-p)
   (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
     (if (eq sDpth 0)
         (if (dired-utils-is-dir-p)
             (dired-subtree-insert))
         (dired-subtree-remove))))

* Faded
;; ------------------------------------------------------ new stuff
;; ;; Save point position between sessions.
;; (use-package saveplace)
;; (setq-default save-place t)
;; (setq save-place-file (expand-file-name "places" user-emacs-directory))
;; 
;; ;; Fix empty pasteboard error.
;; (setq save-interprogram-paste-before-kill nil)
;; 
;; ------------------------------------------------------ Colour
;; (set-background-color "black")
;; (set-background-color "darkgrey")
;; (set-background-color "bisque")
;; (set-background-color "bisque2")
;; (set-background-color "bisque3")
;; (set-face-background 'default "green3")
;; (set-face-background 'default "lightyellow2")
;; (set-face-background 'default "palevioletred")
;; (set-face-background 'default "lightblue")
;; (set-face-background 'default "paleturquoise")
;; (set-face-background 'default "lightblue")
;; 
;; (global-hl-line-mode 0) ; (global-hl-line-unhighlight) (global-hl-line-highlight)
;; (global-mark-ring-max 50)
;; 
;; (setq set-mark-command-repeat-pop 1) ;;-- needs emacs version 22
;; (setq hscroll-margin 30)
;; (setq hscroll-step 20) ;; # 0
;; (setq header-line-format mode-line-format)
;; (global-mark-ring-max 50)
;; (global-set-key "\C-." 'pop-global-mark)
;; (global-set-key [M-SPC] 'pop-global-mark)
;; (global-set-key [S-right] 'forward-word)
;; (global-set-key [remap eval-expression] 'pp-eval-expression)
;; (setq mark-ring-max 50)
;; (setq set-mark-command-repeat-pop 1) - needs emacs version 22
;; (setq-default frame-title-format "%b %p %p(%f)")
;; (setq-default line-spacing 0.06)
;; M-x clone-indirect-buffer RET

: 
: ;;---- option2 parallel swap
: ;(defun parallel-swap (plist &optional start end)  ;; (require 'cl)
: ;  (interactive
: ;   `(,(loop with input = (read-from-minibuffer "Swap: ")
: ;            with limit = (length input)
: ;            for (item . index) = (read-from-string input 0)
: ;                            then (read-from-string input index)
: ;            collect (prin1-to-string item t) until (<= limit index))
: ;     ,@(if (use-region-p) `(,(region-beginning) ,(region-end)))))
: ;  (let* ((alist (list (cons (car plist) (cadr plist)) (cons (cadr plist) (car plist))))
: ;       ;;(alist (loop for (key val . tail) on plist by #'cddr collect (cons key val)))
: ;         (matcher (regexp-opt (mapcar #'car alist) 'words)))
: ;    (save-excursion
: ;      (goto-char (or start (point)))
: ;      (while (re-search-forward matcher (or end (point-max)) t)
: ;        (replace-match (cdr (assoc-string (match-string 0) alist)))))))
: 
: ;;-------------------------------------------------------------------- number a region
: (defun number-region (start end)
:   (interactive "r")
:   (let* ((count 1)
:          (indent-region-function (lambda (start end)
:                                  (save-excursion
:                                    (setq end (copy-marker end))
:                                    (goto-char start)
:                                    (while (< (point) end)
:                                        (or (and (bolp) (eolp))
:                                            (insert (format ",%d " count))
:                                            (setq count (1+ count)))
:                                       (forward-line 1))
:                      (move-marker end nil)))))
:     (indent-region start end))))
: 
: 
: ;;---------------------------------------------------------------------- SGML XML
: ;C-c C-v        sgml-validate
: ;C-M-h          sgml-mark-current-element
: ;C-c C-u C-a    sgml-unfold-all
: ;C-c C-u C-e    sgml-unfold-element
: ;C-c C-f C-e    sgml-fold-element
: ;(require 'psgml)
: ;(add-to-list 'auto-mode-alist '("\\.xml$"     . psgml-mode)   )
: ;(setq load-path (append load-path '("/home/uri03204/ulib/emacs/psgml-1.3.2"))) ;; (insert (format "%s" load-path))
: ;(load-library "psgml")
: (setq sgml-basic-offset 2)
: (autoload 'xml-mode "psgml" "Major mode to edit XML files." t)
: (add-hook 'xml-mode-hook                ; XML-specific settings
:   (function (lambda()
:               (make-face 'sgml-comment-face) ; faces creation
:               (make-face 'sgml-start-tag-face)
:               (make-face 'sgml-end-tag-face)
:               (make-face 'sgml-doctype-face)
:               (set-face-foreground 'sgml-comment-face "SeaGreen") ; faces definitions
:               (set-face-foreground 'sgml-start-tag-face "DarkBlue")
:                                 ;(set-face-foreground 'sgml-end-tag-face "OrangeRed")
:                                 ;(set-face-foreground 'sgml-doctype-face "MintCream") ; markup to face mappings
:                                 ; (see http://www.lysator.liu.se/~lenst/about_psgml/psgml.html#Highlight for details)
:               (setq sgml-markup-faces
:                     '((comment   . sgml-comment-face)
:                       (start-tag . sgml-start-tag-face)
:                       (end-tag   . sgml-end-tag-face)
:                       (doctype   . sgml-doctype-face) ) )
:               (local-set-key [S-left]  'sgml-fold-element)
:               (local-set-key [S-right] 'sgml-unfold-element)
:               ; sgml-fold-element  sgml-unfold-element
:               ; sgml-fold-region
:               ; sgml-fold-subelement
:               ; sgml-unfold-all
:               ; sgml-unfold-line
:               (setq sgml-set-face t) ; turn faces on
:               (setq sgml-indent-data t))))
: ; 3 bottom keys of keypad, upper 6 are work 6 virtual screens
: ;; (global-set-key [S-M-kp-down] 'sgml-fold-subelement)
: ;; (global-set-key [S-M-kp-end]  'sgml-fold-element)   ;  fold everything below current element
: ;; (global-set-key [S-M-kp-next] 'sgml-unfold-element)
: 
: (global-set-key [C-kp-add]      'text-scale-increase)
: (global-set-key [C-kp-subtract] 'text-scale-decrease)       ;; with a C-0 prefix argument.


* deprecated desktop stuff 

;; ---------------------------------------------- Save Session as Desktop
;;  use desktop-change-dir to /home/uri03204/.emacs.d/desktop to get it back
;;    say "no" to save-desktop?
;;    say "yes" to steal from PID?
;; (desktop-save-mode 1)  ; desktop-revert desktop-change-dir
;; (desktop-change-dir "/home/uri03204/myDocs/config")
(setq desktop-path '("/home/kleyn/config/desktop"))
;; (setq desktop-auto-save-timeout 300)


;; ---------------------------------------------- Save Session as Desktop
; use desktop-read to restore kill the lock file
;;  use desktop-change-dir to /home/uri03204/.emacs.d/desktop to get it back
;;    say "no" to save-desktop?
;;    say "yes" to steal from PID?
;;(desktop-change-dir "/home/uri03204/myDocs/config")
;;(desktop-save-mode 1)  ; desktop-revert desktop-change-dir
;;(setq desktop-path '("/home/kleyn/config/desktop"))

;; Automatically save and restore sessions
(setq desktop-dirname             "~/config/desktop/"
      desktop-base-file-name      "emacs.desktop"
      desktop-base-lock-name      "lock"
      desktop-path                (list desktop-dirname)
      desktop-save                t
      desktop-files-not-to-save   "^$" ;reload tramp paths
      desktop-load-locked-desktop t
      desktop-auto-save-timeout   300
      desktop-restore-frames      t)
(desktop-save-mode 0)

* Packages

**  deprecated
: (require 'neotree)
:  (require 'cl)                 ; for transpose
:  (require 'org-eww)
:  (require 's)
:  (require 'f)
:  (require 'dash)
:  (require 'ob-ipython)
:  (require 'ein)
:  (require 'ein-notebook)
:  (require 'ein-subpackages)



* Functions

(defun mk-new-buffer ()
  (interactive)
  (switch-to-buffer (generate-new-buffer (make-temp-name "foo")))
  (clipboard-yank)
)

;; (with-current-buffer (current-buffer)  (proto-swap "bar" "foo"))

;(w32-shell-execute "open" )

: Notes:
: Normally, this function truncates long output according to the value
: of the variables `eval-expression-print-length' and
: `eval-expression-print-level'.  With a prefix argument of zero,
: however, there is no such truncation.  Such a prefix argument
: lso causes integers to be printed in several additional formats
: (octal, hexadecimal, and character).

: -------------------------------------------------------------------------------- cuts
: (delete-char 1)            (insert "I")                                                                      ; mark the source
: (setq src-end (search-forward-regexp ".+(\)|;;;)" (line-end-position) nil))                                  ; (forward-sexp) doesn't work

: (message "new-string %i XX%sXX" (length new-string) new-string)
: (insert new-string)     
: (setq new-string (concat "" resStr "  " (substring  reg-selection (+ (length ";= ") (length resStr)))))
: (message "delete result region =XX%sXX" (buffer-substring-no-properties (region-beginning) (region-end)))
: (delete-region (- (region-beginning) 2) (region-end))                                                        ; delete region and replace with result
: (setq reg-selection (buffer-substring-no-properties (region-beginning) (region-end)))

: (mapc (lambda (x) (message "Found rails %s" x)) rectangle-as-list)
: (message rectangle-as-list)

: (copy-rectangle-as-kill START END)
: reg-search-back for "^;-sexps-;;;;;"
: reg-seach on same line for ;-rails-;
: foreach rail-col in rails:
:    find input line
:    find-eval value on this line
:    foreach output-line
:   

;; ------------------------------------------------------------------- save/restore window config
(defvar window-snapshots '())

(defun save-window-snapshot (&optional key)
  "Save the current window configuration into `window-snapshots` alist."
  (interactive)
  (let ((key (if key key (read-string "Enter a name for the snapshot: "))))
    (setf (alist-get key window-snapshots) (current-window-configuration))
    (message "%s window snapshot saved!" key))
)

(defun get-window-snapshot (key)
  "Given a KEY return the saved value in `window-snapshots` alist."
  (let ((value (assoc key window-snapshots)))
    (cdr value))
)

(defun restore-window-snapshot ()
  "Restore a window snapshot from the window-snapshots alist."
  (interactive)
  (let* ((snapshot-name (completing-read "Choose snapshot: " (mapcar #'car window-snapshots)))
         (snapshot (get-window-snapshot snapshot-name)))
    (if snapshot
        (set-window-configuration snapshot)
      (message "Snapshot %s not found" snapshot-name)))
)


* Modes

  ; treemacs-display-current-project-exclusively
  ; treemacs-project-follow-mode
  ; treemacs-project-follow-mode
  ; (treemacs-select-directory)

:  (dired-utils-is-dir-p)
:  (dired-utils-is-file-p)
:  (dired-view-current)     ; was dired-display-file
:  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
:  (define-key dired-mode-map (kbd "K") 'dired-k)
:  (define-key dired-mode-map (kbd "p")  'dired-subtree-only-this-file)
:        tbd: pick-off the path of the given file into clipboard
:        of emacs.  It is adviced to place bindings for these into a
:        convenient prefix key map, for example `C-,`
: 
:   dired-subtree-remove
:   dired-subtree-revert
:   dired-subtree-narrow
:   dired-subtree-up
:   dired-subtree-down
:   dired-subtree-previous-sibling
:   dired-subtree-beginning
:   dired-subtree-end
:   dired-subtree-mark-subtree
:   dired-subtree-unmark-subtree
:   dired-subtree-only-this-file
:   dired-subtree-only-this-directory
: 
:  ;(add-hook 'ediff-mode-hook (lambda () (setq ediff-shell "C:/cygwin/bin/mintty.exe")))
:  ;(add-hook 'ediff-load-hook (lambda () (setq ediff-shell "C:/cygwin/bin/mintty.exe")))

** drop sidebar, rather use treemacs
(progn                                       ;; dired-sidebar treepad navigation
  ;(define-key dired-sidebar-mode-map [kp-8]      'dired-previous-line)
  ;(define-key dired-sidebar-mode-map [kp-2]      'dired-next-line)

  (define-key dired-sidebar-mode-map [kp-4]        '(lambda () (interactive)                                        ;; keep
                                                       (message (format "%d %d" (line-number-at-pos) (dired-subtree--get-depth (dired-subtree--get-ov))))
                                                       (if (= (dired-subtree--get-depth (dired-subtree--get-ov)) 0)
                                                          (dired-sidebar-up-directory)
                                                          (dired-subtree-up))))

  (define-key dired-sidebar-mode-map [kp-8]        'dired-subtree-previous-sibling)                                 ;; move #2=ps
  (define-key dired-sidebar-mode-map [kp-5]        'dired-sidebar-subtree-toggle) 
  (define-key dired-sidebar-mode-map [kp-2]        'dired-subtree-next-sibling)                                     ;; move #8=ns                           

  (define-key dired-sidebar-mode-map [kp-6]        'dired-sidebar-find-file)
  ;(define-key dired-sidebar-mode-map [kp-3]       '(lambda () (interactive) (dired-subtree-cycle 4)))
  (define-key dired-sidebar-mode-map [C-kp-6]      '(lambda () (interactive) ;; first child, open if needed
                                                       (if (not (dired-subtree--is-expanded-p)) (dired-sidebar-subtree-toggle))
                                                       (dired-next-line 1)))                                       ;; dired-sidebar-find-file

  (define-key dired-sidebar-mode-map [kp-subtract] '(lambda () (interactive) (dired-sidebar-subtree-toggle) (dired-next-lne)))
  (define-key dired-sidebar-mode-map [kp-0]         '(lambda () (interactive) (ergoemacs-open-in-external-app)))

  ;(define-key dired-sidebar-mode-map [C-kp-5]      'dired-sidebar-up-directory) now subsumed in kp-5
)


;;----------------------- subtree/sidebar

(defun sidebar-toggle ()
  "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
  (interactive)
  ;;(dired-sidebar-toggle-sidebar "~/")
  (ibuffer-sidebar-toggle-sidebar))

(defun dired-sidebar-show (dirname)  ;; TBD open in *current* window?
  (interactive "D")
  (let ((dired-buffer (dired-sidebar-get-or-create-buffer dirname)))
    (dired-sidebar-show-sidebar dired-buffer)
    (pop-to-buffer dired-buffer)
    (ibuffer-sidebar-show-sidebar)
    (setq window-size-fixed nil)))

** other

: TBD dired-sidebar-mode-map
: (dired-sidebar-subtree-toggle)
: (defvar dired-sidebar-mode-map
:   (let ((map (make-sparse-keymap)))
:     (define-key map (kbd "TAB") 'dired-sidebar-subtree-toggle)
:     (define-key map [tab] 'dired-sidebar-subtree-toggle)
:     (define-key map (kbd "C-m") 'dired-sidebar-find-file)
:     (define-key map (kbd "RET") 'dired-sidebar-find-file)
:     (define-key map (kbd "<return>") 'dired-sidebar-find-file)
:     (define-key map "^" 'dired-sidebar-up-directory)
:     (define-key map "-" 'dired-sidebar-up-directory)
:     (define-key map (kbd "C-o") 'dired-sidebar-find-file-alt)
:     (define-key map [mouse-2] 'dired-sidebar-mouse-subtree-cycle-or-find-file)
:     map)
:   "Keymap used for symbol `dired-sidebar-mode'.")
: 
: ;; (define-key emacs-lisp-mode-map [kp-8]        'my-org-babel-prev)
: ;; (define-key emacs-lisp-mode-map [kp-2]        'my-org-babel-next)
: ;; (define-key emacs-lisp-mode-map [M-home]      'org-collapse)
: ;; (define-key emacs-lisp-mode-map [kp-subtract] 'kill-this-buffer-volatile)
: ;; (define-key emacs-lisp-mode-map [kp-divide]   'toggle-window-split)
: 
: 
: 
:  (define-key global-map "\C-co"  'org-capture)
:  (global-set-key "\C-!"          'shell-command) TBD
:  (global-set-key "\C-Q"          'unfill-paragraph)
:  (global-set-key "\C-q"          'quoted-insert)
:  (global-set-key "\C-r"         #'(lambda () (interactive)  (eval (car command-history))))
:  (global-set-key "\C-xi"         'eval-print-last-sexp) ; ielm
:  (global-set-key (kbd "C-.")     'repeat)
:  (global-set-key [(next)]        'cycle-buffer)
:  (global-set-key [(prior)]       'cycle-buffer-backward)
:  (global-set-key [C-insert]      'clipboard-kill-ring-save)
:  (global-set-key [C-kp-insert]   'kill-ring-save)
:  (global-set-key [M-+]           'text-scale-increase)
:  (global-set-key [M--]           'text-scale-decrease)  ;; with a C-0 prefix argument.
:  (global-set-key [M-f8]          'vigenere-encrypt-buffer)
:  (global-set-key [M-return]      'ffap)  ;; open file under cursor
:  (global-set-key [M-up]          'kill-this-buffer-volatile) ;; kill-buffer
:  (global-set-key [M-up]          'other-window)
:  (global-set-key [S-M-kp-down]   'sgml-fold-subelement)   ; M-kp ... conflicts with workspace navigation:
:  (global-set-key [S-M-kp-end]    'sgml-fold-element)      ; fold everything below current element
:  (global-set-key [S-M-kp-next]   'sgml-unfold-element)
:  (global-set-key [S-f7]          'buffer-menu-sort-by-filename)
:  (global-set-key [S-f8]          'dired-omit-mode)
:  (global-set-key [S-insert]      'clipboard-yank)
:  (global-set-key [S-kp-4]        'selective-display-level-decr)
:  (global-set-key [S-kp-5]        'selective-display-level-zero)
:  (global-set-key [S-kp-6]        'selective-display-level-incr)
:  (global-set-key [S-kp-insert]   'yank)
:  (global-set-key [end]           'kill-this-buffer-volatile)
:  (global-set-key [f10]           'see-shell-output) 
:  (global-set-key [f11]           'hs-show-block)
:  (global-set-key [f12]           'hs-hide-block)
:  (global-set-key [f5]            'ffap) ; bookmark-bmenu-list
:  (global-set-key [f6]            'ergoemacs-open-in-external-app)
:  (global-set-key [f7]            'my-list-buffers)
:  (global-set-key [f8]            'vigenere-decrypt-buffer)
:  (global-set-key [f8]            'ztree-dir)
:  (global-set-key [f9]            'ielm)  ;; open file under cursor
: 
:  (global-unset-key (kbd "C-q"))
: 
: ;;------------------------------------------------------------------------------ TFS Version Control
: ;; ;; 1. Place `tfs.el' in your `load-path'.
: ;; ;; 2. In your .emacs file:
: ;; (require 'tfs)
: ;; (setq tfs/tf-exe  "C:\\TF.exe")
: ;; (setq tfs/tf-exe  "C:\\Program Files \(x86\)\\TF.exe")
: ;; ;;(setq tfs/tf-exe  "C:\\Program\ Files\ \(x86\)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\tf.exe")
: ;; ;;(setq tfs/tf-exe  "C:\\Program Files\ \(x86\)\\Microsoft\ Visual\ Studio\ 12.0\\Common7\\IDE\\TF.exe")
: ;; (setq tfs/login "/login:snd\\kleynmi,password")
: ;; ;; 3. also in your .emacs file:
: ;; ;;      set local or global key bindings for tfs commands.  like so:
: 
: ;; (global-set-key  "\C-xvo" 'tfs/checkout)
: ;; (global-set-key  "\C-xvi" 'tfs/checkin)
: ;; (global-set-key  "\C-xvp" 'tfs/properties)
: ;; (global-set-key  "\C-xvg" 'tfs/get)
: ;; (global-set-key  "\C-xvh" 'tfs/history)
: ;; (global-set-key  "\C-xvu" 'tfs/undo)
: ;; (global-set-key  "\C-xvd" 'tfs/diff)
: ;; (global-set-key  "\C-xvs" 'tfs/status)
: ;; (global-set-key  "\C-xva" 'tfs/annotate)
: ;; (global-set-key  "\C-xvw" 'tfs/workitem)
: ;; (global-set-key  "\C-xv+" 'tfs/add)
: ;; (global-set-key  "\C-xv-" 'tfs/delete)
: ;; (global-set-key  "\C-xvc" 'tfs/changeset)
: 
** other

: TBD dired-sidebar-mode-map
: (dired-sidebar-subtree-toggle)
: (defvar dired-sidebar-mode-map
:   (let ((map (make-sparse-keymap)))
:     (define-key map (kbd "TAB") 'dired-sidebar-subtree-toggle)
:     (define-key map [tab] 'dired-sidebar-subtree-toggle)
:     (define-key map (kbd "C-m") 'dired-sidebar-find-file)
:     (define-key map (kbd "RET") 'dired-sidebar-find-file)
:     (define-key map (kbd "<return>") 'dired-sidebar-find-file)
:     (define-key map "^" 'dired-sidebar-up-directory)
:     (define-key map "-" 'dired-sidebar-up-directory)
:     (define-key map (kbd "C-o") 'dired-sidebar-find-file-alt)
:     (define-key map [mouse-2] 'dired-sidebar-mouse-subtree-cycle-or-find-file)
:     map)
:   "Keymap used for symbol `dired-sidebar-mode'.")
: 
: ;; (define-key emacs-lisp-mode-map [kp-8]        'my-org-babel-prev)
: ;; (define-key emacs-lisp-mode-map [kp-2]        'my-org-babel-next)
: ;; (define-key emacs-lisp-mode-map [M-home]      'org-collapse)
: ;; (define-key emacs-lisp-mode-map [kp-subtract] 'kill-this-buffer-volatile)
: ;; (define-key emacs-lisp-mode-map [kp-divide]   'toggle-window-split)
: 
: 
: 
:  (define-key global-map "\C-co"  'org-capture)
:  (global-set-key "\C-!"          'shell-command) TBD
:  (global-set-key "\C-Q"          'unfill-paragraph)
:  (global-set-key "\C-q"          'quoted-insert)
:  (global-set-key "\C-r"         #'(lambda () (interactive)  (eval (car command-history))))
:  (global-set-key "\C-xi"         'eval-print-last-sexp) ; ielm
:  (global-set-key (kbd "C-.")     'repeat)
:  (global-set-key [(next)]        'cycle-buffer)
:  (global-set-key [(prior)]       'cycle-buffer-backward)
:  (global-set-key [C-insert]      'clipboard-kill-ring-save)
:  (global-set-key [C-kp-insert]   'kill-ring-save)
:  (global-set-key [M-+]           'text-scale-increase)
:  (global-set-key [M--]           'text-scale-decrease)  ;; with a C-0 prefix argument.
:  (global-set-key [M-f8]          'vigenere-encrypt-buffer)
:  (global-set-key [M-return]      'ffap)  ;; open file under cursor
:  (global-set-key [M-up]          'kill-this-buffer-volatile) ;; kill-buffer
:  (global-set-key [M-up]          'other-window)
:  (global-set-key [S-M-kp-down]   'sgml-fold-subelement)   ; M-kp ... conflicts with workspace navigation:
:  (global-set-key [S-M-kp-end]    'sgml-fold-element)      ; fold everything below current element
:  (global-set-key [S-M-kp-next]   'sgml-unfold-element)
:  (global-set-key [S-f7]          'buffer-menu-sort-by-filename)
:  (global-set-key [S-f8]          'dired-omit-mode)
:  (global-set-key [S-insert]      'clipboard-yank)
:  (global-set-key [S-kp-4]        'selective-display-level-decr)
:  (global-set-key [S-kp-5]        'selective-display-level-zero)
:  (global-set-key [S-kp-6]        'selective-display-level-incr)
:  (global-set-key [S-kp-insert]   'yank)
:  (global-set-key [end]           'kill-this-buffer-volatile)
:  (global-set-key [f10]           'see-shell-output) 
:  (global-set-key [f11]           'hs-show-block)
:  (global-set-key [f12]           'hs-hide-block)
:  (global-set-key [f5]            'ffap) ; bookmark-bmenu-list
:  (global-set-key [f6]            'ergoemacs-open-in-external-app)
:  (global-set-key [f7]            'my-list-buffers)
:  (global-set-key [f8]            'vigenere-decrypt-buffer)
:  (global-set-key [f8]            'ztree-dir)
:  (global-set-key [f9]            'ielm)  ;; open file under cursor
: 
:  (global-unset-key (kbd "C-q"))
: 
: ;;------------------------------------------------------------------------------ TFS Version Control
: ;; ;; 1. Place `tfs.el' in your `load-path'.
: ;; ;; 2. In your .emacs file:
: ;; (require 'tfs)
: ;; (setq tfs/tf-exe  "C:\\TF.exe")
: ;; (setq tfs/tf-exe  "C:\\Program Files \(x86\)\\TF.exe")
: ;; ;;(setq tfs/tf-exe  "C:\\Program\ Files\ \(x86\)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\tf.exe")
: ;; ;;(setq tfs/tf-exe  "C:\\Program Files\ \(x86\)\\Microsoft\ Visual\ Studio\ 12.0\\Common7\\IDE\\TF.exe")
: ;; (setq tfs/login "/login:snd\\kleynmi,password")
: ;; ;; 3. also in your .emacs file:
: ;; ;;      set local or global key bindings for tfs commands.  like so:
: 
: ;; (global-set-key  "\C-xvo" 'tfs/checkout)
: ;; (global-set-key  "\C-xvi" 'tfs/checkin)
: ;; (global-set-key  "\C-xvp" 'tfs/properties)
: ;; (global-set-key  "\C-xvg" 'tfs/get)
: ;; (global-set-key  "\C-xvh" 'tfs/history)
: ;; (global-set-key  "\C-xvu" 'tfs/undo)
: ;; (global-set-key  "\C-xvd" 'tfs/diff)
: ;; (global-set-key  "\C-xvs" 'tfs/status)
: ;; (global-set-key  "\C-xva" 'tfs/annotate)
: ;; (global-set-key  "\C-xvw" 'tfs/workitem)
: ;; (global-set-key  "\C-xv+" 'tfs/add)
: ;; (global-set-key  "\C-xv-" 'tfs/delete)
: ;; (global-set-key  "\C-xvc" 'tfs/changeset)
: 

* Settings
;;(setq epa-file-select-keys "nope")                                                      ; don't ask about assymmetric key?

;; ---------------------------------------------- Save Session as Desktop
; use desktop-read to restore kill the lock file
;;  use desktop-change-dir to /home/uri03204/.emacs.d/desktop to get it back
;;    say "no" to save-desktop?
;;    say "yes" to steal from PID?
;;(desktop-change-dir "/home/uri03204/myDocs/config")
;;(desktop-save-mode 1)  ; desktop-revert desktop-change-dir
;;(setq desktop-path '("/home/kleyn/config/desktop"))


;; Automatically save and restore sessidons
;(setq desktop-dirname             "~/config/desktop/"
;      desktop-base-file-name      "emacs.desktop"
;      desktop-base-lock-name      "lock"
;      desktop-path                (list desktop-dirname)
;      desktop-save                t
;      desktop-files-not-to-save   "^$" ;reload tramp paths
;      desktop-load-locked-desktop t
;      desktop-auto-save-timeout   300
;      desktop-restore-frames      t)
;(desktop-save-mode 0)


;; (defun my-dired-mode-buffer-p (buf)
;;    "Non-nil if buffer BUF is in `dired-mode'."
;;    (with-current-buffer buf
;;      (derived-mode-p 'dired-mode)))
;; 
;; (defvar ibuffer-never-show-predicates '())
;; (with-eval-after-load "ibuffer" (add-to-list 'ibuffer-never-show-predicates #'my-dired-mode-buffer-p))
;; 

: (require 'highlight-sexp)  - fails
: (add-hook 'lisp-mode-hook 'highlight-sexp-mode)
: (add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)
:  hl-sexp-background-color
:   - hl-sexp-foreground-color
:   - hl-sexp-face
:  Enable `highlight-sexps-mode'
: (list-colors-display)
: (set-face-background hl-line-face "gray50")
: (set-face-background 'show-paren-match  "#888888")
: (face-foreground 'show-paren-match)
: (setq  hl-line-range-function 'nil)
: (setq  hl-line-range-function 'hl-short-range)
: (defun hl-short-range () (cons (- (point) 5) (+ (point 1)))
: (require 'cursor-flash)
: (cursor-flash-mode 1)
: (setq cursor-flash-interval 0.10)



* Key Bindings


  ;;'ielm) ;; open file under cursor ;;(global-set-key [M-f9] 'my-insert-last-sexp) ;; insert result
  ;; (global-set-key [M-f2]  'buffer-menu-sort-by-filename)
  ;; (global-set-key [M-f10]  'see-shell-output)                 ;; 
  ;; (global-set-key [M-f7]    'show-hist)                       ;; (global-set-key [S-f7] 'buffer-menu-sort-by-filename)
  ;; (global-set-key [C-f4]    '(lambda () (interactive)  (dired-sidebar-switch-to-dir (file-name-directory (buffer-file-name)))))
  ;; (global-set-key [S-f4]    '(lambda () (interactive) (dired "~/projects/repos" nil)))
  ;; (global-set-key [S-f3]    'org-save-code-block)
  ;; dired-sidebar-switch-to-dir 
  ;; (global-set-key [f4]      'neotree-toggle)
  ;; (global-set-key [f4]      '(lambda () (interactive)  (dired-sidebar-cmd "~/")))
  ;; (global-set-key [C-f4]    'dired-omit-mode)

(progn ;; neotree treepad navigation                                                             ; (neotree-dir <path>)
  (define-key neotree-mode-map [kp-4]        'neotree-select-up-node)                            ; (define-key neotree-mode-map [kp-8]      back same level  'neotree-previous-line)

  ;(define-key neotree-mode-map [kp-8]       'neotree-??-prev-sib)
  (define-key neotree-mode-map [kp-5]        (neotree-make-executor :dir-fn  'neo-open-dir))
  ;(define-key neotree-mode-map [kp-2]       'neotree-??-next-)

  (define-key neotree-mode-map [kp-9]        'neotree-previous-line)
  (define-key neotree-mode-map [kp-6]        'neotree-change-root)                               ; see: "click changes root"
  (define-key neotree-mode-map [kp-3]        'neotree-next-line)

  (define-key neotree-mode-map [kp-add]      (neotree-make-executor :file-fn 'neotree-quick-look ; tbd and move down one, deleting the other buffer
                                                                    :dir-fn  'neo-open-dired))

  (define-key neotree-mode-map [kp-0]        (neotree-make-executor :dir-fn  'neo-open-dired))
  (define-key neotree-mode-map "O"           (neotree-make-executor :file-fn 'opn-f))            ; (define-key neotree-mode-map "O"          (neotree-make-executor :file-fn 'ergoemacs-open-in-external-app))
)

** ace-window keys
: (defvar aw-dispatch-alist
:   '((?x aw-delete-window "Delete Window")
: 	(?m aw-swap-window "Swap Windows")
: 	(?M aw-move-window "Move Window")
: 	(?c aw-copy-window "Copy Window")
: 	(?j aw-switch-buffer-in-window "Select Buffer")
: 	(?n aw-flip-window)
: 	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
: 	(?c aw-split-window-fair "Split Fair Window")
: 	(?v aw-split-window-vert "Split Vert Window")
: 	(?b aw-split-window-horz "Split Horz Window")
: 	(?o delete-other-windows "Delete Other Windows")
: 	(?? aw-show-dispatch-help))
:   "List of actions for `aw-dispatch-default'.")


:  ;-------------------------------------------------------------------------------- Ace jump
:  ;;
:  ;; ace jump mode major function
:  ;;
:  ;;(add-to-list 'load-path "/full/path/where/ace-jump-mode.el/in/")
:  (autoload
:    'ace-jump-mode
:    "ace-jump-mode"
:    "Emacs quick move minor mode"
:    t)
:  ;; you can select the key you prefer to
:  ;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
: 
:  ;; ;;
:  ;; ;; enable a more powerful jump back function from ace jump mode
:  ;; ;;
:  ;; (autoload
:  ;;   'ace-jump-mode-pop-mark
:  ;;   "ace-jump-mode"
:  ;;   "Ace jump back:-)"
:  ;;   t)
:  ;; (eval-after-load "ace-jump-mode"
:  ;;   '(ace-jump-mode-enable-mark-sync))
:  ;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
: 
:  ;-------------------------------------------------------------------------------- ZeeTree
:  (add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
:   ;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
:   (require 'ztree-diff)
:   (require 'ztree-dir)
:   ;local binf to tab (ztree-perform-action)
:   ;Call the ztree-diff interactive function: M-x ztree-diff
: 
: 
:  ;;-------------------------------------------------------------------------------- ztree
:  (setq load-path (append load-path '("/home/uri03204/ulib/emacs/ztree-master"))) ;; (insert (format "%s" load-path))
:  (require 'ztree-diff)
:  (require 'ztree-dir)

* window and buffer incantations

; re-re-ensure treemacs is top left and ibuffer bottom left
;(let ((topLftWin (window-at  2 2))
;      (botLftWin (window-at  2 (- (frame-height) 2))))
;    (set-window-buffer topLftWin  (window-buffer (treemacs-get-local-window)))
;    (set-window-buffer botLftWin "*Ibuffer*"))
;(set-window-buffer (split-window (select-window (treemacs-get-local-window)) 30 'below) "*Ibuffer*")
;(select-window (treemacs-get-local-window))
;(split-window (select-window (treemacs-get-local-window)) nil 'above)
;(set-window-buffer (split-window (select-window (treemacs-get-local-window)) nil 'below) (get-buffer "*Ibuffer*"))


;(eshell)
;(set-window-buffer (split-window (select-window (get-buffer-window "*eshell*")) 200 'right) "*Messages*")

;(split-window-horizontally 100)

;(split-window-vertically) 
