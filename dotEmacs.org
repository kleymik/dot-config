Emacs Initialisation
invoked by ~/.emacs.d/init.el
 (package-initialize)
 (org-babel-load-file "~/.emacs.d/dotEmacs.org)

* New Stuff/Notes

default-directory
good fonts "Ubuntu Mono"

Print message listing key sequences that invoke the command DEFINITION.
Argument is a command definition, usually a symbol with a function definition.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.

TBD dired-find-file-otherwindow open a cygwin link by inspecting it

------------------------------------------------------------------------------ Org-Mode
(print (cadr info) (get-buffer "*scratch*"))
(write-region (cadr info) nil "L:/MyDocs/history/matlabCmds/org_cmd.m")
(write-region (cadr info) nil "C:/MyDocs/grepHist/aaa_org_cmd.m"))
(save-restriction (org-mark-subtree) (rot13-region (point) (mark))))

find-dired  calls unix find
Dired Listing Switches: Hide Value -ahl --time-style=long-iso
of emacs.  It is advised to place bindings for these into a
convenient prefix key map, for example `C-,`

-------------------------------------------------------------------- Key Bindings
(global-set-key [f4]            'see-orglink-dired) ;;     'desktop-save)
(define-key global-map "\C-co" 'org-capture)
------------------------------------------------------------------------------


* Packages
#+BEGIN_SRC emacs-lisp
(setq load-path (append load-path '("~/ulib/emacs/")))
(setq load-path (append load-path '("~/ulib/emacs/dired-hacks")))

(require 'package)
;(setq package-archives ())
(add-to-list 'package-archives '("melpa"   . "https://melpa.org/packages/")         t)
(add-to-list 'package-archives '("mlpstbl" . "https://stable.melpa.org/packages/")  t)
(add-to-list 'package-archives '("elpaorg" . "https://elpa.gnu.org/packages/")      t)
(add-to-list 'package-archives '("org"     . "https://orgmode.org/elpa/")           t)

;;(add-to-list 'package-archives '("mlpamlk" . "https://melpa.milkbox.net/packages/") t)
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

; --------- dired 
;(require 'all-the-icons-dired-mode)
;(load "all-the-icons-dired.el")
;(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
(require 'uniquify)
(require 'ob)
(require 'regexp-opt)
(require 'em-alias)           ; for eshell

(require 'dired-x)
(require 'wdired)
(require 'dired-subtree)

(require 'dired-sidebar)
(setq dired-sidebar-width 70)
(setq dired-subtree-line-prefix "  ")

(require 'dired-rainbow)
(defconst dired-pickle-extensions  '("pk")  "Dired pickle file extensions")
(dired-rainbow-define audio "#329EE8" dired-pickle-extensions)

;; dired-sidebar-theme
;; (require 'dired-lis)
;; (require 'dired-k)
;; (require 'diffview)        ; make patch files look like ediff
;(use-package dired-sidebar
;  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
;  :ensure nil
;  :commands (dired-sidebar-toggle-sidebar))

(load-library "vigenere")
(require 'yafolding)          ; (require 'origami)

;; --------- org mode and babel
(require 'org)
(require 'ox)                 ; org export
(require 'ox-beamer)
(require 'ox-gfm)
(require 'ox-reveal)
(setq Org-Reveal-root "file:///home/kleyn/ulib/reveal.js-master/js/reveal.js")
(setq Org-Reveal-title-slide nil)

(require 'orgtbl-join)
;(load-file "orgtbl-join.el")
;(load-file "org-insert-dblock.el") ;; optional, extends C-c C-c i

; ---------jupyter / ipython / emacs
(require 'jupyter)
(require 'pyvenv) ; M-x: pyvenv-activate RET <path-to-venv>
(setq org-confirm-babel-evaluate nil)    ;; no-confirm
(with-eval-after-load 'org (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
; (defun org-export-get-reference (a b) nil)
; org<->python deprecated
;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
; ein - better to use emacs-ipython-notebook?
; failed
(require 'zmq)
(require 'calc)

(require 'cursor-flash)
(cursor-flash-mode 1)
(setq cursor-flash-interval 0.10)

;(require 'highlight-sexp)  - fails
;(add-hook 'lisp-mode-hook 'highlight-sexp-mode)
;(add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)
; hl-sexp-background-color
;  - hl-sexp-foreground-color
;  - hl-sexp-face

;(require 'highlight-sexps)  fails
;(add-hook 'lisp-mode-hook 'highlight-sexps-mode)
;(add-hook 'emacs-lisp-mode-hook 'highlight-sexps-mode)
;; Enable `highlight-sexps-mode'

;; --------- deprecated
; (require 'cl)                 ; for transpose
; (require 'org-eww)
; (require 's)
; (require 'f)
; (require 'dash)
; (require 'ob-ipython)
; (require 'ein)
; (require 'ein-notebook)
; (require 'ein-subpackages)


(message "-------------- Done: Packages")
#+END_SRC

* Function Definitions

#+BEGIN_SRC emacs-lisp


;;----------------------------------------------------- one-liners
(defun describe-last-function() (interactive) (describe-function last-command))
(defun diredFaraday()           (interactive) (dired "/scp:kleyn@192.168.1.89:/home/kleyn"))
(defun diredGem()               (interactive) (dired "/scp:u0_a94@192.168.1.93#8022:/data/data/com.termux/files/home/MyDocs"))
(defun diredGem2()              (interactive) (dired "/ssh:u0_a94@192.168.1.93#8022:/data/data/com.termux/files/home/MyDocs"))
(defun diredHome ()             (interactive) (dired "/home/kleyn/" nil))
(defun diredTuringIn()          (interactive) (dired "/scp:kleyn@192.168.1.243:/home/kleyn"))
(defun diredTuringOut()         (interactive) (dired "/scp:kleyn@192.168.1.8:/home/kleyn"))
(defun instimestamp()           (interactive) (insert (format-time-string "%Y%m%d_%H:%M:%S")))
(defun see-dotBashRc()          (interactive) (find-file "/home/kleyn/config/dot/.bashrc"))
(defun see-orglink-dired()      (interactive) (org-open-at-point t))
(defun see-shell-output()       (interactive) (switch-to-buffer-other-window "*Shell Command Output*"))
(defun see-sql()                (interactive) (find-file "C:/MyDocs/notebooks/sqlScripts.org"))
(defun show-hist()              (interactive) (list-command-history))
(defun slashBwd()               (interactive) (replace-string  "/" "\\" nil (line-beginning-position) (line-end-position)))
(defun slashFwd()               (interactive) (replace-string "\\"  "/" nil (line-beginning-position) (line-end-position)))

;;(defun diredGemA()            (interactive) (dired "/adb::/data/data/com.termux/files/home/MyDocs"))
;;(defun diredGemA()            (interactive) (dired "/adb::/storage"))

;;----------------------------------------------------- for small keyboards without function keys
(defun ke()  (interactive)  (kill-emacs))
(defun ds()  (interactive)  (eshell))
(defun cf3() (interactive)  (eshell))
(defun da()  (interactive)  (find-file "/data/data/com.termux/files/home/org/access.org"))
(defun sf3() (interactive)  (find-file "/data/data/com.termux/files/home/dot/dotBashrc"))
(defun sf8() (interactive)  (dired-omit-mode))
(defun db()  (interactive)  (find-file "/data/data/com.termux/files/home/dot/dotBashrc"))
(defun dd()  (interactive)  (find-file "/data/data/com.termux/files/home/MyDocs/aNotes/org/doAndDone.org"))
(defun de()  (interactive)  (find-file "/data/data/com.termux/files/home/.emacs.d/dotEmacs.org"))
(defun f3()  (interactive)  (find-file "/data/data/com.termux/files/home/.emacs.d/dotEmacs.org"))
(defun dz()  (interactive)  (progn (ztree-dir "/data/data/com.termux/files/home/MyDocs/projects") (split-window-right 40)))

;;----------------------------------------------------- new
(defun bool-flip-do-flip ()
  (interactive)
  (let ((currWord (thing-at-point 'word))
        (bnds (bounds-of-thing-at-point 'word)))
    (setq flippedWord (cond ((equal currWord "1")     "0")
                            ((equal currWord "0")     "1")
                            ((equal currWord "Yes")   "No")
                            ((equal currWord "No")    "Yes")
                            ((equal currWord "False") "True")
                            ((equal currWord "True")  "False")))
    (save-excursion
      (delete-region (car bnds) (cdr bnds))
      (insert flippedWord))))

(defun make-region-read-only (start end)
  (interactive "*r")
  (let ((inhibit-read-only t))
    (put-text-property start end 'read-only t)))

(defun make-region-read-write (start end)
  (interactive "*r")
  (let ((inhibit-read-only t))
    (put-text-property start end 'read-only nil)))

(defun set-region-writeable ()
  "Removes the read-only text property from the marked region.

  Use `set-region-read-only' to set this property."
  ;; See https://stackoverflow.com/questions/7410125
  (interactive)
  (with-silent-modifications
    (remove-text-properties (point-min) (point-max) '(read-only t))))

(defun remove-region-read-only ()
  (interactive)
  (let ((inhibit-read-only t))
    (remove-text-properties  (point-min) (point-max) '(read-only t))
    ;; (eshell-quit-process)
  ))

(defun fixReadOnly ()
  (interactive)
  (let ((inhibit-read-only t))
    (remove-text-properties  (point-min) (point-max) '(read-only t))
    ;; (eshell-quit-process)
  ))

(defun eshell/clear ()
  "Clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))

;;---------------------------------------------------- Other
(defun filepath-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

(defun hide-ctrl-M ()
  "Hides the disturbing carriage return '^M' showing up in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(defun insertcodePyCodeSnippet ()
  (interactive)
  (move-end-of-line nil)
  (if (= (line-beginning-position) (line-end-position))
      (progn (move-beginning-of-line nil)
             (indent-according-to-mode)
             (insert "breakpoint()")
             (newline)
             (indent-according-to-mode)
             (previous-line))
      (progn (backward-word)
             (let ((currWord (thing-at-point 'word)))
             (if (equal currWord "breakpoint")
               (delete-region (line-beginning-position) (+ (line-end-position)1))
               (progn (move-beginning-of-line nil)
                      (indent-according-to-mode)
                      (insert "breakpoint()")
                      (newline)
                      (indent-according-to-mode)
                      (previous-line)))))))

;; (insert "from util import dbg_toolbag as t; t.brk()")
;; (insert "from see import see; import ipdb; ipdb.set_trace(context=15) # breakpoint()")
;; (newline-and-indent)
;; (end-of-line)
;; (open-line)

;; ------------------------------------------------------------------- Scroll One Line At a time
(defun scroll-one-line-up (&optional arg)
  "Scroll the selected window up (forward in the text) one line (or N lines)."
  (interactive "p")
  (scroll-up (or arg 1)))
(defun scroll-one-line-down (&optional arg)
  "Scroll the selected window down (backward in the text) one line (or N)."
  (interactive "p")
  (scroll-down (or arg 1)))

;;-------------------------------------------------------------------- Column space
(defun go-to-column (column)
  (interactive "nColumn: ")
  (move-to-column column t))

;; ------------------------------------------------------------------- Window Sizing
(defun window-hwiden (&optional arg)
  "Widen window"
  (interactive "p")
  (enlarge-window-horizontally 10))
(defun window-hshrink (&optional arg)
  "Shrink window"
  (interactive "p")
  (shrink-window-horizontally 10))

;; ------------------------------------------------------------------- unfill-paragraph
;;; Stefan Monnier <foo at acm.org>. It is the opposite of
;;; fill-paragraph. Takes a multi-line paragraph and makes
;;; it into a single line of text.
(defun unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

;;  ------------------------------------------------------------------ Buffer List Menu
(defun my-list-buffers (&optional files-only)
  "Display a list of existing buffers with file only"
  (interactive "P")
  (switch-to-buffer (list-buffers-noselect t)))
(setq Buffer-menu-name-width 80)

(defun buffer-menu-sort-by-filename (&optional arg)
  (interactive "P")
  (Buffer-menu-sort 6))


;; ------------------------------------------------------------------- TreesyCalc

(defun insertTreeCalcSexp ()
   "Eval expression and insert value after the expression"
    (interactive)
    (save-excursion
        (backward-up-list)
        (mark-sexp)
        (setq selSexp (buffer-substring-no-properties (region-beginning) (region-end))) ;< cleanse angle brackets from string
        (message "sexp:%s" selSexp)

        (setq res (my-eval-string selSexp))
        (message "res :%s" res)

        (goto-char (line-beginning-position))
        (cond ((search-forward-regexp "\(.[ \t]+;=" (line-end-position) nil)  ; try just after operator
               (push-mark)
               (cond ((search-forward-regexp ";;;" (line-end-position) nil)   ; otherwise after semi-colon
                      (setq reg-selection (buffer-substring-no-properties (region-beginning) (region-end)))
                      ;; delete-and-extract-region?
                      ;; (setq reg-selection (buffer-substring-no-properties (delete-and-extract-region (region-beginning) (region-end))))
                      (message "got mark-point region:%s" reg-selection)))))

        ; replace in region string
        (delete-region (- (region-beginning) 2) (region-end))                  ; delete region
        (setq resStr (format "%4.0f" res))
        (setq new-string (concat ";= " resStr "  " (substring  reg-selection (+ (length ";= ") (length resStr)))))
        (message "new-string %i XX%sXX" (length new-string) new-string)
        (insert new-string)     
    )
)
    ;(mark-sexp)
        ;(align-regexp (- (region-beginning) 10) (region-end) " ;;; ")   ; align results
        ;(align-regexp (- (region-beginning) 10) (region-end) " ;;  ")   ; align descriptions
        ;(backward-up-list)



;; ------------------------------------------------------------------- Eval
(defun eval-and-insert ()
  "Eval expression and insert value after the expression"
  (interactive)
  (pp-eval-expression (preceding-sexp))
  ;;(eval-print-last-sexp 0)
)

(defun my-eval-string (string)
  "Evaluate elisp code stored in a string."
  (eval (car (read-from-string string))))

 ;; TBD format based on datatype or use C-u C-x C-e

(defun my-insert-last-sexp ()
    (interactive)
    (let ((value (eval (preceding-sexp))))
      ;;(kill-sexp -1)
      (insert (format " = %S" value))))  ;; TBD format based on datatype or use C-u C-x C-e

;; Normally, this function truncates long output according to the value
;; of the variables `eval-expression-print-length' and
;; `eval-expression-print-level'.  With a prefix argument of zero,
;; however, there is no such truncation.  Such a prefix argument
;; lso causes integers to be printed in several additional formats
;; (octal, hexadecimal, and character).

;; ------------------------------------------------------------------- transpose sexps
;; transpose items in list
(defun my-transpose-sexps ()
  "If point is after certain chars transpose chunks around that.
   Otherwise transpose sexps."
  (interactive "*")
  (if (not (looking-back "[,]\\s-*" (point-at-bol)))
      (progn (transpose-sexps 1) (forward-sexp -1))
    (let ((beg (point)) end rhs lhs)
      (while (and (not (eobp))
                  (not (looking-at "\\s-*\\([,]\\|\\s)\\)")))
        (forward-sexp 1))
      (setq rhs (buffer-substring beg (point)))
      (delete-region beg (point))
      (re-search-backward "[,]\\s-*" nil t)
      (setq beg (point))
      (while (and (not (bobp))
                  (not (looking-back "\\([,]\\|\\s(\\)\\s-*" (point-at-bol))))
        (forward-sexp -1))
      (setq lhs (buffer-substring beg (point)))
      (delete-region beg (point))
      (insert rhs)
      (re-search-forward "[,]\\s-*" nil t)
      (save-excursion (insert lhs)))))

;; ------------------------------------------------------------------- save/restore window config
(defvar window-snapshots '())

(defun save-window-snapshot (&optional key)
  "Save the current window configuration into `window-snapshots` alist."
  (interactive)
  (let ((key (if key key (read-string "Enter a name for the snapshot: "))))
    (setf (alist-get key window-snapshots) (current-window-configuration))
    (message "%s window snapshot saved!" key)))

(defun get-window-snapshot (key)
  "Given a KEY return the saved value in `window-snapshots` alist."
  (let ((value (assoc key window-snapshots)))
    (cdr value)))

(defun restore-window-snapshot ()
  "Restore a window snapshot from the window-snapshots alist."
  (interactive)
  (let* ((snapshot-name (completing-read "Choose snapshot: " (mapcar #'car window-snapshots)))
         (snapshot (get-window-snapshot snapshot-name)))
    (if snapshot
        (set-window-configuration snapshot)
      (message "Snapshot %s not found" snapshot-name))))

;; ------------------------------------------------------------------- transpose windows
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

;;-------------------------------------------------------------------- Buffer / Buffer Menu
(defun buffer-menu-sort-by-filename (&optional arg)
  (interactive "P")
  (Buffer-menu-sort 6))

(defun kill-this-buffer-volatile ()
    "Kill current buffer, even if it has been modified."
    (interactive)
    (set-buffer-modified-p nil)
    (kill-this-buffer))

(defun my-revert-buffer ()
  (interactive)
  (revert-buffer nil t) ; don't ask to confirm
  (goto-char (point-max)))

(defun mk-new-buffer ()
  (interactive)
  (switch-to-buffer (generate-new-buffer (make-temp-name "foo")))
  (clipboard-yank))

;;-------------------------------------------------------------------- Shell
(defun shell-command-on-buffer (command)
  (interactive "Shell command on buffer: ")
  (shell-command-on-region (point-min) (point-max) command t))


;;-------------------------------------------------------------------- Line Spacing
(defun toggle-line-spacing ()
  "Toggle line spacing between no extra space to extra half line height."
  (interactive)
  (if (eq line-spacing nil)
      (setq-default line-spacing 0.05)  ; add 0.5  height between lines
    (setq-default line-spacing nil)))   ; no extra height between lines

;;-------------------------------------------------------------------- unjustify
(defun unjustify-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

;;-------------------------------------------------------------------- Enhanced Line Editing
(defun delete-whitespace-right ()
   (interactive) ;; "\\s-"
   (delete-region (point) (save-excursion (skip-chars-forward "[ \t]+") (point)))
)

(defun ed-copy-line (arg)
  "Copy lines to the kill ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

(defun ed-dup-line ()
  "Duplicate line under cursor"
  (interactive)
  (let ((start-column (current-column)))
    (save-excursion                     ;save-excursion restores mark
      (forward-line -1)
      (ed-copy-line 1)
      (forward-line 1)
      (move-to-column 0)
      (yank))
    (move-to-column start-column))
  (message "line is dup'ed"))


;;---- option1 proto swap
(defun proto-swap (a b)  ;; (require 'regexp-opt)
  (save-excursion
    (goto-char (point-min))
    (let ((re (regexp-opt (list a b))))
      (while (re-search-forward re nil t nil)
        (goto-char (match-beginning 0))
        ; (message (format "match %d" (point)))
        (when (looking-at (regexp-opt (list a)))
          ; (message "match a")
          (replace-match b))
        (when (looking-at (regexp-opt (list b)))
          ; (message "match b")
          (replace-match a))
        (goto-char (match-end 0))))))

;; (with-current-buffer (current-buffer)  (proto-swap "bar" "foo"))

;;---- option2 parallel swap
;(defun parallel-swap (plist &optional start end)  ;; (require 'cl)
;  (interactive
;   `(,(loop with input = (read-from-minibuffer "Swap: ")
;            with limit = (length input)
;            for (item . index) = (read-from-string input 0)
;                            then (read-from-string input index)
;            collect (prin1-to-string item t) until (<= limit index))
;     ,@(if (use-region-p) `(,(region-beginning) ,(region-end)))))
;  (let* ((alist (list (cons (car plist) (cadr plist)) (cons (cadr plist) (car plist))))
;       ;;(alist (loop for (key val . tail) on plist by #'cddr collect (cons key val)))
;         (matcher (regexp-opt (mapcar #'car alist) 'words)))
;    (save-excursion
;      (goto-char (or start (point)))
;      (while (re-search-forward matcher (or end (point-max)) t)
;        (replace-match (cdr (assoc-string (match-string 0) alist)))))))

(defun uniq-lines (beg end)
  "Unique lines in region.
   Called from a program, there are two arguments:
   BEG and END (region to sort)."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (not (eobp))
        (kill-line 1)
        (yank)
        (let ((next-line (point)))
          (while
              (re-search-forward
               (format "^%s" (regexp-quote (car kill-ring))) nil t)
            (replace-match "" nil nil))
          (goto-char next-line))))))
;(w32-shell-execute "open" )

;;-------------------------------------------------------------------- number a region
(defun number-region (start end)
  (interactive "r")
  (let* ((count 1)
     (indent-region-function (lambda (start end)
                   (save-excursion
                     (setq end (copy-marker end))
                     (goto-char start)
                     (while (< (point) end)
                       (or (and (bolp) (eolp))
                       (insert (format ",%d " count))
                       (setq count (1+ count)))
                       (forward-line 1))
                     (move-marker end nil)))))
    (indent-region start end)))

;;-------------------------------------------------------------------- quotify list of items
(defun lines-to-cslist (start end &optional arg)
  (interactive "r\nP")
  (let ((insertion
         (mapconcat
          (lambda (x) (format "'%s'" x))
          (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)
    (when arg (forward-char (length insertion)))))

;;-------------------------------------------------------------------- swap
(defun swaperooni ()
  "Swap two tab-separated fields in each line in buffer."
  (interactive)
  (let ((re-1 "\\(.+\\)\t\\(.+\\)") (re-2 "\\2\t\\1"))
    (save-restriction
      (save-excursion
        (save-match-data
          (widen)
          (goto-char (point-min))
          (while (not (eobp))
            (let ((line (buffer-substring (point-at-bol) (point-at-eol))))
              (when (string-match re-1 line)
                (delete-region (point-at-bol) (point-at-eol))
                (insert (replace-regexp-in-string re-1 re-2 line)))
              (forward-line 1))))))))


;;-------------------------------------------------------------------- align
(defun align-repeat (start end regexp)
  "Repeat alignment with respect to the given regular expression. Provide arg [[:space:]]+"
  (interactive "r\nsAlign regexp: ")
  ;; 1 First, the regular expression to align with. This expression begins with \(\s-*\), which stands for “an arbitrary number of spacing characters”.
  ;; 2 Then the parenthesis group to modify, 1 by default. This will align the expression by modifying the matching whitespaces in front of the regular expression, if any.
  ;;   The modification amounts to adding some number of whitespaces to that part of the regular expression.
  ;; 3 Additional number of whitespaces to add, the default 1 is fine. Set to 0 if no additional whitespace is needed.
  ;; 4 Finally, answer n/y, depending whether the alignment must be done once or repeated.
  (align-regexp start end (concat "\\(\\s-*\\)" regexp) 1 1 t))

;;-------------------------------------------------------------------- align
(defun alignFoo (pat)
  (interactive "spattern?")
  (align-regexp (region-beginning) (region-end) (concat "\\(\\s-*\\)" pat) 1 1 nil)
  ;;(align-regexp beg end (concat "\\(\\s-*\\)" pat) 1 1 nil)
  )


;;-------------------------------------------------------------------- Open With
(defun ergoemacs-open-in-external-app ()
  "Open the current file or dired marked files in external app."
  (interactive)
  (let (doIt (myFileList
              (cond
               ((string-equal major-mode "dired-mode") (dired-get-marked-files))
               (t (list (buffer-file-name))) ) ) )
    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files?") ) )
    (when doIt
      (cond
       ((string-equal system-type "window-nt")
        (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList))

       ((string-equal system-type "cygwin")
        (mapc (lambda (fPath) (message (concat "cygstart.exe " fPath))) myFileList)
        (mapc (lambda (fPath) (shell-command (concat "cygstart.exe " fPath))) myFileList))

       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList))

       ((string-equal system-type "gnu/linux")
        (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList))
       )
      )
    )
)

;; ------------------------------------------------------------------- Selective Display
(setq selective-display-lev 0)
(defun selective-display-level-incr (&optional arg)
        (interactive "P")
        (setq selective-display-lev (+ selective-display-lev 1))
        (set-selective-display selective-display-lev))
(defun selective-display-level-decr (&optional arg)
        (interactive "P")
        (setq selective-display-lev (- selective-display-lev 1))
        (set-selective-display selective-display-lev))
(defun selective-display-level-zero (&optional arg)
        (interactive "P")
        (setq selective-display-lev 0)
        (set-selective-display selective-display-lev))

(message "-------------- Done: Handy Funs Section")
#+END_SRC

*** faded
(add-hook 'find-file-hook  ;; ensure file in production can't be modified via emacs
  '(lambda ()
     (when (string= (substring (buffer-file-name) 0 4) "/dls")
       (message "Toggle to read-only for existing file")
           ; (read-only-mode ?)
       (toggle-read-only 1))))

----------------------------------- scroll windows in synch
 (defun mwheel-scroll-all-function-all (func &optional arg)
    (if (and scroll-all-mode arg)
        (save-selected-window
          (walk-windows
           (lambda (win)
             (select-window win)
             (condition-case nil
                 (funcall func arg)
               (error nil)))))
      (funcall func arg)))
(defun mwheel-scroll-all-scroll-up-all   (&optional arg)  (interactive) (mwheel-scroll-all-function-all 'scroll-up arg))
(defun mwheel-scroll-all-scroll-down-all (&optional arg)  (interactive) (mwheel-scroll-all-function-all 'scroll-down arg))
(setq mwheel-scroll-up-function   'mwheel-scroll-all-scroll-up-all)
(setq mwheel-scroll-down-function 'mwheel-scroll-all-scroll-down-all)


(defun replace-selected ()
  (interactive)
  (if (region-active-p)
      (replace-string "^\(.*[0-9]+?:[0-9]+\)" "[[https://www.lds.org/scriptures/search?lang=eng&query=\1&x=0&y=0][\1]]"
                      nil (region-beginning) (region-end))
     (replace-regexp "^\(.*[0-9]+?:[0-9]+\)" "[[https://www.lds.org/scriptures/search?lang=eng&query=\1&x=0&y=0][\1]]")
     ))



(defun my-indent-to-column (&optional arg)
  "indent to specificied column"
  (interactive "p")
  (indent-to-column (or arg 100)))

------------------------------------------------------------------- Open App
(defun w32-browser (doc) (w32-shell-execute 1 doc))
(eval-after-load "dired" '(define-key dired-mode-map [f3]
                (lambda ()
                  (interactive)
                  (w32-browser (dired-replace-in-string "/" "\\" (dired-replace-in-string "/cygdrive/C/" "C:\\" (dired-get-filename)))))))

(defun indent-to-col()     (interactive) (indent-to-column 110))
(defun see-doAndDone()     (interactive) (find-file "/run/user/1000/a37849ebaffed48d/C0A8-1F0C/Android/data/com.termux/files/MyDocs/aNotes/doAndDone.org"))

/adb::/path/to/file.
C-x C-f /:adb::/storage/emulated/0
C-x C-f /adb::/storage/emulated/0

-------------------------------------------------------------------- parallel cursor editing
(defun parallel-replace-read-plist (input)
  (loop with limit = (length input)
        for (item . index) = (read-from-string input 0)
        then (read-from-string input index)
        collect (prin1-to-string item t) until (<= limit index)))

(defun parallel-replace (plist &optional start end)
  (interactive
   (cons
    (parallel-replace-read-plist (read-from-minibuffer "Replace: "))
    (when (use-region-p)
      (list (region-beginning) (region-end)))))
  (let* ((alist (loop for (key val . tail) on plist by #'cddr
                      collect (cons key val)))
         (matcher (regexp-opt (mapcar #'car alist) 'words)))
    (save-excursion
      (goto-char (or start (point)))
      (while (re-search-forward matcher (or end (point-max)) t)
        (replace-match (cdr (assoc-string (match-string 0) alist)))))))

(defvar parallel-replace-alist nil)

(defun parallel-query-replace (plist &optional start end)
  (interactive
   (cons
    (parallel-replace-read-plist (read-from-minibuffer "Replace: "))
    (when (use-region-p)
      (list (region-beginning) (region-end)))))
  (let* (matcher)
    (set (make-local-variable 'parallel-replace-alist)
         (loop for (key val . tail) on plist by #'cddr
               collect (cons key val)))
    (setq matcher (regexp-optp (mapcar #'car parallel-replace-alist) 'words))
    (query-replace-regexp matcher
                          '(replace-eval-replacement
                            replace-quote
                            (cdr (assoc-string (match-string 0) parallel-replace-alist case-fold-search)))
                          nil
                          start
                          end)))

* Commands Quick Ref
(dired  "/ssh:192.168.1.124#8022:/data/data/com.termux/files/home")  ; using  port
cosmo -> /run/user/1000/52efffd273e1b33b/Android/data/com.termux/files
(beginning-of-line)
(end-of-line)
(goto-char (mark-marker))
(goto-char (pop-global-mark))
(remove-hook 'html-mode-hook 'xah-html-mode-keys) ; removing a hook
(server-start)
(setq Buffer-menu-sort-column 6)
(setq tab-stop-list '(60))
(x-get-selection-value)
(xclip-mode 1) for emacs in terminal , export kill-yank

close  to close ^Q^]
clone-indirect-buffer RET
ediff-revision
find-dired   calls unix find
flush-lines
go up C-c C-u
increase/decrease font C-c kepad+ keypad-
indent-to-column
isearch-forward-regexp
map-query-regexp-replace
package-list-packages
proced       to view processes
read-kbd-macro
rot13-region  (C-c C-r)
set-buffer-file-coding-system unix <--format
tail-mode     auto-revert-tail-mode (C-cr)
telnet host port     to open
vc-ediff

------------------------------------------------------------------- defalias
(defalias 'my-open-file   (kbd "C-a C-s / C-b C-s : C-x C-x ESC w C-x C-f C-a C-y DEL C-k RET")
(defalias 'flipslash      (kbd "C-SPC C-e C-SPC ESC < ESC w C-x b *scratch* RET C-e RET C-y C-r SPC C-f C-SPC C-r total SPC use C-x C-x C-w ESC \ 2*DEL / C-a ESC \ ESC x replace-string / RET \ RET C-a"))
(defalias 'make-org-tbl   (kbd "ESC x org-mode RET ESC < C-SPC ESC > C-c |"))
(defalias 'see-logbooks   (kbd "C-x C-f ~/myDocs/logbook RET"))
(defalias 'vc-ediff-frame (kbd "C-x 5 2 M-x vc-ediff RET y"))

; cleanMlLog
;;[                     ;; self-insert-command
;;3*C-k                 ;; kill-line
(fset 'cleanMlLog [?\C-s ?\[ ?\C-q ?\C-h ?\C-a escape ?\C-k ?\C-k ?\C-k])

* Regexp Replace

#+BEGIN_SRC elisp

(defun replace-thing ()
 (interactive)
 (goto-char 1)
    ;; extricate the #%% phrase from all the other cruft on the pycharm line
    (while (search-forward-regexp "^# \\+ pycharm=[^#]+#%%\\([^,}]+\\).*$" nil t)
      (setq cruft (match-string 1))
      (replace-match (concat "#%% " (substring cruft 0 -3)) t nil)
      (message (concat "#%%%% " (substring cruft 0 -3) "-XXX"))))

;;)) ; drop # and \n} cruft at end


#+END_SRC
-------------------------------------------------------------- SAMPLE REPLACE REGEXP
replace unprintable ""
(replace-string "" "")
(replace-string "" "")
(replace-string "" "")
(replace-regexp "0\.999999([0-9]+)[$,]" "" nil (point-min) (point-max))
(replace-regexp "[ \t]+" " ")      ; REPLACE mutli-space with single-space
(replace-regexp "[ \t]+|" "_" )    ; space -> _
(replace-regexp "[ \t]+" "|")      ; space -> |
(replace-regexp "'[ \t]+'" "|" )   ; space between quotes ->
(goto-char (mark-marker))
(replace-regexp "A" "B" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil)
(replace-regexp "A" "B" nil (mark-marker) (point-max))
(replace-regexp "(line [0-9]+)" "" nil (point-min) (point-max)) ; clear (line 62)
(replace-regexp " [0-9][0-9]:[0-9][0-9]:[0-9][0-9]" "" nil (point-min) (point-max)) ; clear " HH:MM:SS"
N.B. TBD drop last ","


;; (while (search-forward-regexp "^# \\+ pycharm=[^#]+#%% \\([^,}]+\\).*$" nil t)
;; drop # and \n} cruft at end
;;(replace-match (substring (match-string 1) 1 -4) t nil)
;;(concat 'aaa' 'bbb')
;;(message (concat "XXX" (substring (match-string 1) 0 -2) "XXX"))
;;(replace-match (concat "XXX" (match-string 1) "XXX") t nil)))
;;(substring "ABCDEF" 0 -1)
;;(defun replace-thing ()
;; (interactive)
;; (goto-char 1)
;;    (while (search-forward-regexp "\\([^\\)]+\\)" nil t)
;;        (replace-match (upcase (match-string 1)) t nil)))
;;
;;
;;"\\+ pycharm[^#]+\\(#[\w]+\\)"
;;
;;(defun replace-thing ()
;;  (interactive)
;;  (replace-regexp "\\+ pycharm[^#]+\\(#[\w]+\\)" "XX\\1XX"  nil (point-min) (point-max)))
;;
;;(defun replace-thing ()
;;  (interactive)
;;  (replace-regexp "\\(pycharm\\)" "X\\1X"  nil (point-min) (point-max)))
;;
;;(defun replace-thing ()
;;  (interactive)
;;  (replace-regexp "\(pycharm\)" "XX\1XX"  nil (point-min) (point-max)))
;;  (if (region-active-p)      ;;(replace-regexp "(pycharm)" "X\1X"  nil (region-beginning) (region-end))
;(defun replace-thing ()
;  (interactive)
;  (if (region-active-p)
;      (replace-string "# \+ pycharm=[^#]+(#%%.+)}" "[[https://www.lds.org/scriptures/search?lang=eng&query=\1&x=0&y=0][\1]]"  nil (region-beginning) (region-end))
;   ))


* Settings
#+BEGIN_SRC emacs-lisp
(message "-------------- Start Settings")
(setq calendar-week-start-day 1) ; set....mark to get count of days
(desktop-save-mode 1)  ; desktop-revert desktop-change-dir

(blink-cursor-mode 0)
(set-cursor-color "#ff0000")
(setq cursor-type 'box)

(delete-selection-mode 0) ; don't delete selection with next char
(fset 'yes-or-no-p 'y-or-n-p)
(setq bell-volume 0)
(setq case-fold-search t)
(setq column-number-mode t)
(setq default-truncate-lines t)
(setq display-time-day-and-date t) (display-time)
(setq font-lock-maximum-decoration t) ;; 3
(setq fill-column 100)
(setq header-line-format mode-line-format)
(setq inhibit-splash-screen t)
(setq ispell-personal-dictionary "~/.emacs.d/aspell.EN.pws")
(setq kill-ring-max 12)
(setq line-number-mode t)
(setq max-lisp-eval-depth 1200) ; 800
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq uniquify-buffer-name-style 'forward)
(setq use-dialog-box nil)
(setq use-file-dialog nil)
(setq visible-bell t)
(setq-default frame-title-format "%f")  ;;(setq-default frame-title-format "%b %p %p(%f)")
(setq-default line-spacing 0.06)
(setq-default indent-tabs-mode nil)
(setq ivy-height 10)

; ------------------------------------- highlighting
(global-hl-line-mode 1) ; 0 to turn off

(show-paren-mode 1)
(setq show-paren-style 'expression) ; or parenthesis of mixed
(set-face-background 'show-paren-match "#444444")
(set-face-attribute  'show-paren-match nil :weight 'bold :underline nil :overline nil :slant 'normal) 
;(list-colors-display);
(setq show-paren-when-point-inside-paren t)
(setq show-paren-when-point-in-periphery t)

(setq-default x-stretch-cursor t)

(tool-bar-mode -1)
(setq-default frame-title-format "%f")
(transient-mark-mode t)  ;;(setq-default frame-title-format "%b %p %p(%f)")

(setq require-final-newline nil) ;; means don't add newline


;; ----------------------------------------------- Show keystrokes in progress
(setq echo-keystrokes 0.1)
;;------------------------------------------------ buffer reverting
;; Auto refresh buffers when edits occur outside emacs
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;;------------------------------------------------ mouse and region
(setq mouse-drag-copy-region t)
(setq save-interprogram-paste-before-kill t)
;; (setq x-select-enable-primary t)
;; (setq select-enable-primary t)
;; (setq mouse-drag-copy-region t)

;; ----------------------------------------------- Shell
(setq shell-file-name "bash")
(setq explicit-shell-file-name shell-file-name)
;;(setq shell-command-switch "-c")
;; ----------------------------------------------- History
(setq history-length 10000)
(setq list-command-history-max 300)
(savehist-mode 1)
; list-command-history-filter TBD filter out kill-buffer
; (list-command-history)
(global-set-key "\C-s" 'isearch-forward)
;; (xclip-mode 1) for emacs in terminal , export kill-yank

;; ---------------------------------------------- Save Session as Desktop
;;  use desktop-change-dir to /home/uri03204/.emacs.d/desktop to get it back
;;    say "no" to save-desktop?
;;    say "yes" to steal from PID?
;; (desktop-save-mode 1)  ; desktop-revert desktop-change-dir
;; (desktop-change-dir "/home/uri03204/myDocs/config")
(setq desktop-path '("/home/kleyn/.emacs.d/desktops"))
;; (setq desktop-auto-save-timeout 300)

;; ----------------------------------------------- Backup location
;;  /data/data/com.termux/files/home/storage/external/backups
(if (string-match "termux" (getenv "SHELL"))
      (progn ; gem
        (setq backup-directory-alist          `((".*" . , "/data/data/com.termux/files/home/internalBackup/emacs")))
        (setq auto-save-file-name-transforms  `((".*" ,   "/data/data/com.termux/files/home/internalBackup/emacs" t))))
      (progn ; maxwell
       (setq backup-directory-alist          `((".*" . , "/home/kleyn/history/emacsBackups")))
       (setq auto-save-file-name-transforms  `((".*" ,   "/home/kleyn/history/emacsBackups" t)))))

(message (concat "-------------- Done:backup-directory-alist" (format "%s" backup-directory-alist)))

(global-subword-mode 1)
;; from 'better-defaults.el'
;; Allow clipboard from outside emacs
;; (setq x-select-enable-clipboard t
;;       x-select-enable-primary t
;;       save-interprogram-paste-before-kill t
;;       apropos-do-all t
;;       mouse-yank-at-point t)

;;---------------------------------------------- Cycle Buffer
(load-library "cycle-buffer")
(autoload 'cycle-buffer "cycle-buffer" "Cycle forward." t)
(autoload 'cycle-buffer-backward "cycle-buffer" "Cycle backward." t)
(autoload 'cycle-buffer-permissive "cycle-buffer" "Cycle forward allowing *buffers*." t)
(autoload 'cycle-buffer-backward-permissive "cycle-buffer" "Cycle backward allowing *buffers*." t)
(autoload 'cycle-buffer-toggle-interesting "cycle-buffer" "Toggle if this buffer will be considered." t)

;;---------------------------------------------- ibuffer
; (add-to-list 'ibuffer-never-show-regexps "^\\*")
; Ibuffer can show you the differences between an unsaved buffer and the file on disk with `=’.
; '(lambda ()        (ibuffer-switch-to-saved-filter-groups "home")))

(setq ibuffer-saved-filter-groups
  '(("home"
     ("Dired"        (mode . dired)     )
     ("emacs-config" (or (filename . ".emacs.d") (filename . "emacs-config")))
     ("Org"          (or (mode . org-mode) (filename . "OrgMode")))
     ("*Org"         (name . "*Org")    )
     ("Image"        (mode . Image)     )
     ("Magit"        (name . "magit\*") )
     ("jupyter"      (name . "jupyter") )
     ("Help"         (name . "*")       ))))

;;       ("dired"        (mode . dired-mode))
;;(setq ibuffer-mode-hook ())
(defun my-ibuffer-hooks ()
   (setq ibuffer-expert t)
   (ibuffer-auto-mode 1)
   (define-key ibuffer-mode-map (kbd "t")     'ibuffer-toggle-filter-group)
   (define-key ibuffer-mode-map [kp-9]        'previous-line)
   (define-key ibuffer-mode-map [kp-6]        'ibuffer-toggle-filter-group)
   (define-key ibuffer-mode-map [kp-3]        'next-line)
   (message "in ibuffer"))

(add-hook 'ibuffer-mode-hook 'my-ibuffer-hooks)   ; (lambda ()                        ;; no need to quote the lambda, but try to avoid using them as hooks


(setq ibuffer-formats
      '((mark modified read-only locked " "
              (name 48 48 :left :elide)
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)
              (mark " " (name 16 -1) " " filename)
         )
)


;(defun my-dired-mode-buffer-p (buf)
;   "Non-nil if buffer BUF is in `dired-mode'."
;   (with-current-buffer buf
;     (derived-mode-p 'dired-mode)))

;(defvar ibuffer-never-show-predicates '())
;(with-eval-after-load "ibuffer" (add-to-list 'ibuffer-never-show-predicates #'my-dired-mode-buffer-p))


;; --------------------------------------------- Custom Variables go in ~/emacs.d/init.el
(setq default-truncate-lines t)
(setq tab-width 4)  ;;(setq tab-width 2)

;; --------------------------------------------- TAGS
;; !! run find with absolute path
;; find . -iname '*.el' | etags -
;; find ~/ulib -iname '*.el' | grep -v old | etags -
;; rename TAGS file
;; visit-tags-table
(setq tags-table-list (list (expand-file-name "~/ulib/tags/emacs_252.tags")))

;;------------------------------------------------------------------------------ Eval
;; Normally, this function truncates long output according to the value
;; of the variables `eval-expression-print-length' and
;; `eval-expression-print-level'.  With a prefix argument of zero,
;; however, there is no such truncation.  Such a prefix argument
;; lso causes integers to be printed in several additional formats
;; (octal, hexadecimal, and character).
(message "-------------- Done: Settings")
#+END_SRC

------------------------------------------------------ new stuff
;; Save point position between sessions.
(use-package saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name "places" user-emacs-directory))

;; Fix empty pasteboard error.
(setq save-interprogram-paste-before-kill nil)

------------------------------------------------------ Colour
(set-background-color "black")
(set-background-color "darkgrey")
(set-background-color "bisque")
(set-background-color "bisque2")
(set-background-color "bisque3")
(set-face-background 'default "green3")
(set-face-background 'default "lightyellow2")
(set-face-background 'default "palevioletred")
(set-face-background 'default "lightblue")
(set-face-background 'default "paleturquoise")
(set-face-background 'default "lightblue")

(global-hl-line-mode 0) ; (global-hl-line-unhighlight) (global-hl-line-highlight)
(global-mark-ring-max 50)

(setq set-mark-command-repeat-pop 1) ;;-- needs emacs version 22
(setq hscroll-margin 30)
(setq hscroll-step 20) ;; # 0
(setq header-line-format mode-line-format)
(global-mark-ring-max 50)
(global-set-key "\C-." 'pop-global-mark)
(global-set-key [M-SPC] 'pop-global-mark)
(global-set-key [S-right] 'forward-word)
(global-set-key [remap eval-expression] 'pp-eval-expression)
(setq mark-ring-max 50)
(setq set-mark-command-repeat-pop 1) - needs emacs version 22
(setq-default frame-title-format "%b %p %p(%f)")
(setq-default line-spacing 0.06)
M-x clone-indirect-buffer RET

** Web Proxy
;;-------------------------------------------------------------------- WEB PROXY
(setq url-proxy-services '(("no_proxy" . "work\\.com")
                            ("http" . "proxy.work.com:911")))
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10.*\\)")
     ("http" . "proxy.com:8080")
     ("https" . "proxy.com:8080")))

(setq url-http-proxy-basic-auth-storage
    (list (list "proxy.com:8080" (cons "Input your LDAP UID !" (base64-encode-string "LOGIN:PASSWORD")))))


** Themes
; tango-dark: good theme in init.el:  '(custom-enabled-themes (quote (tango-dark)))
; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
; Now copy your theme's '.el' file to your .emacs.d/themes/ directory. A
; good place to find custom themes is here: emacsthemes.com
; Now load your custom theme by typing the following:
; M-x customize-themes ;;;now press return


* Modes Assoc List
#+BEGIN_SRC emacs-lisp


;;--------------------------------------------------------- Language Modes
(add-to-list 'auto-mode-alist '("\\.sas\\'"   . sas-mode)     )
(add-to-list 'auto-mode-alist '("\\.m\\'"     . octave-mode)  )

(add-to-list 'auto-mode-alist '("\\.cp\\'"    . c++-mode)     )

(add-to-list 'auto-mode-alist '("\\.proc\\'"  . sql-mode)     )
(add-to-list 'auto-mode-alist '("\\.sql\\'"   . sql-mode)     )

(add-to-list 'auto-mode-alist '("\\.make\\'"  . makefile-mode))

(add-to-list 'auto-mode-alist '("\\.org$"     . org-mode)     )
(add-to-list 'auto-mode-alist '("\\.csv$"     . org-mode)     )
(add-to-list 'auto-mode-alist '("\\.bat$"     . dos-mode)     )

(add-to-list 'auto-mode-alist '("\\.xml$"     . xml-mode)     )
(add-to-list 'auto-mode-alist '("\\.aspx$"    . xml-mode)     )
(add-to-list 'auto-mode-alist '("\\.master$"  . xml-mode)     )

(add-to-list 'auto-mode-alist '("\\.mocha\\'" . java-mode)    )
(add-to-list 'auto-mode-alist '("\\.java\\'"  . java-mode)    )
(add-to-list 'auto-mode-alist '("\\.js\\'"    . java-mode)    )
(add-to-list 'auto-mode-alist '("\\.jad\\'"   . java-mode)    )

;;(add-to-list 'auto-mode-alist '("\\.cs$"      . csharp-mode)  )
;;(setq auto-mode-alist   (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))
;;(insert (format "%s" auto-mode-alist)) ( (\.m\' . matlab-mode) ("\\.m\\'" . octave-mode))
;;                                         (\.py$ . python-mode)
;;                                         (\.te?xt\' . text-mode)
;;                                         (\.c\' . c-mode) (\.h\' . c-mode)
;;                                         (\.scm\' . scheme-mode) (\.lsp\' . lisp-mode) (\.ml\' . lisp-mode)
;;                                         (\.f\' . fortran-mode) (\.F\' . fortran-mode) (\.for\' . fortran-mode)
;;                                         (\.p\' . pascal-mode) (\.pas\' . pascal-mode)
;;                                         (\.ad[abs]\' . ada-mode)
;;                                         (\.\([pP]\([Llm]\|erl\)\|al\)\' . perl-mode)
;;                                         (\.s?html?\' . html-mode)
;;                                         (\.cc\' . c++-mode) (\.hh\' . c++-mode) (\.hpp\' . c++-mode) (\.C\' . c++-mode) (\.H\' . c++-mode) (\.cpp\' . c++-mode) (\.cxx\' . c++-mode) (\.hxx\' . c++-mode) (\.c\+\+\' . c++-mode) (\.h\+\+\' . c++-mode)
;;                                         (\.m\' . objc-mode)
;;                                         (\.java\' . java-mode)
;;                                         (\.mk\' . makefile-mode) (\(M\|m\|GNUm\)akefile\(\.in\)?\' . makefile-mode) (\.am\' . makefile-mode)
;;                                         (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode)
;;                                         (\.s\' . asm-mode) (\.S\' . asm-mode) (\.asm\' . asm-mode)
;;                                         (ChangeLog\' . change-log-mode) (change\.log\' . change-log-mode) (changelo\' . change-log-mode) (ChangeLog\.[0-9]+\' . change-log-mode) (changelog\' . change-log-mode) (changelog\.[0-9]+\' . change-log-mode)
;;                                         (\$CHANGE_LOG\$\.TXT . change-log-mode)
;;                                         (\.scm\.[0-9]*\' . scheme-mode)
;;                                         (\.[ck]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\(/\|\`\)\.\(bash_profile\|z?login\|bash_login\|z?logout\)\' . sh-mode) (\(/\|\`\)\.\(bash_logout\|shrc\|[kz]shrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode)
;;                                         (\.mm\' . nroff-mode) (\.me\' . nroff-mode) (\.ms\' . nroff-mode) (\.man\' . nroff-mode)
;;                                         (\.\(u?lpc\|pike\|pmod\)\' . pike-mode)
;;                                         (\.TeX\' . tex-mode) (\.tex\' . tex-mode)
;;                                         (\.ltx\' . latex-mode) (\.sty\' . latex-mode) (\.cls\' . latex-mode) (\.clo\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode)
;;                                         (\.sql\' . sql-mode)
;;                                         (\.m4\' . m4-mode) (\.mc\' . m4-mode)
;;                                         (\.mf\' . metafont-mode) (\.mp\' . metapost-mode)
;;                                         (\.vhdl?\' . vhdl-mode)
;;                                         (\.article\' . text-mode) (\.letter\' . text-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode)
;;                                         (\.tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itcl\' . tcl-mode) (\.itk\' . tcl-mode)
;;                                         (\.icn\' . icon-mode)
;;                                         (\.sim\' . simula-mode) (\.mss\' . scribe-mode)
;;                                         (\.f90\' . f90-mode)
;;                                         (\.indent\.pro\' . fundamental-mode)
;;                                         (\.pro\' . idlwave-mode)
;;                                         (\.awk\' . awk-mode)
;;                                         (\.prolog\' . prolog-mode)
;;                                         (\.tar\' . tar-mode)
;;                                         (\.\(arc\|zip\|lzh\|zoo\|jar\)\' . archive-mode) (\.\(ARC\|ZIP\|LZH\|ZOO\|JAR\)\' . archive-mode)
;;                                         (/drafts/[0-9]+\' . mh-letter-mode)
;;                                         (\.zone\' . zone-mode)
;;                                         (\.y\' . c-mode) (\.lex\' . c-mode)
;;                                         (\.oak\' . scheme-mode)
;;                                         (\.sgml?\' . sgml-mode) (\.xml\' . sgml-mode) (\.dtd\' . sgml-mode)
;;                                         (\.ds\(ss\)?l\' . dsssl-mode)
;;                                         (\.idl\' . idl-mode)
;;                                         ([]>:/\]\..*emacs\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (\.el\' . emacs-lisp-mode)
;;                                         (/crontab\.X*[0-9]+\' . shell-script-mode)
;;                                         (\.\(asn\|mib\|smi\)\' . snmp-mode)
;;                                         (\.\(as\|mi\|sm\)2\' . snmpv2-mode)
;;                                         (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode)
;;                                         (\.[eE]?[pP][sS]\' . ps-mode)
;;                                         (configure\.\(ac\|in\)\' . autoconf-mode)
;;                                         (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode)
;;                                         (#\*mail\* . mail-mode)
;;                                         (\.~?[0-9]+\.[0-9][-.0-9]*~?\' ignore t)
;;                                         (\.[1-9]\' . nroff-mode) (\.g\' . antlr-mode))

(message "-------------- Done: Modes Assoc List")
#+END_SRC

* Modes Section
;; -------------------------- new stuff
;; ;; Save point position between sessions.
;; (use-package saveplace)
;; (setq-default save-place t)
;; (setq save-place-file (expand-file-name "places" user-emacs-directory))

;; ;; Fix empty pasteboard error.
;; (setq save-interprogram-paste-before-kill nil)

;; ;; Auto refresh buffers when edits occur outside emacs
;; (global-auto-revert-mode 1)

;; ;; Also auto refresh dired, but be quiet about it
;; (setq global-auto-revert-non-file-buffers t)
;; (setq auto-revert-verbose nil)

;; ;; Show keystrokes in progress
;; (setq echo-keystrokes 0.5)
(global-subword-mode 1)
;; from 'better-defaults.el'
;; Allow clipboard from outside emacs
;; (setq x-select-enable-clipboard t
;;       x-select-enable-primary t
;;       save-interprogram-paste-before-kill t
;;       apropos-do-all t
;;       mouse-yank-at-point t)

;;------------------------------------------------------------------------------- ido Mode
;; TBD
;;(load-library "ido")
;;(setq ido-enable-flex-matching t)
;;(setq ido-everywhere t)
;;(ido-mode 1)
;;(ido-mode t)
;;(windmove-default-keybindings 'shift)

** Unused
;; ------------------------------------------------------------------- CSHARP Mode
;(autload 'csharp-mode "/home/uri03204/myDocs/ulib/emacs/csharp-mode-0.8.5.elc" t)
(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(defun csharp-mode-untabify ()
  (if (string= (substring mode-name 0 2) "C#")
     (save-excursion
     (delete-trailing-whitespace)
     (untabify (point-min) (point-max)))))
(defun my-csharp-mode-fn ()
  "function that runs when csharp-mode is initialized for a buffer."
  (turn-on-auto-revert-mode)
  (setq indent-tabs-mode nil)
  (require 'flymake)
  (setq flymake-mode nil)
  ;;(add-hook 'write-contents-hooks 'csharp-mode-untabify nil t)
  )
  ;;      (require 'yasnippet)
  ;;      (yas/minor-mode-on)
  ;;      (require 'rfringe)
(add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)
;;(add-hook 'csharp-mode-hook '(lambda () (add-hook 'write-contents-hooks 'csharp-mode-untabify nil t)))

;;-------------------------------------------------------------------- Matlab Mode
(require 'matlab)
(setq matlab-indent-function t)
(setq matlab-shell-command "matlab")
;;(autoload 'matlab-mode "/home/kleyn/myDocs/ulib/emacs/matlab.elc" "Enter Matlab mode." t)
;; User Level customizations:
;;   (setq matlab-verify-on-save-flag nil) ; turn off auto-verify on save
(defun my-matlab-mode-hook ()
  (matlab-mode-hilit)                        ; Turn highlight on
  (setq fill-column 276)             ; where auto-fill should wrap
  (setq matlab-indent-function t)    ; if you want function bodies indented
  (setq matlab-indent-level  2)         ; set matlab indentation
  (set matlab-fill-code nil)
  (setq indent-tabs-mode nil))
(add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

;;-------------------------------------------------------------------- iedit Mode
 TBD (autoload 'iedit-mode "/home/uri03204/myDocs/ulib/emacs/iedit.elc" "Enter iedit mode" t)


;;-------------------------------------------------------------------- ediff
;; (setq ediff-shell "C:/cygwin/bin/mintty.exe")
;;  (if (file-directory-p "c:/cygwin/bin")      (add-to-list 'exec-path "c:/cygwin/bin"))
;;--------------------------------------------------------------------- Diff Stuff
;; (diffview-current)


;;-------------------------------------------------------------------- Switches

;;-------------------------------------------------------------------- Magit
;; (add-to-list 'magit-section-initial-visibility-alist '(stashes . hide))

;; ;; ---------------------------------------------------------------- DOS Mode
;; (autoload 'dos-mode "/home/uri03204/myDocs/ulib/emacs/dos.elc" "Enter DOS CMD mode." t)

;; ------------------------------------------------------------------- Java
;; TBD add hs-minor-mode for hide/show t
;; TDB (add-hook  'java-mode-hook 'my-java-mode-hook t)
;; ;(defun my-java-mode-hook ()
;; ;  (hs-minor-mode)
;; ;  (setq indent-tabs-mode nil))

** Python Mode
#+BEGIN_SRC emacs-lisp

;; ------------------------------------------- Python Mode
;(add-hook 'python-mode-hook
;  #'(lambda ()
;      (define-key python-mode-map "\C-m" 'newline-and-indent)))
;(add-hook 'python-mode-hook
;                 (lambda ()
;                       (setq-default indent-tabs-mode t)
;                       (setq-default tab-width 4)
;                       (setq-default python-indent 4)))
(defun my-python-hook ()
   (setq indent-tabs-mode nil)
   (setq tab-width 4)
   (setq python-indent 4)
   (toggle-truncate-lines 1) ;; deprecated? ->   (setq default-truncate-lines t)
   (progn
     (define-key python-mode-map [kp-9] 'python-nav-backward-block)
     (define-key python-mode-map [kp-6] 'yafolding-toggle-element)
     (define-key python-mode-map [kp-3] 'python-nav-forward-block))
)

(add-hook 'python-mode-hook 'my-python-hook)

 ; python-mode treepad navigation
 ; (define-key org-mode-map [kp-6]    'org-cycle)
 ; <remap> <backward-sentence>     python-nav-backward-block
 ; <remap> <backward-up-list>      python-nav-backward-up-list
 ; <remap> <forward-sentence>      python-nav-forward-block  python-nav-beginning-block

 ; yafolding-go-parent-element

 ; TDB (global-set-key [kp-6]          'yafolding-toggle-element)

(message "-------------- Done: Modes Section")
#+END_SRC

** Ivy/Counsel Mode
#+BEGIN_SRC emacs-lisp

;;(helm-mode 0)
;; swiper
;; (global-set-key "\C-s" 'swiper)
(ivy-mode 1)  ; M-i to insert and modify
(counsel-mode 1)
(define-key ivy-minibuffer-map (kbd "<up>")   'previous-line-or-history-element)
(define-key ivy-minibuffer-map (kbd "<down>") 'next-line-or-history-element)
(define-key counsel-find-file-map (kbd "C-f") 'counsel-find-file-fallback-command)

(defun counsel-find-file-fallback-command ()
  "Fallback to non-counsel version of current command."
  (interactive)
  (when (bound-and-true-p ivy-mode)
    (ivy-mode -1)
    (add-hook 'minibuffer-setup-hook 'counsel-find-file-fallback-command--enable-ivy))
  (ivy-set-action
   (lambda (current-path)
     (let ((old-default-directory default-directory))
       (let ((i (length current-path)))
         (while (> i 0)
           (push (aref current-path (setq i (1- i))) unread-command-events)))
       (let ((default-directory "")) (call-interactively 'find-file))
       (setq default-directory old-default-directory))))
  (ivy-done))

(defun counsel-find-file-fallback-command--enable-ivy ()
  (remove-hook 'minibuffer-setup-hook
               'counsel-find-file-fallback-command--enable-ivy)
  (ivy-mode t))

;;Ivy-based interface to standard commands
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(message "-------------- Done: Ivy/Counsel Done")
#+END_SRC

;;(global-set-key (kbd "C-s") 'swiper-isearch)
;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;(global-set-key (kbd "<f1> l") 'counsel-find-library)
;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;(global-set-key (kbd "<f2> j") 'counsel-set-variable)
;;(global-set-key (kbd "C-c v") 'ivy-push-view)
;;(global-set-key (kbd "C-c V") 'ivy-pop-view)

;;Ivy-based interface to shell and system tools
;;(global-set-key (kbd "C-c c") 'counsel-compile)
;;(global-set-key (kbd "C-c g") 'counsel-git)
;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;;(global-set-key (kbd "C-c L") 'counsel-git-log)
;;(global-set-key (kbd "C-c k") 'counsel-rg)
;;(global-set-key (kbd "C-c m") 'counsel-linux-app)
;;(global-set-key (kbd "C-c n") 'counsel-fzf)
;;(global-set-key (kbd "C-x l") 'counsel-locate)
;;(global-set-key (kbd "C-c J") 'counsel-file-jump)
;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;(global-set-key (kbd "C-c w") 'counsel-wmctrl)

;;Ivy-resume and other commands
;;ivy-resume resumes the last Ivy-based completion.
;;(global-set-key (kbd "C-c C-r") 'ivy-resume)
;;(global-set-key (kbd "C-c b") 'counsel-bookmark)
;;(global-set-key (kbd "C-c d") 'counsel-descbinds)
;;(global-set-key (kbd "C-c g") 'counsel-git)
;;(global-set-key (kbd "C-c o") 'counsel-outline)
;;(global-set-key (kbd "C-c t") 'counsel-load-theme)
;;(global-set-key (kbd "C-c F") 'counsel-org-file)
;;(global-set-key "\C-." 'pop-global-mark)
;;(global-set-key [M-SPC] 'pop-global-mark)
;;(global-set-key [S-right] 'forward-word)
;;(global-set-key [remap eval-expression] 'pp-eval-expression)

** Org Mode
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/myDocs/logbook/notes.org")
(setq org-cycle-include-plain-lists t)
(setq org-startup-folded nil)
(setq org-src-fontify-natively t)
(setq org-list-allow-alphabetical t)
(setq org-file-apps '( ("\\.xlsx\\'"    . w2-browser)
                       ("\\.mm\\'"      . default)
                       ("\\.x?html?\\'" . default)
                       ("\\.pdf\\'"     . default)
                       (directory . emacs)
                       (auto-mode . emacs)
                       ))
(setq org-use-property-inheritance t)
(defun org-collapse()     (interactive) (org-shifttab 0))

;; also in org-table.el (defun org-table-transpose-table-at-point ()
;(defun org-transpose-table-at-point ()
;  "Transpose orgmode table at point, eliminate hlines."
;  (interactive)
;  (let ((contents (apply #'mapcar* #'list                       ;; <== LOB magic imported here
;                         (remove-if-not 'listp (org-table-to-lisp)))))  ;; remove 'hline from listsignals error if not table
;    (delete-region (org-table-begin) (org-table-end))
;    (insert (mapconcat (lambda(x) (concat "| " (mapconcat 'identity x " | " ) "
;  |\n" ))
;                       contents
;                       ""))
;    (org-table-align))
;  )

;; --------- org-mode key bindings
;(define-key global-map "\C-cl" 'org-store-link)
;(define-key global-map "\C-ca" 'org-agenda)
(progn
  (define-key org-mode-map (kbd "C-c C->")  'org-demote-subtree)
  (define-key org-mode-map (kbd "C-c d")    'org-demote-subtree)

  (define-key org-mode-map (kbd "C-c C-<")  'org-promote-subtree)
  (define-key org-mode-map (kbd "C-c p")    'org-promote-subtree)

  (define-key org-mode-map (kbd "<S-up>")   'scroll-one-line-down)
  (define-key org-mode-map (kbd "<S-down>") 'scroll-one-line-up)
  ;(define-key org-mode-map (kbd "<C-up>")   'outline-up-heading)
  ;(define-key org-mode-map (kbd "<C-home>") 'my-org-babel-prev)
  ;(define-key org-mode-map (kbd "<C-end>")  'my-org-babel-next)
  ;(define-key org-mode-map (kbd "C-c u")    'outline-up-heading)

  (define-key org-mode-map (kbd "C-c n")    'my-org-babel-execute-and-next)
  (define-key org-mode-map (kbd "C-c C-t")  'org-transpose-table-at-point)
)
;; needs ox.el = org-exporter.el
;;(require 'ox-confluence)

;;C-c c       (org-capture)          Call the command org-capture. Note that this key binding is global and not active by default: you need to install it. If you have templates defined see Capture templates, it will offer these templates for selection or use a new Org outline node as the default template. It will insert the template into the target file and switch to an indirect buffer narrowed to this new node. You may then insert the information you want.
;;C-c C-c     (org-capture-finalize) Once you have finished entering information into the capture buffer, C-c C-c will return you to the window configuration before the capture process, so that you can resume your work without further distraction. When called with a prefix arg, finalize and then jump to the captured item.
;;C-c C-w     (org-capture-refile)   Finalize the capture process by refiling (see Refile and copy) the note to a different place. Please realize that this is a normal refiling command that will be executed—so the cursor position at the moment you run this command is important. If you have inserted a tree with a parent and children, first move the cursor back to the parent. Any prefix argument given to this command will be passed on to the org-refile command.
;;C-c C-k     (org-capture-kill)     Abort the capture process and return to the previous state.
;;You can also call org-capture in a special way from the agenda, using the k c key combination. With this access, any timestamps inserted by the selected capture template will default to the cursor date in the agenda, rather than to the current date.
;;To find the locations of the last stored capture, use org-capture with prefix commands:
;;C-u C-c c                          Visit the target location of a capture template. You get to select the template in the usual way.
;;C-u C-u C-c c                      Visit the last stored capture item in its buffer.

;; You can also jump to the bookmark org-capture-last-stored, which
;; will automatically be created unless you set org-capture-bookmark
;; to nil.
;; To insert the capture at point in an Org buffer, call org-capture
;; with a C-0 prefix argument.
;;

(defun org-table-to-sql ()
  (interactive)
  (goto-char (point-min))
  (forward-line 2)
  (beginning-of-line)
  (push-mark)
  (goto-char (mark-marker)) (replace-regexp "^|"           "("      ) ;; replace leading  | with (
  (goto-char (mark-marker)) (replace-regexp "|$"         t     )      ;; replace trailing |/LOCAL/USR/MK with ),
  (goto-char (mark-marker)) (replace-regexp "|$"           "),"     ) ;; replace trailing | with ),
  (goto-char (mark-marker)) (replace-regexp "\|"           ","      ) ;; replace          | with ,
  (goto-char (mark-marker)) (replace-regexp "[0-9a-z._-]+" "'\\&'"  ) ;; wrap single quotes around words
  (goto-char (mark-marker)) (replace-regexp ",[ \t]+,"     ",NULL," ) ;; NULL in gaps
  (goto-char (mark-marker)) (replace-regexp ",[ \t]+,"     ",NULL," ) ;; NULL in gaps  need to run twice!!!
  (goto-char (mark-marker)) (replace-regexp ",[ \t]+)"     ",NULL)" ) ;; NULL at end
  (goto-char (point-max)) (search-backward ",") (delete-char 1)       ;; delete comma after list end
  (goto-char (point-min))
  (forward-line 2)
  (insert "INSERT INTO [EQTYBASKETS_R].dbo.returnSeriesRecord")
  (newline)
  (insert "(rsStrategyName, rsOrigin, rsCurrency, rsType, Description, rsAsOfDate, rsShortCode)")
  (newline)
  (insert "VALUES")
  (newline)
  )

;;------------------------------------- org-mode crypt
(defun rot-region(p1 p2)
  (interactive "r")
   (org-mark-subtree)
  (save-restriction (org-mark-subtree) (rot13-region (point) (mark)))
)

(defun rot-region_orig(p1 p2)
  (interactive "r")
  (save-restriction (narrow-to-region p1 p2) (rot13-region (point-min) (point-max)))
)

;; --------------------------------------------------------------------- org-mode
(defun org-save-code-block(p1 p2)
  (interactive "r")
  ;; for use with es.m
  ;; and put in top matlab IDE buffer
  (let
      ((info (org-babel-get-src-block-info 'light)))
   (when (equal (nth 0 info) "matlab") (write-region (cadr info) nil "//lon0302/dfs/DATA/MULTI_ASSET/MAQS/dataCollection/FI/LOCAL/USR/MK/vc/maqsMk/init/aaa_org_cmd.m"))
   (when (equal (nth 0 info) "sql")    (write-region (cadr info) nil "//lon0302/dfs/DATA/MULTI_ASSET/MAQS/dataCollection/FI/LOCAL/USR/MK/vc/rs1/SSI.scratch/notebooks/SQL_QUERY_CMD.sql")))
)

;; org-mode hooks
(add-hook 'org-mode-hook  'hide-ctrl-M)
(message "-------------- Done: Org Mode")
#+END_SRC
*** notes
;; ------------------------------------------------------ Org-Mode
;; ;(define-key global-map "\C-cl" 'org-store-link)
;; ;(define-key global-map "\C-ca" 'org-agenda)
;; (defalias 'make-org-tbl  (kbd "ESC x org-mode RET ESC < C-SPC ESC > C-c |"))
;; (setq org-default-notes-file "~/myDocs/logbook/notes.org")
;; (setq org-cycle-include-plain-lists t);; (setq org-startup-folded nil)
;; (defalias 'see-logbooks  (kbd "C-x C-f ~/myDocs/logbook RET"))
;; (defun org-collapse()     (interactive) (org-shifttab 0))
;;

*** faded
;---------------------------------------- expand and collapse
(defun org-advance ()
  (interactive)
  (when (buffer-narrowed-p)
  (beginning-of-buffer)
  (widen)
  (org-forward-heading-same-level 1))
  (org-narrow-to-subtree)
  )

(defun org-retreat ()
  (interactive)
  (when (buffer-narrowed-p)
    (beginning-of-buffer)
    (widen)
    (org-backward-heading-same-level 1))
    (org-narrow-to-subtree)
    )

--------------;--------------------------------------------------------------------- org-confluence
; needs ox.el = org-exporter.el
(require 'ox-confluence)
(require 'org-exp)
(require 'org-export)
(require 'org-confluence)

;----------------------------------------------------------------------------------- org-trello
;; NO: (add-to-list 'load-path "L:/MyDocs/ulib/emacs/org-trello-master/")
;;its here: /home/kleynmi/l_C/cygwin64/home/kleynmi/.emacs.d/elpa/org-trello-0.8.1/org-trello.el:

(require 'org-trello)
;; load trello-key.el
(add-to-list 'auto-mode-alist '("\\.trello$" . org-mode)) ;; org-trello major mode for all .trello files
(add-hook 'org-mode-hook                                  ;; add a hook function to check if this is trello file
          (lambda ()                                      ;; then activate the org-trello minor mode.
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
              (org-trello-mode)))))

(org-trello-install-key-and-token)
(org-trello-install-board-metadata)
(org-trello-update-board-metadata)
(org-trello-sync-buffer t) ; sync of the entire buffer FROM trello.

(setq board-name (read-from-minibuffer "Trello Board: ")

(defun mk-init-keys-trello ()         ; read keys an register them via org-trello function
   (load "~/.emacs.d/trello-key.el")
   (orgtrello-controller--do-install-config-file my-trello-id my-trello-consumer-key my-trello-access-token 'do-ask-for-overwrite)
)

(defun mk-refresh-from-trello ()   ; sync the entire buffer FROM trello.
   (interactive)
   ;; (switch-to-buffer board-name)
   ;; (buffer-mode "org-mode")
   (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
   (org-trello-sync-buffer t)    (message "org-trello-sync-buffer done");; t=> FROM TRELLO -TO-> FILE

)

(defun mk-get-from-trello ()   ; prompt for a board, then sync the buffer FROM trello.
   (interactive)
   (org-trello-install-board-metadata) (message "org-trello-install-board-metadata done") ;; only for a new board, prompts for board
   (org-trello-update-board-metadata)  (message "org-trello-update-board-metadata done")
   (org-trello-sync-buffer t)          (message "org-trello-sync-buffer done")  ;; t=> FROM TRELLO -TO-> FILE
)

;; (orgtrello-controller-do-sync-buffer-from-trello)
;; org-trello-install-key-and-token
;; (org-trello-update-board-metadata)
;; (Org-trello-sync-buffer t)

;;(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
;; (progn
;;   (require 'org)
;;   (require 'org-trello-utils)
;;   (require 'org-trello-log)
;;   (require 'org-trello-hash)
;;   (require 'dash)
;;   (require 'org-trello))

*** Org-Babel

#+BEGIN_SRC emacs-lisp
 ;(org-babel-do-load-languages
 ; 'org-babel-load-languages
 ; '((python . t)))

(org-babel-do-load-languages 'org-babel-load-languages '((shell . t)
                                                          (matlab . t)
                                                          (python . t)
                                                          (emacs-lisp . t)
                                                          (latex . t)
                                                          (dot . t)
                                                          (calc .t)
                                                          (jupyter . t)))   ; !!!!!!!! must be last !!! must be last !!!! for jupyter-python!!!!!!
 ;; (ipython . t)
 ;; (ein . t)

 (defun my-org-babel-execute-and-next ()
    (interactive)
    (org-babel-execute-src-block)
    (org-babel-next-src-block)
    (recenter-top-bottom 50)
 )

 (message "-------------- Done: Org-Mode Section")
#+END_SRC

#+RESULTS:
: -------------- Done: Org-Mode Section

 ;;(require 'org-crypt)
 ;;(org-crypt-use-before-save-magic)
 ;;(setq org-tags-exclude-from-inheritance (quote ("crypt")))
 ;;(setq org-crypt-key nil)
 ;;
 ;;(defun crypt-region (p1 p2)
 ;;  "replace region with crypted"
 ;;  (interactive "r")
 ;;  (save-restriction
 ;;    (narrow-to-region p1 p2)
 ;;    (goto-char (point-min))
 ;;    (while (re-search-forward REGEXP nil t)
 ;;      (replace-match TO-STRING nil nil))
 ;;    )
 ;;  )

 ;; active Babel languages
 ;(org-babel-do-load-languages
 ; 'org-babel-load-languages
 ; '((R . t)
 ;   (emacs-lisp . nil)
 ;   ))

** Latex Mode
;; (setq exec-path (append exec-path '("/usr/texbin"))) ; not needed

;Org Mode can generate Portable Network Graphics (png) bitmaps from L
;If you plan to edit LaTeX source code blocks separately, with C-c ', or want to control the size of pdf snippets,

;then it is highly recommended that AucTeX be installed, as well.
; AucTeX is an extensible package for writing and formatting TeX
; files. Assuming that AucTeX is installed properly, the following line
;in .emacs will ensure that AucTeX is loaded.
;(load "auctex.el" nil t t)

;;Also highly recommended is RefTeX, a cross-reference, bibliography, glossary, and index manager initially written by the creator of Org Mode, Carsten Dominik. Add the following line to .emacs:
;;(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

** Dired Mode

(require 'dired-rainbow)

(defconst dired-audio-files-extensions  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")  "Dired Audio files extensions")
(dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

(defconst dired-video-files-extensions
    '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
      "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
    "Dired Video files extensions")
(dired-rainbow-define video "#B3CCFF" dired-video-files-extensions)
#+BEGIN_SRC emacs-lisp

;;(setq dired-use-ls-dired nil)
(setq dired-dwim-target t)


;; dired-listing-switches  = "-al"
;; M-x customize-variable RET dired-listing-switches RET
;; Dired Listing Switches: Hide Value -ahl --time-style=long-iso
;;  State: SET for current session only.
(setq dired-listing-switches "-aoht --time-style=long-iso --group-directories-first") ;; list most recent first (setq dired-listing-switches "-aBhl  ")
;; (setq dired-omit-files "^\\..*$")

;;(use-package dired-x :config
;;  (progn
;;    (setq dired-omit-verbose nil)
;;    (add-hook 'dired-mode-hook #'dired-omit-mode)
;;    (setq dired-omit-files (concat dired-omit-files "\\|^.DS_STORE$\\|^.projectile$"))))

;;(org-babel-load-file "~/.emacs.d/dotEmacs.org")
;;(org-babel-load-file (expand-file-name "~/.emacs.d/dotEmacs.org"))

;; This isn't nearly as drastic as what you're looking for, but it is possible to customize how Emacs calls ls in dired-mode.
;; I used it to omit the group ID of files with the -o option, saving some horizontal screen real estate.

(defun my-dired-load-hook ()
    (autoload 'wdired-change-to-wdired-mode "wdired")
    (setq dired-no-confirm '(revert-subdirs)))
    ;; Set dired-x global variables here.  For example:
    ;; (setq dired-guess-shell-gnutar "gtar")
    ;; (setq dired-x-hands-off-my-keys nil)
    ;; (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$") ; <- from inside emacs?
    ;; (setq dired-omit-files "^#\\|^\\.$|\\.\\.$")
    ;; (setq dired-omit-files "^\\|^\\..*$")
    ;; (setq dired-omit-files "^\\..*$")
    ; ;(setq dired-omit-extensions '(".asv" "~" ".o" ".pyc" ".class"))
(add-hook 'dired-load-hook 'my-dired-load-hook)

(defun my-dired-mode-hook ()
    ;; Set dired-x buffer-local variables here.  For example:
    (dired-omit-mode 1)
    (setq dired-omit-verbose nil)
    (setq dired-omit-files-p t)
    (setq dired-omit-files "^\\..*$")
    (setq dired-omit-extensions '(".asv" "~" ".o" ".pyc" ".class"))
    (toggle-truncate-lines 1)
    (setq dired-no-confirm '(revert-subdirs)))

(add-hook 'dired-mode-hook 'my-dired-mode-hook)             ;(setq dired-mode-hook nil)

(defadvice dired-sort-toggle-or-edit (after dired-sort-to-top activate)
   "Move to beginning of buffer (instead of keeping point on the current file)."
   (goto-char (point-min))
   (forward-line 3))

(defun dired-find-file-drop-prev-dired-buffer (&optional arg)
  (interactive)
  (setq oldBuff (buffer-name))  ;; returns current buffer
  (dired-find-file)
  (setq newBuff (buffer-name))  ;; returns current buffer  ;;(switch-to-prev-buffer)
  (kill-buffer oldBuff)
  (message (format "dired switched DOWN from %s to %s" oldBuff newBuff))
)

(defun dired-up-directory-drop-prev-dired-buffer (&optional arg)
  (interactive)
  (setq oldBuff (buffer-name))  ;; returns current buffer
  (dired-up-directory)
  (setq newBuff (buffer-name))  ;; returns current buffer  ;; (switch-to-prev-buffer)
  (kill-buffer oldBuff)
  (message (format "dired switched UP from %s -> %s"  oldBuff newBuff))
)

(defun dired-ediff-git (&optional arg)
  (interactive)
  (setq ffn (dired-get-filename))
  (setq fn  (dired-get-filename "no-dir"))
  (setq-default fill-column     200)
  (ediff-revision fn)
  ;;(dired-rename-file ffn (concat "//lon0302/dfs/DATA/MULTI_ASSET/MAQS/dataCollection/FI/LOCAL/ARCHIVE/OLD/" fn))
  ;; dired-rename-file (file newname ok-if-already-exists)
  )

(defun dired-move-to-old (&optional arg)
  (interactive)
  (setq curDrdBuff (current-buffer))
  (setq ffn (dired-get-filename))
  (setq fn  (dired-get-filename "no-dir"))
  (switch-to-buffer "*Scratch*")
  (insert "hello dired-move-to-old") (newline)
  (insert ffn)  (newline)
  (insert fn)   (newline)
  (insert "bye dired-move-to-old")  (newline)
  (rename-file ffn (concat "~/tmp/" fn))
  (switch-to-buffer curDrdBuff)
  (revert-buffer)
  ;;(dired-rename-file ffn (concat "//lon0302/dfs/DATA/MULTI_ASSET/MAQS/dataCollection/FI/LOCAL/ARCHIVE/OLD/" fn))
  ;;dired-rename-file (file newname ok-if-already-exists)
  )

(defun dired-cd-eshell (&optional arg)
  "Move down one line and view the current file in another window."
  (interactive)
  (setq ffn (dired-get-filename))
  (message (concat "ffn" ffn))
  (switch-to-buffer "*eshell*")
  (goto-char (point-max))
  (insert (concat "cd " (file-name-directory ffn) "; ll" ))
  )

(defun dired-paste-to-yank-buffer (&optional arg)
  "Move down one line and view the current file in another window."
  (interactive)
  (setq ffn (dired-get-filename))
  (message ffn)
  (kill-append (dired-get-filename) nil)
  )

;;------------------------------------ dired peek at file contents
(defun dired-view-next ()
  "Move down one line and view the current file in another window."
  (interactive)
  (dired-next-line 1)
  (dired-view-current)
  ;(other-window 1)
  ;(switch-to-buffer (previous-buffer))
  )

(defun dired-view-previous ()
  "Move up one line and view the current file in another window."
  (interactive)
  (dired-previous-line 1)
  (dired-view-current)
  ;(other-window 1)
  ;(switch-to-buffer (previous-buffer))
  )

(defun dired-view-current ()
  "View the current file in another window (possibly newly created)."
  (interactive)
  (if (not (window-parent))
      (split-window nil nil t))                         ; create a new window -right side if necessary
  (let ((file (dired-get-file-for-visit))
        (dbuffer (current-buffer)))
    (other-window 1)                                    ; switch to the other window
    (unless (equal dbuffer (current-buffer))            ; don't kill the dired buffer
      (if (or view-mode (equal major-mode 'dired-mode)) ; only if in view- or dired-mode
          (kill-buffer)))                               ; ... kill it
    (let ((filebuffer (get-file-buffer file)))
      (if filebuffer                                    ; does a buffer already look at the file
          (switch-to-buffer filebuffer)                 ; simply switch
        (view-file file))                               ; ... view it
      (other-window -1)
      (get-file-buffer file)))                         ; give the attention back to the dired buffer
   )

;; ensure "." and ".." are skipped
(defvar subdired-listing-switches "-oht --time-style=long-iso --group-directories-first"  "omit -a relative to dired-listing-switches")
; redefine dired-subtree--readin with subdired-listing-switches
(defun dired-subtree--readin (dir-name)
  "Read in the directory.
   Return a string suitable for insertion in `dired' buffer."
  (with-temp-buffer
    (insert-directory dir-name subdired-listing-switches nil t)
    (delete-char -1)
    (goto-char (point-min))
    (kill-line 1)
    (insert "  ")
    (while (= (forward-line) 0)
      (insert "  "))
    (delete-char -2)
    (buffer-string))
  )

(progn
  (define-key dired-mode-map "J"               'dired-move-to-old) ; junk
  (define-key dired-mode-map "O"               'ergoemacs-open-in-external-app)  ;; '(lambda () (interactive) (w32-browser (dired-replace-in-string "/" "\\" (dired-get-filename)))))
  (define-key dired-mode-map (kbd "r")         'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "t")         'dired-omit-mode)
  (define-key dired-mode-map (kbd "c")         'dired-ediff-git)      ;; compare to last version with ediff
  (define-key dired-mode-map (kbd "e")         'dired-cd-eshell)      ;; was dired-subtree-only-this-file
  (define-key dired-mode-map (kbd "p")         'dired-paste-to-yank-buffer)
  (define-key dired-mode-map [M-down]          'dired-view-next)      ;; was dired-previous-line
  (define-key dired-mode-map [M-up]            'dired-view-previous)  ;; was dired-next-line
)

(defvar dired-subtree-last-previewed-buffer nil  "record which previous preview buffer to delete")
(make-variable-buffer-local 'dired-subtree-last-previewed-buffer)


;;--------------------------------- ----------------------------- sidebar
(defun sidebar-toggle ()  ; tbd install ibuffer sidebar  ; not longr used?
  "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
  (interactive)
  (dired-sidebar-toggle-sidebar)
  (ibuffer-sidebar-toggle-sidebar))

(defun dired-sidebar-cmd (dirname)  ;; TBD opne in *current* window?
  (interactive "D")
  (let ((dired-buffer (dired-sidebar-get-or-create-buffer dirname)))
    (dired-sidebar-show-sidebar dired-buffer)
    (pop-to-buffer dired-buffer)
    (setq window-size-fixed nil))
)
; (dired-sidebar-toggle dirname)


;;--------------------------------- ----------------------------- Tramp
;;(setq tramp-default-method "ssh")
(setq tramp-verbose 10)
;; /adb::/path/to/file.

(message "-------------- Done: Dired Section")
#+END_SRC

*** Dired/subtree funs

 (dired-utils-is-dir-p)
 (dired-utils-is-file-p)
 (dired-view-current)     ; was dired-display-file
 (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
 (define-key dired-mode-map (kbd "K") 'dired-k)
 (define-key dired-mode-map (kbd "p")  'dired-subtree-only-this-file)
       tbd: pick-off the path of the given file into clipboard
       of emacs.  It is adviced to place bindings for these into a
       convenient prefix key map, for example `C-,`

  dired-subtree-remove
  dired-subtree-revert
  dired-subtree-narrow
  dired-subtree-up
  dired-subtree-down
  dired-subtree-previous-sibling
  dired-subtree-beginning
  dired-subtree-end
  dired-subtree-mark-subtree
  dired-subtree-unmark-subtree
  dired-subtree-only-this-file
  dired-subtree-only-this-directory

 ;(add-hook 'ediff-mode-hook (lambda () (setq ediff-shell "C:/cygwin/bin/mintty.exe")))
 ;(add-hook 'ediff-load-hook (lambda () (setq ediff-shell "C:/cygwin/bin/mintty.exe")))

*** Dired Notes
 ;;(defalias 'dired-up (kbd "ESC < C-e C-r / NUL C-a ESC w C-x d C-a C-y C-k C-a ESC \\ C-e RET C-x b RET C-x k RET"))
 ;;(defalias 'dired-go-subdir-kbm (kbd "f C-x b RET C-x k RET"))
 ;; (define-key dired-mode-map [right] 'dired-go-subdir-kbm)

 ;;(defun w32-browser (doc) (w32-shell-execute 1 doc))
 ;;(eval-after-load "dired" '(define-key dired-mode-map [f3] (lambda ()
 ;;                                                             (interactive)
 ;;                                                             (w32-browser (dired-replace-in-string "/" "\\" (dired-replace-in-string "/cygdrive/C/" "C:\\" (dired-get-filename)))))))

 ;; (add-hook 'dired-mode-hook
 ;;           (lambda ()
 ;;             (setq-local ace-jump-search-filter
 ;;                         (lambda ()
 ;;                           (get-text-property (point) 'dired-filename)))))

 ;; when sorting in dired mode, move cursor back to top

*** Tramp Notes
 ;; ----------------------------- Tramp
 (require 'tramp)
 ;;(setq tramp-default-method "ssh")
 (setq tramp-verbose 20)
 (setq tramp-remote-path '("/data/data/com.termux/files/usr/bin" "/data/data/com.termux/files/usr/bin/applets"))
 (add-to-list 'tramp-connection-properties (list (regexp-quote "192.168.1.161") "remote-shell" "sh"))
 ;(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
 (add-to-list 'tramp-remote-path "/system/xbin")
 (add-to-list 'tramp-remote-process-environment "TMPDIR=$HOME")
 (add-to-list 'tramp-connection-properties (list (regexp-quote "android") "remote-shell" "sh"))

 ;; 5.17 Android shell setup hints
 ;; Tramp uses the adb method to access Android devices. Android devices provide a restricted shell access through an USB connection. The local host must have the adb program installed.
 ;; Usually, it is sufficient to open the file /adb::/. Then you can navigate in the filesystem via dired.
 ;; Alternatively, applications such as Termux or SSHDroid that run sshd process on the Android device can accept any ssh-based methods provided these settings are adjusted:
 ;;     sh must be specified for remote shell since Android devices do not provide /bin/sh. sh will then invoke whatever shell is installed on the device with this setting:
 ;;        (add-to-list 'tramp-connection-properties (list (regexp-quote "192.168.0.26") "remote-shell" "sh"))
 ;;     where ‘192.168.0.26’ is the Android device's IP address. (see Predefined connection information).
 ;;     Tramp requires preserving PATH environment variable from user settings. Android devices prefer /system/xbin path over /system/bin. Both of these are set as follows:
 ;;        (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
 ;;        (add-to-list 'tramp-remote-path "/system/xbin")
 ;;     When the Android device is not ‘rooted’, specify a writable directory for temporary files:
 ;;        (add-to-list 'tramp-remote-process-environment "TMPDIR=$HOME")
 ;;     Open a remote connection with the command C-x C-f /ssh:192.168.0.26#2222: <RET>, where sshd is listening on port ‘2222’.
 ;;     To add a corresponding entry to the ~/.ssh/config file (recommended), use this:
 ;;               Host android
 ;;                    HostName 192.168.0.26
 ;;                    User root
 ;;                    Port 2222
 ;;     To use the host name ‘android’ instead of the IP address shown in the previous example, fix the connection properties as follows:
 ;;     (add-to-list 'tramp-connection-properties (list (regexp-quote "android") "remote-shell" "sh"))
 ;; Open a remote connection with a more concise command C-x C-f /ssh:android: <RET>.

*** faded
 ;; if it's a folder=>insert subdir  & move to first; elseif it's a file = >preview-in-other window and move to next, if it's previewed,....
 (defun my-subdired-dfs ()
   (interactive)
   (dired-subtree--is-expanded-p)
   (dired-utils-is-dir-p)
   (dired-utils-is-file-p)
   (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
     (if (eq sDpth 0)
         (if (dired-utils-is-dir-p)
             (dired-subtree-insert))
         (dired-subtree-remove))))

 (defun my-subdired-dfs ()
   (interactive)
   (dired-utils-is-dir-p)
   (dired-utils-is-file-p)
   (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
         (if (dired-utils-is-dir-p)
             (if (dired-subtree--is-expanded-p)
                 (dired-subtree-remove)
                 (dired-subtree-insert)))))
 (define-key dired-mode-map [left]            'dired-up) ;; dired-up-directory
 (define-key dired-mode-map [left]            'dired-up-directory)
 (define-key dired-mode-map [right]           'dired-go-subdir-kbm)
 (define-key dired-mode-map (kbd "<S-down>")  'dired-subtree-next-sibling)
 (define-key dired-mode-map (kbd "<S-left>")  'dired-subtree-remove)
 (define-key dired-mode-map (kbd "<S-right>") 'dired-subtree-insert)
 (define-key dired-mode-map (kbd "<S-up>")    'dired-subtree-previous-sibling)
 (define-key dired-mode-map [right]           'dired-find-file-drop-prev-dired-buffer)
 (define-key dired-mode-map [left]            'dired-up-directory-drop-prev-dired-buffer)
 (define-key dired-mode-map (kbd "C-n")       'dired-next-line)
 (define-key dired-mode-map (kbd "C-p")       'dired-previous-line)

** Markup Languages Modes
 #+BEGIN_SRC emacs-lisp
 ;;------------------------------------------------------------------------------ XML
 ;;{{{ XML

 ;; loading script
 ;; (load (concat emacs-dir "nxml-mode/rng-auto.el"))
 ;; (when (locate-library "nxml-mode")
 ;;   (progn
 ;;     ;; file types
 ;;     (add-to-list 'auto-mode-alist
 ;;               (cons (concat "\\." (regexp-opt '("xml"
 ;;                                                 "html"
 ;;                                                 "xul"
 ;;                                                 "xsd"
 ;;                                                 "sch"
 ;;                                                 "rng"
 ;;                                                 "xslt"
 ;;                                                 "svg"
 ;;                                                 "rss"
 ;;                                                 "asp"
 ;;                                                 "aspx"
 ;;                                                 "zpt"
 ;;                                                 "cpt"
 ;;                                                 "pt") t) "\\'")
 ;;                     'nxml-mode))
 ;;     ;; spaces insted of tabs
 ;;     (add-hook 'nxml-mode-hook
 ;;            (lambda () (setq indent-tabs-mode nil)))
 ;;    ))

 ;;}}}
 ;;--------------------------------------------------------------------------------nXML mode
 ;(add-to-list 'hs-special-modes-alist
 ;             '(sgml-mode
 ;               "<!--\\|<[^/>]*[^/]>"                    ;; regexp for start block
 ;               "-->\\|</[^/>]*[^/]>"                    ;; regexp for end block
 ;
 ;               "<!--"                                   ;; regexp for comment start. (need this??)
 ;               sgml-skip-tag-forward
 ;               nil))
 ; I tried using outline mode to fold blocks, as someone posted earlier,
 ; but had no luck with it. Here's something quick and (very) dirty that
 ; I whipped together using hideshow mode:

 ; (defun my-nxml-mode-hook ()
 ; "Functions to run when in nxml mode."
 ; (setq nxml-sexp-element-flag t)
 ; (hs-minor-mode 1))

 ; (add-hook 'nxml-mode-hook 'my-nxml-mode-hook)

 ; (eval-after-load "hideshow.el"
 ; (let ((nxml-mode-hs-info '(nxml-mode ("^\\s-*\\(<[^/].*>\\)\\s-*$" 1) "^\\s-*</.*>\\s-*$")))
 ; (when (not (member nxml-mode-hs-info hs-special-modes-alist))
 ; (setq hs-special-modes-alist
 ; (cons nxml-mode-hs-info hs-special-modes-alist)))))

 ; If anyone comes up with a better set of regexps, please post them!

 ;;---------------------------------------------------------------- ido Mode
 ;; TBD
 ;; (load-library "ido")
 ;; (setq ido-enable-flex-matching t)
 ;; (setq ido-everywhere t)
 ;; (ido-mode 1)
 ;; (ido-mode t)
 ;; (ido-mode nil)
 ;; (windmove-default-keybindings 'shift)
 ;; (require 'ido)
 ;; (define-key ido-file-completion-map [up]   'ido-prev-work-directory)
 ;; (define-key ido-file-completion-map [down] 'ido-next-work-directory)
 ;; (setq ido-auto-merge-work-directories-length -1)

 ;;---------------------------------------------------------------  Bing
 ;; bing!
 ;     "http://www.bing.com/search?q="
 ;; (defun goog ()
 ;;   (interactive)
 ;;   (browse-url (concat "http://www.google.com/search?hl=en&q=" (if mark-active
 ;;                                                                       (buffer-substring (region-beginning) (region-end))
 ;;                                                                     (read-string "Goog: ")))))

 ;;------------------------------------------------------------- white space
 ;; (setq show-trailing-whitespace 1)
 ;;(setq show-trailing-whitespace t) local buffer only
 (defun tog-whitespace ()
   "Toggle show-trailing-whitespace between t and nil"
   (interactive)
   (setq show-trailing-whitespace (not show-trailing-whitespace)))
 ;; C-c w        delete-trailing-whitespace
 ;;GNU Emacs 22 or later has library whitespace.el, which lets you highlight whitespace in several ways. See WhiteSpace.
 ;;--------------------------------------------------------------- ZeeTree
 ;;(add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
 ;;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
 ;;(require 'ztree-diff)
 ;;(require 'ztree-dir)
 ;;local binf to tab (ztree-perform-action)
 ;;Call the ztree-diff interactive function: M-x ztree-diff

 ;; ;; needs ox.el = org-exporter.el
 ;; ;;(require 'ox-confluence)
 ;;
 ;; (require 'cl)
 ;;
 (message "-------------- Done: Markup Languages Section")
 #+END_SRC

 ;-------------------------------------------------------------------------------- NeoTree
 (add-to-list 'load-path "/home/uri03204/ulib/emacs/neotree")
 (require 'neotree)
 (global-set-key [f3] 'neotree-show)
 ;-------------------------------------------------------------------------------- Ace jump
 ;;
 ;; ace jump mode major function
 ;;
 ;;(add-to-list 'load-path "/full/path/where/ace-jump-mode.el/in/")
 (autoload
   'ace-jump-mode
   "ace-jump-mode"
   "Emacs quick move minor mode"
   t)
 ;; you can select the key you prefer to
 ;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

 ;; ;;
 ;; ;; enable a more powerful jump back function from ace jump mode
 ;; ;;
 ;; (autoload
 ;;   'ace-jump-mode-pop-mark
 ;;   "ace-jump-mode"
 ;;   "Ace jump back:-)"
 ;;   t)
 ;; (eval-after-load "ace-jump-mode"
 ;;   '(ace-jump-mode-enable-mark-sync))
 ;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

 ;-------------------------------------------------------------------------------- ZeeTree
 (add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
  ;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
  (require 'ztree-diff)
  (require 'ztree-dir)
  ;local binf to tab (ztree-perform-action)
  ;Call the ztree-diff interactive function: M-x ztree-diff


 ;;-------------------------------------------------------------------------------- ztree
 (setq load-path (append load-path '("/home/uri03204/ulib/emacs/ztree-master"))) ;; (insert (format "%s" load-path))
 (require 'ztree-diff)
 (require 'ztree-dir)


* Hooks
for python -made named function so remove-hook can be used
for flushing messages to *Message* buffer
#+BEGIN_SRC emacs-lisp

(defun message-buffer-goto-end-of-buffer (&rest args)
  (let* ((win (get-buffer-window "*Messages*"))
         (buf (and win (window-buffer win))))
    (and win (not (equal (current-buffer) buf))
         (set-window-point
          win (with-current-buffer buf (point-max))))))

(advice-add 'message :after 'message-buffer-goto-end-of-buffer)

(defun py-clean-file()
  (if (and (equal major-mode 'python-mode) (not indent-tabs-mode))
      (delete-trailing-whitespace (point-min) (point-max))))
;       (untabify (point-min) (point-max)))
(add-hook 'write-file-hooks 'py-clean-file)

#+END_SRC
* Key Bindings
** notes: may be useful
 M-0 w                       ;; dired copy path
 C-x C-v                     ;; find alternate file   -> then grab filepath
 /                           ;; self-insert-command
 :                           ;; self-insert-command
 ??                          ;; package-list-packages
 C-;                         ;; Highlight item for MULTIPLE edit
 C-a                         ;; move-beginning-of-line
 C-b                         ;; backward-char
 C-c C-b                     ;; associate ielm with buffer
 C-ci                        ;; indent-to-column
 C-h C-a                     ;; about-emacs
 C-h f                       ;; describe-function
 C-h F                       ;; Info-goto-emacs-command-node
 C-h w                       ;; command where-is (found in global-map) (where-is DEFINITION &optional INSERT)
 C-j                         ;; eval in scratch buffer ?
 C-k                         ;; kill-line
 C-q                         ;; unfill-paragraph
 C-s                         ;; isearch-forward
 C-x C-f                     ;; find-file
 C-u C-space or C-u C-@      ;; move back to previous positions (within buffer)
 C-x C-space or C-x C-@      ;; move back to previous positions (between buffers)
 C-x C-x                     ;; exchange-point-and-mark
 C-x RTN f unix RTN          ;; dos2unix
 C-x n n;                    ;; To REGION - Narrow
 C-x n w                     ;; To Region - Widen
 C-x r s r                   ;; Register "r" Copy region into  (copy-to-register).
 C-x r i r                   ;; Register "r" Insert text from  (insert-register).
 C-x r w w                   ;; Save winows config in register "w"
 C-x r j w                   ;; jump back (where <register> is a single character) to jump back to it.
 C-x M-:                     ;; like M-: but with the elisp expression already filled in for youo
 C-y                         ;; yank
 DEL                         ;; delete-backward-char
 ESC                         ;; ESC-prefix
 M-6 M-x                     ;; Buffer-menu-sort = sort by file name
 M-s h f                     ;; hi-lock-find-patterns           Searches for Hi-Lock patterns in the buffer to use.
 M-s h l                     ;; highlight-lines-matching-regexp Highlights all lines matching a regular expression
 M-s h p                     ;; highlight-phrase                Highlights everything matching a phrase
 M-s h r                     ;; highlight-regexp                Highlights everything matching a regular expression
 M-s h u                     ;; unhighlight-regexp              Deletes the highlighter under point
 M-s h w                     ;; hi-lock-write-interactive-patterns Inserts a list of Hi-Lock patterns into the buffer
 RET                         ;; newline
 w                           ;; self-insert-command
 command C-x z, then z again ;; repear last
 complex command C-x ESC ESC ;; repeat last

** Mousing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-x")         '(lambda () (interactive) (progn (set-mark-command 0))))   ; Super = windowframe key is  mod 4 see xmodmap cycle-buffer
(global-set-key (kbd "<S-mouse-4>") 'cycle-buffer)
(global-set-key (kbd "<S-mouse-5>") 'cycle-buffer-backward)

(global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
(global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)

(global-set-key (kbd "<M-mouse-4>") 'selective-display-level-incr)
(global-set-key (kbd "<M-mouse-5>") 'selective-display-level-decr)
(message "-------------- Done: Mousing")
#+END_SRC

** Global Keys
#+BEGIN_SRC emacs-lisp
; 20211215_15:09:19 ordered by order on QWERTY keyboard
;;  (global-set-key "\C-q"          'quoted-insert)  ; for resetting, already default

; C-c
; qwerty 1st row
(global-set-key (kbd "C-<tab>") 'yafolding-toggle-element)
(global-set-key (kbd "C-c q")   'lines-to-cslist)           ;; 'quick-calc
(global-set-key (kbd "C-c w")   'delete-trailing-whitespace)
(global-set-key (kbd "C-c r")   'auto-revert-tail-mode)
(global-set-key (kbd "C-c t")   'toggle-truncate-lines)
(global-set-key (kbd "C-c C-t") 'org-table-convert-region)
(global-set-key (kbd "C-c i")   'indent-to-column)
; qwerty 2nd row
(global-set-key (kbd "C-c s")   'parallel-swap)
(global-set-key (kbd "C-c d")   'ediff-directories)
(global-set-key (kbd "C-c j")   'go-to-column)              ;; "jump"
(global-set-key (kbd "C-c l")   'ed-dup-line)
(global-set-key (kbd "C-c ;")   'comment-or-uncomment-region)
; qwerty 3rd row
(global-set-key (kbd "C-c b")   'ediff-buffers)
(global-set-key (kbd "C-c C-b") 'compare-windows)
(global-set-key (kbd "C-c <")   'selective-display-level-decr)
(global-set-key (kbd "C-c >")   'selective-display-level-incr)

; C-x
; qwerty 0th row
(global-set-key (kbd "C-x 3")   '(lambda () (interactive) (split-window-right) (other-window 1))) ;; was switch-to-buffer
; qwerty 1st row
(global-set-key (kbd "C-x e")   'eval-last-sexp)
(global-set-key (kbd "C-x t")   'instimestamp)
(global-set-key (kbd "C-x y")   'insertTreeCalcSexp)
(global-set-key (kbd "C-x i")   'my-insert-last-sexp) ; ielm
(global-set-key (kbd "C-x p")   'my-transpose-sexps)
; qwerty 2nd row
(global-set-key (kbd "C-x d")   'dired)
(global-set-key (kbd "C-x f")   'find-function) ;; set-fill-column other-frame view-buffer-other-frame switch-to-buffer-other-frame
(global-set-key (kbd "C-x G")   'vc-ediff)
(global-set-key (kbd "C-x g")   'magit-status)
(global-set-key (kbd "C-x l")   'list-matching-lines)
;;(global-set-key (kbd "C-x G") '(lambda () (interactive) (progn (switch-to-buffer-other-frame (current-buffer)) (vc-ediff))))
;;(global-set-key (kbd "C-x G") '(lambda () (interactive) (progn (make-frame '((minibuffer . t))) )))   ;; (vc-ediff)
; qwerty 3rd row
(global-set-key (kbd "C-x c")   'filepath-on-clipboard)
(global-set-key (kbd "C-x b")   'ivy-switch-buffer) ;; was switch-to-buffer
(global-set-key (kbd "C-x C-b") '(lambda () (interactive) (ibuffer "home") (ibuffer-switch-to-saved-filter-groups "home")))  ; (global-set-key (kbd "C-x C-b") 'my-list-buffers)

(global-set-key (kbd "s-\\")    'delete-whitespace-right)
(global-set-key (kbd "C-z")     'undo)                      ;; replace-string
(global-set-key (kbd "C-.")     'repeat)

;(global-set-key (kbd "M-.")    'hs-toggle-hiding)         ;; was xref find defs
(global-set-key (kbd "M-$")     'query-replace-regexp)
(global-set-key (kbd "M-y")     'counsel-yank-pop)
(global-set-key (kbd "M-o")     'ace-window)  ;(setq aw-background nil)

(message "-------------- Done: Global Keys")
#+END_SRC

** org-babel keys notes
C-down / C-up = next section / previous section in org-babel
org-goto

  C-c C-o     results in separate buffer
  C-c C-o     open link
  C-c C-x C-l (org-latex-preview)
  C-c C-x C-l show latex
  C-c C-v h   list keybings
  C-c C-v s   execute subtree
  C-c C-v C-b execute all
  C-c C-v z   show REPL
  C-c C-c     execute block
  C-c n       execute and next block
  C-c C-,     insert block
  C-up        up heading
  C-c C-f     forward heading
  C-c C-p     backward heading
  M-i         for function description
  C-M-i       babel completion-at-point
  M-Tab       org complete word at point
  C- '        edit block

 completion
   M-/
   M-TAB - orgmode
   M-i babel> complete-symbol

** Function Keys
|------+-----------+-----------+-----------+-----------------+---+------------------+----------------+--------------+--------------------+---+-------------+-------------+--------+--------------+------|
| ***  | F1        | F2        | F3        | F4              | X | F5               | F6             | F7           | F8                 | X | F9          | F10         | F11    | F12          | ***  |
|------+-----------+-----------+-----------+-----------------+---+------------------+----------------+--------------+--------------------+---+-------------+-------------+--------+--------------+------|
|      | *eshell*  | doAndDone | ibuffers  | dired ~/        | X | app-open    file | tog truncate   | table sort   | babel exec block   | X | macro-start | tog node    | sel v0 | edebug fun   |      |
|------+-----------+-----------+-----------+-----------------+---+------------------+----------------+--------------+--------------------+---+-------------+-------------+--------+--------------+------|
| CTRL | *bash*    | mySystems | dotEmacs  | dired repos/    | X | open @point file | window flip    | table transp | babel exec & next  | X | macro-go    | tog all     | sel v+ | debug-off    | CTRL |
| SHFT | *python*  | history   | dotBashrc | dired projects/ | X | clip @point file | bool-flip      | table export | babel exec subtree | X | macro-end   | open all    | sel v- | debug-on     | SHFT |
|------+-----------+-----------+-----------+-----------------+---+------------------+----------------+--------------+--------------------+---+-------------+-------------+--------+--------------+------|
| ALT  | mark-back | jupyClips | history   | recenter top    | X | clip currnt file | insrt TreeCalc | table cnvrt  | babel latex?       | X |             | yafold mode |        | tog py break | ALT  |
| SUPR | winsplit3 | access    |           | recenter mid    | X | clip dired  file | print var      |              | babel session      | X |             |             |        |              | SUPR |
|------+-----------+-----------+-----------+-----------------+---+------------------+----------------+--------------+--------------------+---+-------------+-------------+--------+--------------+------|

#+BEGIN_SRC emacs-lisp
(global-set-key [f1]       '(lambda () (interactive) (progn (if (eq (get-buffer "*eshell*") nil) (eshell))     (switch-to-buffer "*eshell*"))))
(global-set-key [C-f1]     '(lambda () (interactive) (progn (if (eq (get-buffer "*shell*")  nil) (shell))      (switch-to-buffer "*shell*"))))
(global-set-key [S-f1]     '(lambda () (interactive) (progn (if (eq (get-buffer "*Python*") nil) (run-python)) (switch-to-buffer "*Python*"))))
(global-set-key [M-f1]     '(lambda () (interactive) (progn (set-mark-command 0))))
(global-set-key [s-f1]     'split-window-3)
(defun split-window-3 ()
 "Splite window into 4 sub-window"
 (interactive)
 (if (= 1 (length (window-list)))
     (progn  (split-window-horizontally -60)
             (split-window-vertically -30) ; lower window gets 40 lines

	    ;(other-window 2)
	    ;(split-window-horizontally)
	    )
   )
)


;;'ielm) ;; open file under cursor ;;(global-set-key [M-f9] 'my-insert-last-sexp) ;; insert result

(global-set-key [f2]       '(lambda () (interactive) (find-file "/home/kleyn/aNotes/doAndDone.org")))
(global-set-key [C-f2]     '(lambda () (interactive) (find-file "/home/kleyn/aNotes/mySystems.org")))
(global-set-key [S-f2]     '(lambda () (interactive) (dired     "/home/kleyn/history/commands/history_2021-w*")))  ; view this week's bash history
(global-set-key [M-f2]     '(lambda () (interactive) (find-file "/home/kleyn/projects/repos/mkmain/landing/jupyClips.org")))
(global-set-key [s-f2]     '(lambda () (interactive) (find-file "/home/kleyn/aNotes/access.org")))

;(global-set-key [f3]       'sidebar-toggle)
(global-set-key [f3]       '(lambda () (interactive) (ibuffer "home" nil) (ibuffer-switch-to-saved-filter-groups "home")))
(global-set-key [C-f3]     '(lambda () (interactive) (find-file "/home/kleyn/.emacs.d/dotEmacs.org") (search-forward "** Function Keys") (org-show-subtree)))  ;; nok900  'my-openfile  'neotree-show
(global-set-key [S-f3]     '(lambda () (interactive) (find-file "/home/kleyn/config/dot/dotBashrc") ))
(global-set-key [M-f3]     '(lambda () (interactive) (progn (find-file (concat "/home/kleyn/history/commands/history_"
                                                                        (format-time-string "%Y" (current-time))
                                                                        "-w"
                                                                        (format-time-string "%W" (current-time))))
                                                            (setq truncate-lines t)
                                                            (goto-char (point-max))
                                                            (auto-revert-mode))     )) ;; history_2021-w30

;;(global-set-key [S-f3]   'org-save-code-block)
;; dired-sidebar-switch-to-dir 
(global-set-key [f4]      '(lambda () (interactive)  (dired-sidebar-cmd "~/")))
(global-set-key [C-f4]    '(lambda () (interactive)  (dired-sidebar-switch-to-dir (file-name-directory (buffer-file-name)))))
(global-set-key [S-f4]    '(lambda () (interactive)  (dired "~/" nil)))
;(global-set-key [S-f4]    '(lambda () (interactive) (dired "~/projects/repos" nil)))
(global-set-key [M-f4]     '(lambda () (interactive) (recenter-top-bottom  0)))
(global-set-key [s-f4]     '(lambda () (interactive) (recenter-top-bottom 50)))

;;(global-set-key [C-f4]   'dired-omit-mode)

(global-set-key [f5]       'ergoemacs-open-in-external-app)      ;; bookmark-menu-list',
(global-set-key [C-f5]     'ffap)
(global-set-key [S-f5]     '(lambda () (interactive)  (let ((fpth (thing-at-point 'filename t))) (kill-new fpth) (message fpth))))  ; copy file path at point
(global-set-key [M-f5]     'filepath-on-clipboard)
(global-set-key [s-f5]     'dired-paste-to-yank-buffer)

(global-set-key [f6]       'toggle-truncate-lines)
(global-set-key [C-f6]     'toggle-window-split)
(global-set-key [S-f6]     'bool-flip-do-flip)
(global-set-key [M-f6]     'insertTreeCalcSexp)
(global-set-key [s-f6]     '(lambda () (interactive)  (let* ((currWord (thing-at-point 'symbol t))
                                                             (currWordVal (symbol-value (intern currWord))))
                                                          (switch-to-buffer "*scratch*")
                                                          (goto-char (point-min))                                              ;; (print currWordVal  (get-buffer "*scratch*"))
                                                          (cl-prettyprint currWordVal))))
;(global-set-key (kbd "C-x m")   'insertTreeCalcSexp)                                     ;; (lambda () (interactive) (dired "C:/[pm][rya][qoadmp][parsd]*" nil)))

(global-set-key [f7]      'org-table-sort-lines)
(global-set-key [C-f7]    'org-table-transpose-table-at-point)
(global-set-key [S-f7]    'org-table-export)                           ;; (global-set-key [S-f7] 'buffer-menu-sort-by-filename)
(global-set-key [M-f7]    'org-table-convert-region)
(global-set-key [s-f7]    'org-table-toggle-coordinate-overlays)


;(global-set-key [M-f7]   'show-hist)                           ;; (global-set-key [S-f7] 'buffer-menu-sort-by-filename)


(global-set-key [f8]     '(lambda () (interactive) (org-babel-execute-src-block)))
(global-set-key [C-f8]   '(lambda () (interactive) (my-org-babel-execute-and-next)))
(global-set-key [S-f8]   '(lambda () (interactive) (org-babel-execute-subtree)))
(global-set-key [M-f8]   '(lambda () (interactive) (org-latex-preview)))
(global-set-key [s-f8]   '(lambda () (interactive) (org-babel-switch-to-session)))

(global-set-key [f9]       'kmacro-start-macro)                  ;; 'ielm)  ;; open file under cursor
(global-set-key [C-f9]     'kmacro-end-and-call-macro)           ;; see-shell-output) ;ergoemacs-open-in-external-app
(global-set-key [S-f9]     'kmacro-end-macro)

(global-set-key [f10]      'yafolding-toggle-element)
(global-set-key [C-f10]    'yafolding-toggle-all)
(global-set-key [S-f10]    'yafolding-show-all)
(global-set-key [M-f10]    'yafolding-mode)
(global-set-key [s-f10]    'yafolding-discover)

; (global-set-key [M-f2]   'buffer-menu-sort-by-filename)
(global-set-key [M-f10]    'see-shell-output)                    ;; ergoemacs-open-in-external-app

(global-set-key [f11]      'selective-display-level-zero)
(global-set-key [C-f11]    'selective-display-level-incr)
(global-set-key [S-f11]    'selective-display-level-decr)

(global-set-key [f12]      'edebug-defun)                        ;; put break in defun/ form whatever - REMOVE by re-evaluating the definition
(global-set-key [S-f12]    'set-debug-on)
(global-set-key [M-f12]    'set-debug-off)
(global-set-key [s-f12]    'insertcodePyCodeSnippet)

(global-unset-key    "\C-x\C-c")                                      ;; Don't quit so easily
(global-set-key (kbd "C-x C-c C-v")  'save-buffers-kill-emacs)        ;; But we establish a longer sequence that is harder to hit by accident:

(message "-------------- Done: Function Keys")
#+END_SRC

** ace-window keys
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
	(?m aw-swap-window "Swap Windows")
	(?M aw-move-window "Move Window")
	(?c aw-copy-window "Copy Window")
	(?j aw-switch-buffer-in-window "Select Buffer")
	(?n aw-flip-window)
	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	(?c aw-split-window-fair "Split Fair Window")
	(?v aw-split-window-vert "Split Vert Window")
	(?b aw-split-window-horz "Split Horz Window")
	(?o delete-other-windows "Delete Other Windows")
	(?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")
** KeyPad Keys
*** Midpad Global Key Bindings
#+begin_src emacs-lisp
(global-set-key [(next)]        'cycle-buffer)
(global-set-key [C-down]        'cycle-buffer)              ;; avoid default binding (global-set-key (kbd "C-c <down>")  'windmove-down)
(global-set-key [(prior)]       'cycle-buffer-backward)
(global-set-key [C-up]          'previous-buffer)
(global-set-key [C-down]        'next-buffer)               ;; 'cycle-buffer  avoid default binding (global-set-key (kbd "C-c <down>")  'windmove-down)

(global-set-key [S-down]        'scroll-one-line-up)
(global-set-key [S-up]          'scroll-one-line-down)


(global-set-key [C-insert]      'clipboard-kill-ring-save)
(global-set-key [S-insert]      'clipboard-yank)

(global-set-key [S-left]        'window-hshrink)
(global-set-key [S-right]       'window-hwiden)

(global-set-key [M-insert]      'toggle-window-split)
(global-set-key [M-delete]      'kill-this-buffer-volatile)

(message "-------------- Done: Midpad key bindings")
#+end_src

(global-set-key [M-up]          'kill-this-buffer-volatile) ;; kill-buffer
(global-set-key [M-+]           'text-scale-increase)
(global-set-key [C-down]        'windmove-down)        ;(global-set-key (kbd "C-c <down>")  'windmove-down);
(global-set-key [C-left]        'windmove-left)        ;(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key [C-right]       'windmove-right)       ;(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key [C-up]          'windmove-up)          ;(global-set-key (kbd "C-c <up>")    'windmove-up)

*** Keypad Global Key Bindings
#+begin_src emacs-lisp
(progn 
  (global-set-key [S-kp-prior]        'scroll-one-line-down)  ;; = S-kp9
  (global-set-key [S-kp-right]        '(lambda () (interactive) (recenter-top-bottom '(t))))   ;; = S-kp6
  (global-set-key [S-kp-next]         'scroll-one-line-up)     ;; = S-kp3
)
#+end_src

*** Keypad Map 1
:         |----------------+----------------+----------------+----------|        
:         |         NumLock|               /|               *|         -|        
: modifier|                |                |                |          |modifier
: |       |                |                |                |          |       |
: | CTRL >|                |                |                |          |<CTRL  |
: | SHIFT>|                |                |                |          |<SHIFT |
: | ALT  >|                |                |                |          |<ALT   |
: | SUPER>|                |                |                |          |<SUPER |
: |-------+----------------+----------------+----------------+----------+-------|
: |       |          7 Home| *UP*        8 ^|          9 PgUp|         +|       |
: |       |                |                | previous-line  |          |       |
: | CTRL >|                |                |                |          |<CTRL  |
: | SHIFT>|                |                | scroll-1-up    |          |<SHIFT |
: | ALT  >|                |                |                |          |<ALT   |
: | SUPER>|                |                |                |          |<SUPER |
: |-------+----------------+----------------+----------------+          +-------|
: |       | *OUT*       4 <| *CYCLE*       5| *IN/DFT*    6 >|          |       |
: |       |                |                |                |          |       |
: | CTRL >|                |                |                |          |<CTRL  |
: | SHIFT>|                |                | scroll-center  |          |<SHIFT |
: | ALT  >|                |                |                |          |<ALT   |
: | SUPER>|                |                |                |          |<SUPER |
: |-------+----------------+----------------+----------------+----------+-------|
: |       |           1 End| *DOWN*      2 v|          3 PgUp|     Enter|       |
: |       |                |                | next-line      |          |       |
: | CTRL >|                |                |                |          |<CTRL  |
: | SHIFT>|                |                | scroll-1-down  |          |<SHIFT |
: | ALT  >|                |                |                |          |<ALT   |
: | SUPER>|                |                |                |          |<SUPER |
: |-------+----------------+----------------+----------------+          +-------|
: |       |                            0 Ins|           . Del|          |       |
: |       |                                 |                |          |       |
: | CTRL >|                                 |                |          |<CTRL  |
: | SHIFT>|                                 |                |          |<SHIFT |
: | ALT  >|                                 |                |          |<ALT   |
: | SUPER<|                                 |                |          |<SUPER |
: |-------+---------------------------------+----------------+----------+-------|

*** Keypad Map 2
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|
 | # | KEY  | DESCRIPTION                         | ABBRV | SoFar | org-mode/babel                          | dired                               | sidebar | python                                       | elisp                      | json | xml/yafoldable | ibuffer                | TreeziCalc | table |
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|
 |   | kp-4 | move upto parent;                   | out   | JJXJX | j outline-up-heading     : tbd collapse | J dired-up-to-parent                |         | python-nav-backward-up-list/-beginning-block | J backward-up-list         |      |                |                        |            | left  |
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|
 |   | kp-8 | move to previous sibling            | sup   | JJXJX | J org-backward-heading-same-level       | J dired-subtree-previous-sibling    |         | python-nav-backward-[block/list/..]          | J backward-sexp            |      |                | J                      |            | up    |
 |   | kp-5 | troggle children                    | trg   | JJJJX | J org-cycle                             | J my-dired-subtree-toggle           |         | J yafolding-toggle-element                   | J yafolding-toggle-element |      |                | J toggle ibuffer group |            | right |
 |   | kp-2 | move to next     sibling            | sdn   | JJXJX | J org-forward-heading-same-level        | J dired-subtree-next-sibling        |         | python-nav-forward-[block/list/..]           | J forward-sexp             |      |                | J                      |            | down  |
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|
 |   | kp-6 | go in; expand/dft if needed         | in    | JJXXX | J my-org-dft                            | J my-dired-dft                      |         |                                              | J down-list                |      |                |                        |            |       |
 |   | kp-9 | up one line                         | prv   |       |                                         |                                     |         |                                              |                            |      |                |                        |            |       |
 |   | kp-3 | down one line                       | nxt   |       |                                         |                                     |         |                                              |                            |      |                |                        |            |       |
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|
 |   |      | goto first uncle                    | fu    |       |                                         |                                     |         |                                              |                            |      |                |                        |            |       |
 |   |      | goto last uncle                     | lu    |       |                                         |                                     |         |                                              |                            |      |                |                        |            |       |
 |   |      | show children; go to last child     | lc    | XXXXX | (org-show-children) (next-line)         |                                     |         |                                              |                            |      |                |                        |            | end   |
 |   |      | move to next     sibling X7         | ns6   | JJXJX | J org-forward-heading-same-level  x7    | J my-dired-subtree-next-sibling  x7 |         |                                              | J forward-sexp X 6         |      |                |                        |            |       |
 |   |      | move to previous sibling X7         | ps6   | JJXJX | J org-backward-heading-same-level x7    | J my-dired-subtree-prev-sibling  x7 |         |                                              | J backward-sexp x 6        |      |                |                        |            |       |
 |   |      | upto grandparent; collapse children | up2   | JJXJX | J outline-up-heading X 2 : tbd collapse | J dired-up-to-parent X 2            |         |                                              | J backward-up-list X 2     |      |                |                        |            | home  |
 |   |      | search breadth first                |       |       |                                         |                                     |         |                                              |                            |      |                |                        |            |       |
 |---+------+-------------------------------------+-------+-------+-----------------------------------------+-------------------------------------+---------+----------------------------------------------+----------------------------+------+----------------+------------------------+------------+-------|

*** TreeNavPad keys for dired modes
TBD
(dired-sidebar-subtree-toggle)
(defvar dired-sidebar-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "TAB") 'dired-sidebar-subtree-toggle)
    (define-key map [tab] 'dired-sidebar-subtree-toggle)
    (define-key map (kbd "C-m") 'dired-sidebar-find-file)
    (define-key map (kbd "RET") 'dired-sidebar-find-file)
    (define-key map (kbd "<return>") 'dired-sidebar-find-file)
    (define-key map "^" 'dired-sidebar-up-directory)
    (define-key map "-" 'dired-sidebar-up-directory)
    (define-key map (kbd "C-o") 'dired-sidebar-find-file-alt)
    (define-key map [mouse-2] 'dired-sidebar-mouse-subtree-cycle-or-find-file)
    map)
  "Keymap used for symbol `dired-sidebar-mode'.")
(dired-sidebar-subtree-toggle)
#+begin_src emacs-lisp

(progn ;; dired-sidebar treepad navigation

  ;;(define-key dired-sidebar-mode-map [kp-8]      'dired-previous-line)
  ;;(define-key dired-sidebar-mode-map [kp-2]      'dired-next-line)

  (define-key dired-sidebar-mode-map [kp-4]        '(lambda () (interactive)                                                       ;; keep
                                                       (message (format "%d %d" (line-number-at-pos) (dired-subtree--get-depth (dired-subtree--get-ov))))
                                                       (if (= (dired-subtree--get-depth (dired-subtree--get-ov)) 0)
                                                          (dired-sidebar-up-directory)
                                                          (dired-subtree-up))))


  (define-key dired-sidebar-mode-map [kp-8]        'dired-subtree-previous-sibling)                                 ;; move #2=ps
  (define-key dired-sidebar-mode-map [kp-5]        'dired-sidebar-subtree-toggle)
  (define-key dired-sidebar-mode-map [kp-2]        'dired-subtree-next-sibling)                                     ;; move #8=ns                           

  (define-key dired-sidebar-mode-map [kp-subtract] '(lambda () (interactive) (dired-sidebar-subtree-toggle) (dired-next-lne)))

  (define-key dired-sidebar-mode-map [kp-6]        '(lambda () (interactive) ;; first child, open if needed
                                                       (if (not (dired-subtree--is-expanded-p)) (dired-sidebar-subtree-toggle))
                                                       (dired-next-line 1)))                                       ;; dired-sidebar-find-file
  (define-key dired-sidebar-mode-map [C-kp-6]      'dired-sidebar-find-file)

  (define-key dired-sidebar-mode-map "O"           '(lambda () (interactive) (ergoemacs-open-in-external-app)))

  ;; (define-key dired-sidebar-mode-map [C-kp-5]      'dired-sidebar-up-directory) now subsumed in kp-5
)

(progn ;; dired treepad navigation

  (define-key dired-mode-map [kp-4]                'my-dired-up-to-parent)                                          ;; ok-same as sidebar; move #6=u1  

  (define-key dired-mode-map [kp-8]                'dired-subtree-previous-sibling)                                 ;; ok-same as sidebar; move #2=ps
  (define-key dired-mode-map [kp-5]                'my-dired-subtree-toggle)                                        ;; ok-same as sidebar; tbd toggle with 'dired-subtree-remove ;; toggle open children
  (define-key dired-mode-map [kp-2]                'dired-subtree-next-sibling)                                     ;; ok-same as sidebar;  move #8=ns

  (define-key dired-mode-map [kp-6]                'my-subdired-dft)                                                ;; dired-subtree-insert move #8=ns     ;; open and moveto first child,
  (define-key dired-mode-map [C-kp-6 ]             'dired-find-file-drop-prev-dired-buffer)                         ;; dired-find-file

  ; (define-key dired-mode-map [kp-4]                '(lambda () (interactive)   (my-dired-up-to-parent) (my-dired-up-to-parent)))
  ; (define-key dired-mode-map [kp-decimal]          '(lambda () (interactive)  (my-dired-subtree-next-sibling-n 7)))              ;; moveto nth sibling, and open
)

; ------------------------------------------------------------------ TreeNavPad keys for dired
(defun my-subdired-dft ()
  "depth-first traversal for dired-subtree"
  (interactive)
  (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
    (if (dired-utils-is-dir-p)
        (if (dired-subtree--is-expanded-p)
            (dired-subtree-remove)
            (dired-subtree-insert))
        (progn
          (if  dired-subtree-last-previewed-buffer (kill-buffer dired-subtree-last-previewed-buffer))   ;; delete previous preview buffer, if any
          (setq dired-subtree-last-previewed-buffer (dired-view-current))           ;; record previewed buffer
          (dired-next-line 1)
          (setq cDpth (dired-subtree--get-depth (dired-subtree--get-ov)))
          (message (concat "cDpth=" (number-to-string cDpth) "--" "sDpth" (number-to-string sDpth)))
          (if (< cDpth sDpth)                                                      ;; have we gone up a level, if so remove the subtree we were just in
              (progn
                (dired-previous-line 1)
                (dired-subtree-remove)
                (dired-next-line 1))))))
   )

(defun my-dired-up-to-parent ()                                                 ;; tbd if not a subdir (i.e. in rootdir), then jump  'dired-up-directory-drop-prev-dired-buffer
  (interactive)
  (let ((sDpth (dired-subtree--get-depth (dired-subtree--get-ov))))
       ; (message sDpth)
       (if (eq sDpth 0)
           (dired-up-directory-drop-prev-dired-buffer)
           (dired-subtree-remove)))
   )

(defun my-dired-subtree-toggle ()
  (interactive)
  (if (dired-subtree--is-expanded-p)
      (progn (dired-next-line 1) (dired-subtree-remove))
      (progn (dired-subtree-insert) (dired-previous-line 1)))
   )

(defun my-dired-subtree-next-sibling-n (n)
  (interactive)
  (dotimes (i n) (dired-subtree-next-sibling))
  )

(defun my-dired-subtree-prev-sibling-n (n)
  (interactive)
  (dotimes (i n) (dired-subtree-prev-sibling))
  )

#+end_src

*** TreeNavPad keys for org-mode
#+begin_src emacs-lisp
(progn
  ; (define-key org-mode-map [kp-4]               '(lambda () (interactive)  (outline-up-heading 2)))
  (define-key org-mode-map [kp-4]                  'my-org-uplevel)

  (define-key org-mode-map [kp-multiply]           '(lambda () (interactive)  (org-backward-heading-same-level 6)))
  (define-key org-mode-map [kp-8]                  'org-backward-heading-same-level)
  (define-key org-mode-map [kp-5]                  'org-cycle)
  (define-key org-mode-map [kp-2]                  'org-forward-heading-same-level)                                ;; tbd fix: not if in body of heading
  (define-key org-mode-map [kp-decimal]            '(lambda () (interactive)  (org-forward-heading-same-level 6)))

  (define-key org-mode-map [kp-9]                  'previous-line)                                                  ;; tbd show contents of leaf
  (define-key org-mode-map [kp-6]                  'my-org-dft)                                                  ;; tbd show contents of leaf
  (define-key org-mode-map [kp-3]                  'next-line)                                                     ;; tbd show contents of leaf

  (define-key org-mode-map [kp-7]                  'my-org-babel-prev)
  (define-key org-mode-map [kp-1]                  'my-org-babel-next)

  (define-key org-mode-map [M-home]                'org-collapse)

)

;;(define-key org-mode-map [kp-subtract]             'kill-this-buffer-volatile)
;;(define-key org-mode-map [kp-divide]               'toggle-window-split)

;; functions for key binds

(defun my-org-toggle-subtree ()
  "try to emulate dired 2-cycle rather than TAB 3-cycle"
  (interactive)
  (message "--------------Enter")
  (let ((oeap (org-element-at-point))                       ; (setq oeap-lv (org-element-property :level oeap))
        (oec (org-element-context)))                        ; (setq oec-lv  (org-element-property :level oec))
     (if (eq curr-command last-command)
         (progn (org-show-entry)
               (org-show-children))
        (org-hide-block-toggle nil)))         ; i.e. hide src block
)

(defun my-org-babel-next ()
   (interactive)
   (setq case-fold-search t)
   (beginning-of-line)
   (forward-char 3)
   (re-search-forward "^#.begin_src\\|^#.results:" nil t nil)
   (beginning-of-line)
   (recenter '(t))
)

(defun my-org-babel-prev ()
   (interactive)
   (setq case-fold-search t)
   (beginning-of-line)
   (backward-char 1)
   (re-search-backward "^#.begin_src\\|^#.results:" nil t nil)
   (beginning-of-line)
   (recenter-top-bottom 50)
)

(defun my-org-dft ()
   "depth-first traversal for org/babel mode"
   (interactive)
   (message "--------------Enter")
   (setq oeap (org-element-at-point))                        ; (setq oeap-lv (org-element-property :level oeap))
   (setq oec (org-element-context))                          ; (setq oec-lv  (org-element-property :level oec))
   ;(setq curLine (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
   ;(message (concat "XXX" curLine "XXX"))
   (message (concat "my-org-dft:BEFORE:" (prin1-to-string (org-element-type oeap)) "  " (prin1-to-string (org-element-type oec))))
   (cond ((eq (org-element-type oeap) 'headline)
             (progn (org-show-entry)
                   (org-show-children)
                   (next-line)))
         ((eq (org-element-type oeap) 'src-block)
             (if (looking-at "^#\\+END_SRC")                 ; have come to end of
                (progn (message "Looking at end_src")
                       (org-hide-block-toggle nil)          ; i.e. hide src block
                       (next-line))
                (progn (org-hide-block-toggle 'off)         ; i.e. show src block
                       (next-line))))
         ((or (eq (org-element-type oeap) 'example-block) (looking-at "^#\\+RESULTS:")) ;; (eq (org-element-type oeap) 'fixed-width)
             (progn (message "Looking at example or RESULT")
                   (org-babel-hide-result-toggle 'off)      ; i.e. show block
                   (next-line)))
         ((eq (org-element-type oeap) 'example-block)
             (if (looking-at "^#\\+END_EXAMPLE")             ; have come to end of  example
                (progn (message "Looking at end_example")
                       (org-hide-block-toggle nil)          ; i.e. hide src block
                       (next-line))
                (progn (message "Looking at example")
                       (org-hide-block-toggle 'off)         ; (org-babel-hide-result-toggle 'off)   ;; i.e. show block
                       (next-line))))
         ((memq (org-element-type oeap) '(paragraph fixed-width)) ; otherwise: move down a line
             (progn (if (looking-at "^\\s-*$")
                        (progn (message "This Line is empty")
                               (message (prin1-to-string oeap)
                               (goto-char (org-element-property :begin oeap))
                               (org-babel-hide-result-toggle nil)
                               (next-line)))) ; close result section
                     (next-line)))
                           
         (t
            (progn (message "my-org-dft:got here")
                   (next-line))))

   (message (concat "my-org-dft:AFTER:" (prin1-to-string (org-element-type oeap)) "  " (prin1-to-string (org-element-type oec))))
)

(defun my-org-uplevel ()
   "go up a level for org and babel mode"
   (interactive)
   (message "--------------Enter")
   (setq oeap (org-element-at-point))                      ; (setq oeap-lv (org-element-property :level oeap))
   (setq oec (org-element-context))                        ; (setq oec-lv  (org-element-property :level oec))
   (message (concat "my-org-uplevel:BEFORE:" (prin1-to-string (org-element-type oeap)) "  " (prin1-to-string (org-element-type oec))))

   (cond ((or (memq (org-element-type oeap) '(headline table))
              (looking-at "^#\\+begin_"))
          (progn (message "heading, table")
                 (org-up-element)))
         ((eq (org-element-type oeap) 'src-block)
          (progn (message "code block")
                 (org-babel-goto-src-block-head)))
         ((eq (org-element-type oeap) 'example-block)
          (progn (org-babel-hide-result-toggle 'off)   ;; i.e. show block
                 (next-line)))
        ((and (eq (org-element-type oeap) 'fixed-width) (looking-at "^#\\+RESULTS:"))
         (progn (org-babel-hide-result-toggle 'off)   ;; i.e. show block
                (next-line)))
        ((memq (org-element-type oeap) '(paragraph fixed-width)) ; otherwise: move down a line
         (progn 
           (message "hello1")
           (org-up-element)
           ))
        ((eq (org-element-type oeap) 'table-row) ; otherwise: move down a line
         (while (progn 
                    (message "in table row")
                    (previous-line)
                    (equal (org-element-type (org-element-at-point)) 'table-row))))
        (t
         (progn (message "my-org-uplevel:got here"))))
)
  ;(message (concat "my-org-uplevel:AFTER:" (prin1-to-string (org-element-type oeap)) "  " (prin1-to-string (org-element-type oec))))
#+end_src

*** TreeNavPad keys for emacs-lisp mode
#+begin_src emacs-lisp
(progn

  (define-key emacs-lisp-mode-map [kp-4]          'backward-up-list)                                                     ;; Move to parent. move to the beginning of outer paren pair ; outline-up-heading

  (define-key emacs-lisp-mode-map [kp-8]          'backward-sexp)                                                        ;; Move to previous sibling. move to the beginning of previous sexp unit ; org-backward-heading-same-level
  (define-key emacs-lisp-mode-map [kp-5]          'yafolding-toggle-element)
  (define-key emacs-lisp-mode-map [kp-2]          'forward-sexp)                                                         ;; Move to next sibling.     move to the end of next sexp unit  ; org-forward-heading-same-level

  (define-key emacs-lisp-mode-map [kp-6]          'down-list)                                                              ; Move to first child.      move into the beginning of first inner paren pair ; my-org-dft; tbd show contents of leaf

  ; (define-key emacs-lisp-mode-map [kp-4]          'my-elisp-sexp-grandparent)                                           ;; Move to grandparent.
  ; (define-key emacs-lisp-mode-map [kp-multiply]   '(lambda () (interactive)  (my-elisp-backsexp-n 6)))
  ; (define-key emacs-lisp-mode-map [kp-decimal]    '(lambda () (interactive)  (my-elisp-forwardsexp-n 6)))
)
;; functions for key binds
(defun my-elisp-sexp-grandparent ()
  "go parent sexp - 2 levels"
  (interactive)
  (backward-up-list)
  (backward-up-list)
)

(defun my-elisp-backsexp-n (n)
  "go prev sibling sexp - n times"
  (interactive)
  (dotimes (i n) (backward-sexp))
)

(defun my-elisp-forwardsexp-n (n)
  "go prev sibling sexp - n times"
  (interactive)
  (dotimes (i n) (forward-sexp))
)

(message "-------------- Done: KeyPad Section")
#+end_src


;; (define-key emacs-lisp-mode-map [kp-8]        'my-org-babel-prev)
;; (define-key emacs-lisp-mode-map [kp-2]        'my-org-babel-next)
;; (define-key emacs-lisp-mode-map [M-home]      'org-collapse)
;; (define-key emacs-lisp-mode-map [kp-subtract] 'kill-this-buffer-volatile)
;; (define-key emacs-lisp-mode-map [kp-divide]   'toggle-window-split)

#+begin_src emacs-lisp
 (message "-------------- Done: Keybindings Section")
#+end_src

** not used

 (define-key global-map "\C-co"  'org-capture)
 (global-set-key "\C-!"          'shell-command) TBD
 (global-set-key "\C-Q"          'unfill-paragraph)
 (global-set-key "\C-q"          'quoted-insert)
 (global-set-key "\C-r"         #'(lambda () (interactive)  (eval (car command-history))))
 (global-set-key "\C-xi"         'eval-print-last-sexp) ; ielm
 (global-set-key (kbd "C-.")     'repeat)
 (global-set-key [(next)]        'cycle-buffer)
 (global-set-key [(prior)]       'cycle-buffer-backward)
 (global-set-key [C-down]        'windmove-down)        ;(global-set-key (kbd "C-c <down>")  'windmove-down);
 (global-set-key [C-insert]      'clipboard-kill-ring-save)
 (global-set-key [C-kp-insert]   'kill-ring-save)
 (global-set-key [C-left]        'windmove-left)        ;(global-set-key (kbd "C-c <left>")  'windmove-left)
 (global-set-key [C-right]       'windmove-right)       ;(global-set-key (kbd "C-c <right>") 'windmove-right)
 (global-set-key [C-up]          'windmove-up)          ;(global-set-key (kbd "C-c <up>")    'windmove-up)
 (global-set-key [M-+]           'text-scale-increase)
 (global-set-key [M--]           'text-scale-decrease)  ;; with a C-0 prefix argument.
 (global-set-key [M-f8]          'vigenere-encrypt-buffer)
 (global-set-key [M-return]      'ffap)  ;; open file under cursor
 (global-set-key [M-up]          'kill-this-buffer-volatile) ;; kill-buffer
 (global-set-key [M-up]          'other-window)
 (global-set-key [S-M-kp-down]   'sgml-fold-subelement)   ; M-kp ... conflicts with workspace navigation:
 (global-set-key [S-M-kp-end]    'sgml-fold-element)      ; fold everything below current element
 (global-set-key [S-M-kp-next]   'sgml-unfold-element)
 (global-set-key [S-f7]          'buffer-menu-sort-by-filename)
 (global-set-key [S-f8]          'dired-omit-mode)
 (global-set-key [S-insert]      'clipboard-yank)
 (global-set-key [S-kp-4]        'selective-display-level-decr)
 (global-set-key [S-kp-5]        'selective-display-level-zero)
 (global-set-key [S-kp-6]        'selective-display-level-incr)
 (global-set-key [S-kp-insert]   'yank)
 (global-set-key [end]           'kill-this-buffer-volatile)
 (global-set-key [f10]           'see-shell-output) ;ergoemacs-open-in-external-app
 (global-set-key [f11]           'hs-show-block)
 (global-set-key [f12]           'hs-hide-block)
 (global-set-key [f5]            'ffap) ; bookmark-bmenu-list
 (global-set-key [f6]            'ergoemacs-open-in-external-app)
 (global-set-key [f7]            'my-list-buffers)
 (global-set-key [f8]            'vigenere-decrypt-buffer)
 (global-set-key [f8]            'ztree-dir)
 (global-set-key [f9]            'ielm)  ;; open file under cursor

 (global-unset-key (kbd "C-q"))

;;------------------------------------------------------------------------------ TFS Version Control
;; ;; 1. Place `tfs.el' in your `load-path'.
;; ;; 2. In your .emacs file:
;; (require 'tfs)
;; (setq tfs/tf-exe  "C:\\TF.exe")
;; (setq tfs/tf-exe  "C:\\Program Files \(x86\)\\TF.exe")
;; ;;(setq tfs/tf-exe  "C:\\Program\ Files\ \(x86\)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\tf.exe")
;; ;;(setq tfs/tf-exe  "C:\\Program Files\ \(x86\)\\Microsoft\ Visual\ Studio\ 12.0\\Common7\\IDE\\TF.exe")
;; (setq tfs/login "/login:snd\\kleynmi,password")
;; ;; 3. also in your .emacs file:
;; ;;      set local or global key bindings for tfs commands.  like so:

;; (global-set-key  "\C-xvo" 'tfs/checkout)
;; (global-set-key  "\C-xvi" 'tfs/checkin)
;; (global-set-key  "\C-xvp" 'tfs/properties)
;; (global-set-key  "\C-xvg" 'tfs/get)
;; (global-set-key  "\C-xvh" 'tfs/history)
;; (global-set-key  "\C-xvu" 'tfs/undo)
;; (global-set-key  "\C-xvd" 'tfs/diff)
;; (global-set-key  "\C-xvs" 'tfs/status)
;; (global-set-key  "\C-xva" 'tfs/annotate)
;; (global-set-key  "\C-xvw" 'tfs/workitem)
;; (global-set-key  "\C-xv+" 'tfs/add)
;; (global-set-key  "\C-xv-" 'tfs/delete)
;; (global-set-key  "\C-xvc" 'tfs/changeset)


* Debugging
;;-------------------------------------------------------------------- DEBUG
;;Go to where your function is defined and type M-x edebug-defun,
;;This will work the next time the function is called. You can check the docs[1]or just type ?.

;; edebug-defun inside function definition  <- revert by re-evaluating the defun
;; debug-on-entry
;; (toggle-debug-on-error)
;; toggle-debug-on-quit
;; insert (debug)
#+BEGIN_SRC
(defun set-debug-on()   (interactive) (progn (setq debug-on-error t)    (message "emacs debug on")))
(defun set-debug-off()  (interactive) (progn (setq debug-on-error nil)  (message "emacs debug off")))
#+END_SRC
;;(setq debug-on-error t)
;;(setq debug-on-error t)
;;(setq debug-on-error nil)

;; (global-set-key [S-f11]         'debug-function-on-entry)

;; S     Stop: don't execute any more of the program, but wait for more Edebug commands (edebug-stop).
;; <SPC> Step: stop at the next stop point encountered (edebug-step-mode).
;; d     display stack
;; n     Next: stop at the next stop point encountered after an expression (edebug-next-mode). Also see edebug-forward-sexp in Jumping.
;; t     Trace: pause (normally one second) at each Edebug stop point (edebug-trace-mode).
;; T     Rapid trace: update the display at each stop point, but don't actually pause (edebug-Trace-fast-mode).
;; g     Go: run until the next breakpoint (edebug-go-mode). See Breakpoints.
;; c     Continue: pause one second at each breakpoint, and then continue (edebug-continue-mode).
;; C     Rapid continue: move point to each breakpoint, but don't pause (edebug-Continue-fast-mode).
;; G     Go non-stop: ignore breakpoints (edebug-Go-nonstop-mode). You can still stop the program by typing S, or any editing command.
;; ESC-: eval expr

;; Edebug can record an execution trace, storing it in a buffer named *edebug-trace*. This is a log of function calls and returns, showing the function names and their arguments and values. To enable trace recording, set edebug-trace to a non-nil value.
;; Making a trace buffer is not the same thing as using trace execution mode (see Edebug Execution Modes).
;; When trace recording is enabled, each function entry and exit adds lines to the trace buffer. A function entry record consists of ‘::::{’, followed by the function name and argument values. A function exit record consists of ‘::::}’, followed by the function name and result of the function.
;; The number of ‘:’s in an entry shows its recursion depth. You can use the braces in the trace buffer to find the matching beginning or end of function calls.
;; You can customize trace recording for function entry and exit by redefining the functions edebug-print-trace-before and edebug-print-trace-after.
;; — Macro: edebug-tracing string body...
;; This macro requests additional trace information around the execution of the body forms. The argument string specifies text to put in the trace buffer, after the ‘{’ or ‘}’. All the arguments are evaluated, and edebug-tracing returns the value of the last form in body.
;; — Function: edebug-trace format-string &rest format-args
;; This function inserts text in the trace buffer. It computes the text with (apply 'format format-string format-args). It also appends a newline to separate entries.
;; edebug-tracing and edebug-trace insert lines in the trace buffer whenever they are called, even if Edebug is not active. Adding text to the trace buffer also scrolls its window to show the last lines inserted.


    (defmacro stop-here (fn)
       "Call edebug here. FN is assumed to be a symbol of the function you are in."
       `(if (consp (get ,fn 'edebug))
           (edebug)))

    (defun clear-edebug (fn-sym)
      "Remove 'edebug property from FN-SYM, a function symbol."
      (put fn-sym 'edebug nil))
    ;; An example of use:
    (defun fact (n)
      (cond ((= n 0) )
        ((= n 1) 1)
        ((>  n 1) (progn (stop-here 'fact) (* n (fact (1- n)))))
        (t nil)))


* ESHELL
;; (add-to-list 'eshell-command-aliases-list (list "l"     "stat --printf=%y\t%6s\t%-16n\n * | cut -b -16,36-"))
#+BEGIN_SRC emacs-lisp
(eshell)
(setq eshell-save-history-on-exit nil)
(setq eshell-hist-ignoredups t)

(require 'ansi-color)
(defun eshell-handle-ansi-color ()
      (ansi-color-apply-on-region eshell-last-output-start
                                  eshell-last-output-end))
(add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)


(defun sb ()
 (progn
  (setq eshell-command-aliases-list ())
  (add-to-list 'eshell-command-aliases-list (list "ll"    "ls -lF  --time-style=long-iso $*"))
  (add-to-list 'eshell-command-aliases-list (list "la"    "ls -alF --time-style=long-iso $*"))
  (add-to-list 'eshell-command-aliases-list (list "cl"    "cd $*; ll"))

  (add-to-list 'eshell-command-aliases-list (list "al"    "alias"))
  (add-to-list 'eshell-command-aliases-list (list "ag"    "alias | grep $*"))

  (add-to-list 'eshell-command-aliases-list (list "fnd"   "find $*")) ;; plain old find

  (add-to-list 'eshell-command-aliases-list (list "gits"  "git status ."))
  (add-to-list 'eshell-command-aliases-list (list "gith"  "git help"))
  (add-to-list 'eshell-command-aliases-list (list "gita"  "git add $*"))
  (add-to-list 'eshell-command-aliases-list (list "gitb"  "git branch -av"))
  (add-to-list 'eshell-command-aliases-list (list "gitcb" "git checkout -b $*"))
  (add-to-list 'eshell-command-aliases-list (list "gitl"  "git log -n 20 --pretty=oneline --abbrev-commit --no-merges --decorate --format=format:'%h - (%ar) %s - %an%d'"))
  (add-to-list 'eshell-command-aliases-list (list "gitcm" "git commit -m"))

  (add-to-list 'eshell-command-aliases-list (list "gr"    "grep $*"))
  (add-to-list 'eshell-command-aliases-list (list "gi"    "grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "rg"    "~/ubin/fqry/rgrep.py $*"))
  (add-to-list 'eshell-command-aliases-list (list "h"     "history 30"))
  (add-to-list 'eshell-command-aliases-list (list "netsl" "netstat -tlnp"))
  (add-to-list 'eshell-command-aliases-list (list "lsofi" "lsof -n -i"))


  (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (save-eshell-history)); cat $es_hstFile; echo $es_hstFile"))
  (add-to-list 'eshell-command-aliases-list (list "hs2"   "~/.emacs.d/save-history.eshell"))
  (add-to-list 'eshell-command-aliases-list (list "hl"    "history 60"))
  (add-to-list 'eshell-command-aliases-list (list "hll"   "ls -lrt ~/history/commands/ | tail -6"))
  (add-to-list 'eshell-command-aliases-list (list "hg"    "cat $eshell-history-file-name | grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "hgg"   "find ~/history/commands/ -mtime -20  -type f | xargs grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "hggg"  "find ~/history/commands/ -mtime -365 -type f | xargs grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "hgggg" "find ~/history/commands/ -type f | xargs grep -i $*"))


  (add-to-list 'eshell-command-aliases-list (list "remNfsEuler"  "sudo mount.cifs -o username=kleyn,uid=1000,gid=1000 //192.168.1.177/Users/kleyn ~/Euler"))

  (add-to-list 'eshell-command-aliases-list (list "es"    "(save-eshell-terminal)"))
  (add-to-list 'eshell-command-aliases-list (list "pe"    "printenv | sort"))
  (add-to-list 'eshell-command-aliases-list (list "pg"    "printenv | grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "ctrlc" "xclip -selection c"))

  (add-to-list 'eshell-command-aliases-list (list "psg"     "ps -elf | grep -i $*"))
  (add-to-list 'eshell-command-aliases-list (list "ctrlv"   "xclip -selection c -o; echo '' "))
  (add-to-list 'eshell-command-aliases-list (list "ctrlvv"  "xclip -selection c -o >> /home/kleyn/history/scratch.org; echo '' >> /home/kleyn/history/scratch.org;"))
  (add-to-list 'eshell-command-aliases-list (list "apt-all" "aptitude search ~i"))

  (defalias 'ff  'find-file)
  (defalias 'ffo 'find-file-other-window)
  (eshell-printn "------- eshell-command-aliases-list")
  (eshell-printn eshell-command-aliases-list)
  (eshell-printn "------- eshell-mode-map")
  (eshell-printn eshell-mode-map)
 )
)



;; aptitude doesn't echo into eshell buffer :(

;; (add-to-list 'eshell-command-aliases-list (list "hgg"   "cat ~/history/commands/history* | grep -i $*"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"/home/kleyn/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); echo $eshell-history-file-name; (eshell-write-history); cp $eshell-history-file-name $es_hstFile; cat $es_hstFile"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"/home/kleyn/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); echo $es_hstFile; (eshell-write-history es_hstFile); cat $es_hstFile"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"/home/kleyn/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); echo $eshell-history-file-name; cp $eshell-history-file-name $es_hstFile; cat $es_hstFile"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"/home/kleyn/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); history > $es_hstFile; cat $es_hstFile;"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    (concat "(setq es_hstFile " "/home/kleyn/history/commands/history_eshell_" (format-time-string "%Y%m%d-%H%M" (current-time)) ".lst)" "; history > $es_hstFile; cat $es_hstFile;")))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"/home/kleyn/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); history > $es_hstFile; cat $es_hstFile;"))
;; (add-to-list 'eshell-command-aliases-list (list "hs"    "(setq es_hstFile (concat \"~/history/commands/history_eshell_\" (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\")); history > $es_hstFile; cat $es_hstFile;"))
;; https://emacs.stackexchange.com/questions/27849/how-can-i-setup-eshell-to-use-ivy-for-tab-completion

(defun save-eshell-history ()
  (interactive)
   (setq es_hstFile (concat "/home/kleyn/history/commands/history_eshell_" (format-time-string "%Y%m%d-%H%M" (current-time)) ".lst"))
   (eshell-write-history)
   (eshell-write-history)
   (copy-file "/home/kleyn/.emacs.d/eshell/history" es_hstFile)
   es_hstFile)

(setq eshell-prompt-function (lambda () (concat ":: "))
      eshell-prompt-regexp "^:: "
)

(setq eshell-prompt-function
       (lambda ()
         (setq dts (format-time-string "%Y%m%d%H:%M" (current-time)))
         (concat (substring dts 0 8)
                 "|" (propertize (substring dts 8) 'face `(:foreground "green"))
;;                 "|" (car (last (split-string (getenv "VIRTUAL_ENV") "/")))
                 "|" (propertize (substring (pwd) 10) 'face `(:foreground "green"))
                 "\n:: "))

    eshell-prompt-regexp "^:: "
)


;; eshell-prompt-regexp "^[^:]*:: "
;; (if (= (user-uid) 0) " :: " " :: ")
;; (if (= (user-uid) 0) " \n:: " " \n:: ")))
;;eshell-prompt-regexp "^::.*\n:: "

(add-hook 'eshell-mode-hook '(lambda () (define-key eshell-mode-map (kbd "C-<tab>")  'pcomplete-std-complete)))
(add-hook 'eshell-mode-hook '(lambda () (define-key eshell-mode-map (kbd "C-a")      'eshell-prompt-bol)))

(defun eshell-prompt-bol ()
  (interactive)
  (beginning-of-line)
  (forward-char (length ":: ")))

;; (add-hook 'eshell-mode-hook '(lambda () (define-key eshell-mode-map (kbd "C-<tab>")  (lambda () (interactive) (pcomplete-std-complete)))))

(defun save-eshell-terminal ()
  "Clone the current buffer writing it into FILENAME and open it"
  (interactive "FClone to file: ")
  (setq eshellFname (concat "/home/kleyn/history/eshell_term/eshell_buffer_" (format-time-string "%Y%m%d-%H:%M" (current-time)) ".log"))
  (save-restriction
    (widen)
    (write-region (point-min) (point-max) eshellFname nil nil nil 'confirm))
  (find-file-noselect eshellFname))

(message "-------------- Done: Eshell Section")
#+END_SRC

(emacs-pid)
(setq eshell-prompt-regexp (concat "^20[0-9][0-9].*\n" (regexp-quote "$") ": "))
(if (= (user-uid) 0) " \n#::" " \n$::"))))
(setq eshell-prompt-regexp  "^\$:")
(setq eshell-cmpl-cycle-completions nil)
eshell-prompt-regexp (concat "^" (regexp-quote "$")


(mapconcat 'identity '("a" "b" "c") ",")
(mapconcat 'identity (reverse (butlast (reverse (list "home ""kleyn" "projects" )) 3)) "/")


(add-to-list 'eshell-command-aliases-list (list "gitst"  "git rev-parse --abbrev-ref HEAD;
                                                          git config branch.$(git rev-parse --abbrev-ref HEAD).description;
                                                          git status -uno --ahead-behind;
                                                          git log -n 10 --pretty=oneline --abbrev-commit --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)';
                                                          git branch -v;
                                                          echo '';
                                                          git stash;"))

(add-to-list 'eshell-command-aliases-list (list "doBackup"
    (setq  (concat /data/data/com.termux/files/home/internalBackup/ (format-time-string \"%Y%m%d-%H%M\" (current-time)) \".lst\"))
    find ~/        -name '.#-emacs*' -exec rm -v {} \;
    find ~/MyDocs/ -name '.#-emacs*' -exec rm -v {} \;
    mkdir -p $budir
    cp -r $frootDir/MyDocs/aNotes   $budir
    cp -r $frootDir/MyDocs/Personal $budir
    cp -r $frootDir/MyDocs/projects $budir
    cp -r $frootDir/dot             $budir
    tar -czvf - $frootDir/gitio >   $budir/gitio.tgz
    du -sm $frootDir/internalBackup/*
))

;;-------------------------------------------------------------------------------- eshell
;(eshell/alias "ff" "find-file $1")
;(eshell/alias "fw" "find-file-other-window $1")
;(eshell/alias "fr" "find-file-other-frame $1")

(add-to-list 'eshell-command-aliases-list (list "rgrepy "python L:\\MyDocs\\ubin\\py\\rgrep.py"))
(add-to-list 'eshell-command-aliases-list (list "rgrep" "echo \"1=$1\";
                                                        "dosPath=$(cygpath -m $1)"
                     echo "DOSPATH $dosPath";
                     echo "2=$2"
                     echo "3=$3"
                     echo "grep --color=auto -ir --include=$2 $3 $1;"
                     # echo "grep -e --color=auto -ir --include=$2 $3 $1;"  -e is different!!!!
                     grep --color=auto -ir --include="$2" "$3" "$1" ; }

;;(defalias 'open 'find-file)
;;(defalias 'openo 'find-file-other-window)
;;(defun eshell/gits ()   (find-file file))
;;(setq eshell-command-aliases-list (("gits" #("git status" 0 10 (escaped t)))))

alias ll ls -l $*
(setq ecal_copy (copy-list eshell-command-aliases-list))
TBD fix $(git...) doesn't work in eshell
alias gits echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git status
alias ll ls -l $*
alias gitbd='git branch --edit-description'
alias gitbm='git branch --merged'
alias gitbnm='git branch --no-merged'
alias gitcln='git clone'
alias gitf='git fetch'
alias gitg='git grep'
alias gitmv='git mv'
alias gitpl='git pull'
alias gitps='git push'
alias gitr='git reset -p'
alias gitreps='git remote -v'
alias gitrm='git rm'
alias gits='echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git status; git stash list'
alias gitsb='git show-branch'

eshell-command-result
(setq foo (eshell-command-result "git rev-parse --abbrev-ref HEAD"))
eshell-read-aliases-list

prompt
    ;; Change the default eshell prompt
    (setq eshell-prompt-function
          (lambda ()
             (concat "[" (getenv "USER") "@" (getenv "HOSTNAME") "] "
              "(" (format-time-string "%a %b %e %l:%M %p") ") "
              (eshell/pwd) (if (= (user-uid) 0) " # " " $ "))))

 (defun ted-eshell-prompt ()

  (defun eshell/less (&rest args)
    "Invoke `view-file' on a file. \"less +42 foo\" will go to line 42 in
    the buffer for foo."
    (while args
      (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
          (let* ((line (string-to-number (match-string 1 (pop args))))
                 (file (pop args)))
            (tyler-eshell-view-file file)
            (goto-line line))
        (tyler-eshell-view-file (pop args)))))

  (defalias 'eshell/more 'eshell/less)

* ESHELL TBD


1.2 Code snippet (from emacswiki and other website)
add below to your .emacs

1.2.1 setting up environment related variable
1:  (require 'eshell)
2:  ;; setting up environment related variable in eshell
3:  (setenv "JAVA_HOME" "/usr/local/java")
4:  (setenv "CATALINA_HOME" "/var/lib/tomcat4")
5:  (setenv "LC_ALL" "C")
6:  (setenv "PATH" "/usr/local/java/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/home/gnmk/bin")
7:  (setenv "LANG" "en_US.UTF8")
8:  (setenv "EDITOR" "emacsclient")

1.2.2 eshell history size and saving history while exit.
1:  (setq eshell-history-size 20000)
2:  (setq eshell-save-history-on-exit t)
3:  (setq eshell-hist-ignoredups t)
4:  (setq eshell-cmpl-cycle-completions nil)

1.2.3 scroll to the bottom
1:  (setq eshell-scroll-to-bottom-on-output t)
2:  (setq eshell-scroll-show-maximum-output t)

1.2.4 run top/ps from eshell, require term to be open
 1:  (eval-after-load 'esh-opt
 2:    '(progn
 3:       (require 'em-cmpl)
 4:       (require 'em-prompt)
 5:       (require 'em-term)
 6:       (add-hook 'eshell-mode-hook '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-bol)))
 8:       (add-to-list 'eshell-visual-commands "ssh")
 9:       (add-to-list 'eshell-visual-commands "tail")
10:       (add-to-list 'eshell-visual-commands "top")
11:       (add-to-list 'eshell-command-completions-alist '("gunzip" "gz\\'"))
13:       (add-to-list 'eshell-command-completions-alist '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))
15:       (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)))

1.2.6 eshell short and long prompt on request (from emacswiki)
 1:  ;; Returns the short propmpt string for eshell
 2:  (defun eshell-prompt-function-short ()
 3:    "Makes a short eshell prompt to avoid moving out of the buffer
 4:      window boundary"
 5:    (let* ((pwd (eshell/pwd))
 6:           (pwdlst (split-string pwd "/"))
 7:           (rpwdlst (reverse pwdlst))
 8:           (base (car rpwdlst)))
 9:      (concat (if (string= base "")
10:                  "/"
11:                (if (cdr pwdlst) "<...> /" ""))
12:              base
13:              (if (= (user-uid) 0) " # " " $ "))))
14:
15:  ;; Returns the long prompt string for eshell
16:  (defun eshell-prompt-function-long ()
17:    "Makes a long standard eshell prompt"
18:    (concat (format-time-string "%l:%M %p") "| "
19:            (getenv "USER") "@" (getenv "HOSTNAME") ":"
20:            (eshell/pwd) (if (= (user-uid) 0) " # " " $ ")))
21:
22:  (setq eshell-prompt-function
23:        'eshell-prompt-function-long)
24:
25:  (defun eshell/sprompt ()
26:    "Makes a short eshell prompt to avoid moving out of the buffer
27:        window boundary (link to eshell-prompt-function-short)"
28:    (setq eshell-prompt-function
29:          'eshell-prompt-function-short))
30:
31:  (defun eshell/lprompt ()
32:    "Makes a long standard eshell prompt (link to
33:        eshell-prompt-function-long)"
34:    (setq eshell-prompt-function
35:          'eshell-prompt-function-long))

(defun eshell/clear()        "clear the eshell buffer"  (interactive) (let ((inhibit-read-only t))  (erase-buffer)))
(defun eshell/emacs(file)    "find-file alias"      (find-file file))
(defun eshell/w3m(file)      "w3m-find-file alias"  (w3m-find-file file))
(defun eshell/info()         "info alias"           (info))
(defun eshell/einfo()        "Display emacs manual" (info-emacs-manual))
(defun eshell/ll(&rest args) "ls -alh alias"        (eshell/ls "-alh" args))
(defun eshell/la(&rest args) "ls -a alias"          (eshell/ls "-a" args))

1.2.12 convert ansi color faces in eshell
 1:  ;; This will transform ansi color to faces in Emacs shell!
 2:  (ansi-color-for-comint-mode-on)
 3:  (defun eshell-handle-ansi-color ()
 4:    (ansi-color-apply-on-region eshell-last-output-start
 5:                                eshell-last-output-end))
 6:  (add-hook 'eshell-mode-hook
 7:            '(lambda ()
 8:               (add-to-list
 9:                'eshell-output-filter-functions
10:                'eshell-handle-ansi-color)))

1.2.13 compile process in background
 1:  ;;Here’s how to compile in the background, also by Kai.
 2:  (defun eshell/ec (&rest args)
 3:    "Use `compile' to do background makes."
 4:    (if (eshell-interactive-output-p)
 5:        (let ((compilation-process-setup-function
 6:               (list 'lambda nil
 7:                     (list 'setq 'process-environment
 8:                           (list 'quote (eshell-copy-environment))))))
 9:          (compile (eshell-flatten-and-stringify args))
10:          (pop-to-buffer compilation-last-buffer))
11:      (throw 'eshell-replace-command
12:             (let ((l (eshell-stringify-list (eshell-flatten-list args))))
13:               (eshell-parse-command (car l) (cdr l))))))
14:  (put 'eshell/ec 'eshell-no-numeric-conversions t)

Type ec <command> from eshll prompt will open another buffer with command output/status.
(print foo) === echo $foo
eshell-parse-command 'ls -l'



* Faded
(global-set-key [C-kp-add]      'text-scale-increase)
(global-set-key [C-kp-subtract] 'text-scale-decrease)       ;; with a C-0 prefix argument.

;;---------------------------------------------------------------------- SGML XML
;C-c C-v        sgml-validate
;C-M-h          sgml-mark-current-element
;C-c C-u C-a    sgml-unfold-all
;C-c C-u C-e    sgml-unfold-element
;C-c C-f C-e    sgml-fold-element
;(require 'psgml)
;(add-to-list 'auto-mode-alist '("\\.xml$"     . psgml-mode)   )
;(setq load-path (append load-path '("/home/uri03204/ulib/emacs/psgml-1.3.2"))) ;; (insert (format "%s" load-path))
;(load-library "psgml")
(setq sgml-basic-offset 2)
(autoload 'xml-mode "psgml" "Major mode to edit XML files." t)
(add-hook 'xml-mode-hook                ; XML-specific settings
  (function (lambda()
              (make-face 'sgml-comment-face) ; faces creation
              (make-face 'sgml-start-tag-face)
              (make-face 'sgml-end-tag-face)
              (make-face 'sgml-doctype-face)
              (set-face-foreground 'sgml-comment-face "SeaGreen") ; faces definitions
              (set-face-foreground 'sgml-start-tag-face "DarkBlue")
                                ;(set-face-foreground 'sgml-end-tag-face "OrangeRed")
                                ;(set-face-foreground 'sgml-doctype-face "MintCream") ; markup to face mappings
                                ; (see http://www.lysator.liu.se/~lenst/about_psgml/psgml.html#Highlight for details)
              (setq sgml-markup-faces
                    '((comment   . sgml-comment-face)
                      (start-tag . sgml-start-tag-face)
                      (end-tag   . sgml-end-tag-face)
                      (doctype   . sgml-doctype-face) ) )
              (local-set-key [S-left]  'sgml-fold-element)
              (local-set-key [S-right] 'sgml-unfold-element)
              ; sgml-fold-element  sgml-unfold-element
              ; sgml-fold-region
              ; sgml-fold-subelement
              ; sgml-unfold-all
              ; sgml-unfold-line
              (setq sgml-set-face t) ; turn faces on
              (setq sgml-indent-data t))))
; 3 bottom keys of keypad, upper 6 are work 6 virtual screens
;; (global-set-key [S-M-kp-down] 'sgml-fold-subelement)
;; (global-set-key [S-M-kp-end]  'sgml-fold-element)   ;  fold everything below current element
;; (global-set-key [S-M-kp-next] 'sgml-unfold-element)


* end bit
;(desktop-change-dir "/home/uri03204/myDocs/config")

#+BEGIN_SRC emacs-lisp
(dired "~/")
;(ztree-dir "/data/data/com.termux/files/home")
(put 'narrow-to-region 'disabled nil)
;;(server-start)
(setq password-cache-expiry nil)
(message "dotEmacs.org done")
(switch-to-buffer "*Messages*")
#+END_SRC

;custom-set-variables and custom set faces in ~/.emacs.d/init.el

#+STARTUP: fold



