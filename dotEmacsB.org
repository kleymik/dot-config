
  
* Markup Languages
#+BEGIN_SRC emacs-lisp-not
;;------------------------------------------------------------------------------ XML
;;{{{ XML

;; loading script
;; (load (concat emacs-dir "nxml-mode/rng-auto.el"))
;; (when (locate-library "nxml-mode")
;;   (progn
;;     ;; file types
;;     (add-to-list 'auto-mode-alist
;; 		 (cons (concat "\\." (regexp-opt '("xml"
;; 						   "html"
;; 						   "xul"
;; 						   "xsd"
;; 						   "sch"
;; 						   "rng"
;; 						   "xslt"
;; 						   "svg"
;; 						   "rss"
;; 						   "asp"
;; 						   "aspx"
;; 						   "zpt"
;; 						   "cpt"
;; 						   "pt") t) "\\'")
;; 		       'nxml-mode))
;;     ;; spaces insted of tabs
;;     (add-hook 'nxml-mode-hook
;; 	      (lambda () (setq indent-tabs-mode nil)))
;;    ))

;;}}}
;;---------------------------------------------------------------------- SGML XML
;C-c C-v	sgml-validate
;C-M-h		sgml-mark-current-element
;C-c C-u C-a	sgml-unfold-all
;C-c C-u C-e	sgml-unfold-element
;C-c C-f C-e	sgml-fold-element
;(require 'psgml)
;(add-to-list 'auto-mode-alist '("\\.xml$"     . psgml-mode)   )
;(setq load-path (append load-path '("/home/uri03204/ulib/emacs/psgml-1.3.2"))) ;; (insert (format "%s" load-path))
;(load-library "psgml")
(setq sgml-basic-offset 2)
(autoload 'xml-mode "psgml" "Major mode to edit XML files." t)
(add-hook 'xml-mode-hook		; XML-specific settings
  (function (lambda()
	      (make-face 'sgml-comment-face) ; faces creation
	      (make-face 'sgml-start-tag-face)
	      (make-face 'sgml-end-tag-face)
	      (make-face 'sgml-doctype-face)
	      (set-face-foreground 'sgml-comment-face "SeaGreen") ; faces definitions
	      (set-face-foreground 'sgml-start-tag-face "DarkBlue")
				;(set-face-foreground 'sgml-end-tag-face "OrangeRed")
				;(set-face-foreground 'sgml-doctype-face "MintCream") ; markup to face mappings
				; (see http://www.lysator.liu.se/~lenst/about_psgml/psgml.html#Highlight for details)
	      (setq sgml-markup-faces
		    '((comment   . sgml-comment-face)
		      (start-tag . sgml-start-tag-face)
		      (end-tag   . sgml-end-tag-face)
		      (doctype   . sgml-doctype-face) ) )
	      (local-set-key [S-left]  'sgml-fold-element)
	      (local-set-key [S-right] 'sgml-unfold-element)
;sgml-fold-element  sgml-unfold-element
;sgml-fold-region
;sgml-fold-subelement
;sgml-unfold-all
;sgml-unfold-line
	  (setq sgml-set-face t) ; turn faces on
          (setq sgml-indent-data t))))
; 3 bottom keys of keypad, upper 6 are work 6 virtual screens

;;--------------------------------------------------------------------------------nXML mode
;(add-to-list 'hs-special-modes-alist
;             '(sgml-mode
;               "<!--\\|<[^/>]*[^/]>"                    ;; regexp for start block
;               "-->\\|</[^/>]*[^/]>"                    ;; regexp for end block
;
;               "<!--"                                   ;; regexp for comment start. (need this??)
;               sgml-skip-tag-forward
;               nil))
; I tried using outline mode to fold blocks, as someone posted earlier,
; but had no luck with it. Here's something quick and (very) dirty that
; I whipped together using hideshow mode:

; (defun my-nxml-mode-hook ()
; "Functions to run when in nxml mode."
; (setq nxml-sexp-element-flag t)
; (hs-minor-mode 1))

; (add-hook 'nxml-mode-hook 'my-nxml-mode-hook)

; (eval-after-load "hideshow.el"
; (let ((nxml-mode-hs-info '(nxml-mode ("^\\s-*\\(<[^/].*>\\)\\s-*$" 1) "^\\s-*</.*>\\s-*$")))
; (when (not (member nxml-mode-hs-info hs-special-modes-alist))
; (setq hs-special-modes-alist
; (cons nxml-mode-hs-info hs-special-modes-alist)))))

; If anyone comes up with a better set of regexps, please post them!

#+END_SRC


* Bing, White Space, ZeeTree
#+BEGIN_SRC elisp
;;--------------------------------------------------------------- Bing
;; bing!
;     "http://www.bing.com/search?q="
;; (defun goog ()
;;   (interactive)
;;   (browse-url (concat "http://www.google.com/search?hl=en&q=" (if mark-active
;; 									 (buffer-substring (region-beginning) (region-end))
;; 								       (read-string "Goog: ")))))

;;------------------------------------------------------------- white space
;; (setq show-trailing-whitespace 1)
;;(setq show-trailing-whitespace t) local buffer only
(defun tog-whitespace ()
  "Toggle show-trailing-whitespace between t and nil"
  (interactive)
  (setq show-trailing-whitespace (not show-trailing-whitespace)))
;; C-c w        delete-trailing-whitespace
;;GNU Emacs 22 or later has library whitespace.el, which lets you highlight whitespace in several ways. See WhiteSpace.
;--------------------------------------------------------------- ZeeTree
;(add-to-list 'load-path "/home/kleyn/ulib/emacs/ztree-master")
;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
;(require 'ztree-diff)
;(require 'ztree-dir)
;local binf to tab (ztree-perform-action)
;Call the ztree-diff interactive function: M-x ztree-diff

(message "dotEmacs.org markup languages section done")
#+END_SRC


* Global Key Bindings
 /			;; self-insert-command
 :			;; self-insert-command
 ??                     ;; package-list-packages
 C-;                    ;; Highlight item for MULTIPLE edit
 C-a			;; move-beginning-of-line
 C-a			;; move-beginning-of-line
 C-b			;; backward-char
 C-ci                   ;; indent-to-column
 C-j                    ;; eval in scratch buffer ?
 C-k			;; kill-line
 C-s			;; isearch-forward
 C-s			;; isearch-forward
 C-u C-space or C-u C-@	;; move back to previous positions (within buffer)
 C-x C-f		;; find-file
 C-x C-space or C-x C-@	;; move back to previous positions (between buffers)
 C-x C-x		;; exchange-point-and-mark
 C-x RTN f unix RTN     ;; dos2unix
 C-x n n; C-x n w       ;; Narrow to Region; Widen
 C-x r s r; C-x r i r   ;; Copy region into register "r" (copy-to-register).    Insert text from register r (insert-register).
 C-x r w w; C-x r j w   ;; Save winows config in register "w" ; jump back (where <register> is a single character) to jump back to it.
 C-y			;; yank
 DEL			;; delete-backward-char
 ESC			;; ESC-prefix
 M-s h f		;; hi-lock-find-patterns 	       Searches for Hi-Lock patterns in the buffer to use.
 M-s h l		;; highlight-lines-matching-regexp     Highlights all lines matching a regular expression
 M-s h p		;; highlight-phrase 	               Highlights everything matching a phrase
 M-s h r		;; highlight-regexp 	               Highlights everything matching a regular expression
 M-s h u		;; unhighlight-regexp 	               Deletes the highlighter under point
 M-s h w		;; hi-lock-write-interactive-patterns Inserts a list of Hi-Lock patterns into the buffer
 RET			;; newline
 w			;; self-insert-command

(global-set-key "\C-c<"		'selective-display-level-decr)
(global-set-key "\C-c>"		'selective-display-level-incr)
(global-set-key "\C-cb"		'ediff-buffers)
(global-set-key "\C-cd"		'ediff-directories)
(global-set-key "\C-ch"		'diredHome)
(global-set-key "\C-ci"		'indent-to-col)
(global-set-key "\C-cl"		'ed-dup-line)
(global-set-key "\C-cq"		'lines-to-cslist)
(global-set-key "\C-cr"		'auto-revert-tail-mode)

(global-set-key "\C-cs"		'parallel-swap)
(global-set-key "\C-ct"		'org-table-convert-region)
(global-set-key "\C-cw"		'delete-trailing-whitespace)
(global-set-key "\C-xd"         'dired)
(global-set-key "\C-xi"         'eval-print-last-sexp) ; ielm
(global-set-key "\C-xl"		'list-matching-lines)
(global-set-key "\C-xt"		'instimestamp)
(global-set-key "\C-z"		'undo) ; replace-string
(global-set-key "\M-$"		'query-replace-regexp)
(global-set-key (kbd "C-.")     'repeat)
(global-set-key [(next)]        'cycle-buffer)
(global-set-key [(prior)]       'cycle-buffer-backward)


(global-set-key [C-down]        'windmove-down)        ;(global-set-key (kbd "C-c <down>")  'windmove-down)
(global-set-key [C-insert]      'clipboard-kill-ring-save)
(global-set-key [C-kp-add]      'text-scale-increase)
(global-set-key [C-kp-subtract] 'text-scale-decrease) ;; with a C-0 prefix argument.
(global-set-key [C-left]        'windmove-left)        ;(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key [C-right]       'windmove-right)       ;(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key [C-up]          'windmove-up)          ;(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key [M-home]	'org-collapse)
(global-set-key [S-down]        'scroll-one-line-up)
(global-set-key [S-f7]          'buffer-menu-sort-by-filename)
(global-set-key [S-f8]          'dired-omit-mode)
(global-set-key [S-insert]      'clipboard-yank)
(global-set-key [S-kp-4]        'selective-display-level-decr)
(global-set-key [S-kp-5]        'selective-display-level-zero)
(global-set-key [S-kp-6]        'selective-display-level-incr)
(global-set-key [S-left]        'window-hshrink)
(global-set-key [S-right]       'window-hwiden)
(global-set-key [S-up]          'scroll-one-line-down)


(global-set-key [end]           'kill-this-buffer-volatile)
(global-set-key [f10]           'see-shell-output) ;ergoemacs-open-in-external-app
(global-set-key [f11]           'hs-show-block)
(global-set-key [f12]           'hs-hide-block)
(global-set-key [f1]            'see-logbook1)
(global-set-key [f2]            'see-logbook2)
(global-set-key [f3]            'nok900) ; my-openfile  'neotree-show
(global-set-key [f4]            'desktop-save)
(global-set-key [f5]            'ffap) ; bookmark-bmenu-list
(global-set-key [f6]            'ergoemacs-open-in-external-app)
(global-set-key [f7]            'my-list-buffers)
;(global-set-key [f8]            'ztree-dir)
(global-set-key [f9]		'ielm)  ;; open file under cursor
(global-set-key [kp-divide]     'toggle-window-split)
(global-unset-key "\C-x\C-c")                            ;; ;;; don't quit so easily

(message "dotEmacs.org keybindings section done")
#+END_SRC
;(global-set-key "\C-x\C-c\C-v"  'save-buffers-kill-emacs) ;; But we establish a longer sequence that is harder to hit by accident:

;(define-key global-map "\C-co" 'org-capture)
;(global-set-key "\C-!"         'shell-command) TBD
;(global-set-key "\C-q"		'quoted-insert)
;(global-set-key [C-kp-insert]  'kill-ring-save)
;(global-set-key [M-up]	        'other-window)
;(global-set-key [S-kp-insert]  'yank)
;(global-unset-key (kbd "C-q"))
;(global-set-key [S-M-kp-down] 'sgml-fold-subelement) ;; ; M-kp ... conflicts with workspace navigation:
;(global-set-key [S-M-kp-end]  'sgml-fold-element)   ;  fold everything below current element
;; (global-set-key [S-M-kp-next] 'sgml-unfold-element)
;;(global-set-key [M-return]		'ffap)  ;; open file under cursor


* ESHELL
#+BEGIN_SRC emacs-lisp
;;(defalias 'open 'find-file)
;;(defalias 'openo 'find-file-other-window)
;;(defun eshell/gits ()   (find-file file))
;;(setq eshell-command-aliases-list (("gits" #("git status" 0 10 (escaped t)))))
#+END_SRC
alias ll ls -l $*
TYBD fix $(git...) doesn't work in eshell
alias gits echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git status
alias gitb git branch -av
alias gita git add
alias cl cd $*; ls
alias hs history
alias ll ls -l $*


* End bit
#+BEGIN_SRC emacs-lisp
;;-------------------------------------------------------------------------------
;(dired "/home/kleyn" nil)
;(desktop-change-dir "/home/uri03204/myDocs/config")

(put 'narrow-to-region 'disabled nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(display-time-mode t)
 '(matlab-auto-fill nil)
 '(matlab-fill-code nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "bisque" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 102 :width normal :foundry "bitstream" :family "Courier 10 Pitch")))))

;;(server-start)

#+END_SRC
