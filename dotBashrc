# MFK bash initialisation
# 20140415_14:13:25 diamond account, but goes all the way back to cs.utexas.edu in the early 1990's
# N.B keep this script idempotent!

echo "bashrc start"
# keep this script separate from from .bashrc add this alias to .bashrc: alias sb='source ~/dot/dotBashrc'

# If not running interactively, don't do anything
# [[ "$-" != *i* ]] && return

# PROMPT ---------------------------------------------------------------------- prompt mangling (see notes at bottom)
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

parse_pyvenv() {
  if [ -z "$VIRTUAL_ENV" ]; then
    echo " "
  else
    echo $(basename $VIRTUAL_ENV)
  fi
}

promptFunc() {
  # right before prompting for the
  # next command, save the previous
  # command in a file. $(hostname)
  echo "$(date +%Y-%m-%d--%H-%M-%S) : $$ : $PWD: $(history 1)" >> ~/history/commands/history_$(date +%Y-w%V)
}

export HISTTIMEFORMAT='%Y%m%d-%T: '
PROMPT_COMMAND=promptFunc
PROMPT_DIRTRIM=20
export VIRTUAL_ENV_DISABLE_PROMPT=1
# export PS1="\e[0;36m=[\h:\u:\$\$]=:\t:\w:\e[m\n>"
# export PS1="\e[0;36m=[\$(parse_git_branch) \$(parse_pyvenv)]=:\t:\w:\e[m\n>\e]0;CWD=\$PWD VENV=\$VIRTUAL_ENV\a"
# add pid to title (doesn't update on prompt)
# echo -ne "\e]0;PID=$$ ::  :: $PWD\a"
# echo -ne "\e]0;CWD=$PWD\a"
#export PS1="\e[0;36m=[ \h:\u:\$\$ ]=:[ \t ]:[ \w ]:\e[m\n>"
#export PS1="\e[0;36m=[\$(parse_git_branch) \$(parse_pyvenv)]=:\t:\w:\e[m\n>"
#export PS1="\e[0;36m[ \h:\u:\$\$ ]:[ \t ]:[ \w ]:\e[m\n>"
export PS1="\e[0;36m[ \h:\u:\$\$ ]:[ \$(parse_pyvenv) ]:[ \t ]:[ \w ]:\e[m\n>"

# ----------------------------------------------------------------------------- sleep and wake
#alias sleepMaxwell='sync && sleep 15 && systemctl suspend -i & xset -display :0.0 dpms force off'
#alias sleepMaxwell='sync && sleep 15 && systemctl suspend -i & xset -display :0.0 dpms force off'
alias sleepMaxwell='sync && sleep 10 && systemctl suspend -i'
#sleep 1 
alias wakeMaxwell='pkill pavucontrol-qt ; pulseaudio -k ; sleep 40 ; pavucontrol-qt &'

# ALIAS ----------------------------------------------------------------------- alias
function ag () {
  declare -f | grep "$@";
  alias      | grep "$@";
}

function al () {
  declare -f | grep "()" | egrep -v '^_|COMPREPLY';
  alias ;
}

# LS -------------------------------------------------------------------------- ls
# Some shortcuts for different directory listings
# or globally export TIME_STYLE=long-iso
# --time-style=long-iso
# alias ls='ls -hF --color=tty'                 # classify files in colour
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias la='ls -A'                              # all but . and ..
# alias l='ls -CF'                              #
alias la='ls -al --color=auto --time-style=long-iso --group-directories-first'
alias lal='ls -lF --group-directories-first'
alias ll='ls -lF --color=auto --time-style=long-iso --group-directories-first'
alias l='stat --printf="%y\t%6s\t%-16n\n" * | cut -b -16,36-'

# HISTORY ---------------------------------------------------------------------- history
export HISTFILE=~/history/commands/history_$(date +%Y%m%d_%H%M).$$
alias h='history 30'
alias hh='history 300'
alias hs='history | tee ~/history/commands/history_`date +%Y%m%d_%H%M` | tail -30'
function hl   () { history | tail -40                                                                     ; }
function hll  () { ls -lrt ~/history/commands | tail -6                                                   ; }
function hg   () { history | grep "$@" | cut -b 8- | sort | uniq                                          ; }
#function hgg () { grep "$@" ~/history/commands/hist*`date +%Y%m*`                                        ; }
function hgg  () { find  ~/history/commands/ -mtime -100 -type f | sort | xargs grep -i "$@" | cut -b 46- ; }
function hggg () { grep "$@" ~/history/commands/*                                                         ; }

# log terminal activity - but messes up the use of this script
function termLog () { script ~/history/termLogs/termLog_"$@"_`date +%Y%m%d_%H%M`; }

# export PROMPT_COMMAND='history -a' # not just yet.. no loger use hl?
# cat changed file of the local eclipse workspace
# function eh   {} { ls -al --time-style=long-iso "$@"/.metadata/.plugins/org.eclipse.core.resources/.history/*/*  | sort -k 6 }
# label history log file with a name
# alias hg='history grep $1 ~/history/bash/hist`date +%Y%m*`'
# alias hhg='grep $1 ~/history/bash/hist*`'
# alias hhhg='grep $1 ~/history/bash/hist*`'

# KILL ------------------------------------------------------------------------ kill
alias kill_hup='kill -1'
alias kill_int='kill -2'
alias kill_term='kill -15'
alias kill_hard='kill -9'
alias killplasma='killall plasmashell; kstart5 plasmashell; exit'

# MISC ------------------------------------------------------------------------ misc
#alias py-ws2345='python -m SimpleHTTPServer 2345 &' # python2
alias pythonDbg='python -m pudb'
alias py-ws2345='python -m http.server 2345'         # python3 
alias py-def-env='source ~kleyn/projects/pyvenvs/envD.D-py39-ml/bin/activate'
alias py-jupyter='cd ~; jupyter notebook';           # ensure http server can see all folders
alias gdaprocs='netstat -tlnp 2>/dev/null | grep java | sort -k 7'
alias jpps='/dls_sw/apps/java/x64/gda842/bin/jps'
alias rd='rdesktop -a 32 -x 0x80 -g 1920x1080 DIAMRL5319 -r sound:remote'
function see () { more `which "$@"`; }
function where () { for a in $(whereis -b "$@"); do echo $a; done }

# ----------------------------------------------------------------------------- hdf5/nexus
alias h5dumpHeaders='h5dump -H'
alias h5dumpContents='h5dump -n'

function rg_nxs () { # $1 = dir; remember to module load nexus
# search nexus files
  for f in $(find $1 -name '*.nxs');
  do echo "----------------------- $f";
   nxtraverse -f $f -r -n 50;
  done;
}

# ------------------------------------------------------------------------------ eclipse
alias kepler='/dls_sw/apps/eclipse/eclipse432_linux64_20140725/eclipse'

#print calendar
#pcal -b all  -P a4 -F 1 -S 2023 > ~/cal_2023.ps

# ------------------------------------------------------------------------------ module
# module avail - list of modules available and their respective directory path
# module list - show a list of the modules currently available in the shell
# module load X or unload X - load or unload a module in the shell, where X is the name of a module
# module show X - show info on a module, where X is a loaded module (usefully shows the path to the module)

# alias gdaFiltServerLog='rep -vF -f ~/ubin/gda_server_filter.txt'
# alias gdaFiltClientLog='rep -vF -f ~/ubin/gda_client_filter.txt'

# GIT ------------------------------------------------------------------------- git
# include git completions
# . ~/.git-completion.bash

# make a branch foo   = git checkout -b foo
# git checkout master = switch back to master
# git diff : git log -p is the only way to get the last commited diff to a given file
# git delete branch -d <thebranch> or -D to force

alias gita='git add'
alias gitb='git branch -av'
alias gitbd='git branch --edit-description'
alias gitbm='git branch --merged'
alias gitbnm='git branch --no-merged'
alias gitc='git checkout'
alias gitcb='git checkout -b '
alias gitcm='git commit -m'
alias gitcl='git clone'
alias gitcln='git clone'
alias gitcln='git clone'
alias gitd='git diff -w --compact-summary'
alias gitdd='git diff -w'
alias gitdi='git diff -w --cached'
alias gitf='git fetch'
alias gitg='git grep'
alias gith='git help'
alias gitl2="git   log -n 20  --pretty=short   --abbrev-commit "
alias gitl3="git   log -n 20  --pretty=medium  --abbrev-commit "
alias gitl="git    log -n 60  --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
alias gitlf="git log -p --follow"
alias gitlg="git   log -n 30  --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --no-merges --all"
alias gitlgg="git  log -n 150 --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold yellow)%d%C(reset)  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'  --all"
alias gitlggt="git log -n 150 --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
alias gitlgm="git  log -n 30  --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias gitll="git   log -n 160 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
alias gitlm="git   log -n 60  --pretty=oneline --abbrev-commit              --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
alias gitmv='git mv'
alias gitpl='git pull'
alias gitps='git push'
alias gitr='git reset -p'
alias gitreps='git remote -v'
alias gitrm='git rm'
alias gitsb='git show-branch'
alias gitsc='git config --list --show-origin'

#alias gits='echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git status; git stash list'
function gits()  { pwd;
                   echo $(git rev-parse --abbrev-ref HEAD);
                   git config branch.$(git rev-parse --abbrev-ref HEAD).description;
                   git branch -v;
                   git status -uno --ahead-behind;
                   echo '';                                      
                   git log -n 10 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)';
                   echo '';                   
                   git worktree list;
                   echo '';
                 }
function gitsa() { echo $(git rev-parse --abbrev-ref HEAD);
                   pwd;
                   git config branch.$(git rev-parse --abbrev-ref HEAD).description;
                   git branch -av;
                   git status -uall --ahead-behind;
                   git log -n 10 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)';
                   git stash list;
                   echo '';
                 }

function gitcfg () {
  # only needed once?
  git config --global core.editor "emacs26 -nw -fg black -bg white1"
  git config --global user.name "Mike Kleyn"
  git config --global user.email michfkl@btinternet.com
  git config --global color.status auto
  git config --global color.branch auto
  # git config --global core.excludesfile ~/.gitignore_global
}

# ------------------------------------------------------------------------------- apps

alias app_open='xdg-open'

#alias tbird='(export LC_TIME=en_DK.UTF-8; /usr/lib/thunderbird/thunderbird )'
#alias ff='firefox  -P default -new-instance 2> /dev/null &'
#alias ffn='firefox -P news    -new-instance 2> /dev/null &'
#alias firefoxfp='flatpak run org.mozilla.firefox'
alias libreOffice='/usr/lib/libreoffice/program/soffice.bin &'

# ------------------------- LD_LIBRARY_PATH for ipopt
## Note Under linux you might need to let the OS know where to look for the Ipopt lib files, e.g. use:
## $ export LD_LIBRARY_PATH=<PATH to Ipopt lib files>
#export LD_LIBRARY_PATH=/usr/local/lib
#export LD_RUN_PATH=/usr/local/lib

# ----------------------------------------------------------------------------- emacs
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient28 -t"                     # $EDITOR opens in terminal
export VISUAL="emacsclient28 -c -s emcsSrvr"         # $VISUAL opens in GUI mode

alias emacsServer='emacs28 --daemon=emcsSrvr -l ~/.emacs.d/init.el'
alias emacsClient='emacsclient28 -c -s emcsSrvr &'

alias emacsNormal='emacs28 -l ~/.emacs.d/init.el'
alias emacs='emacsServer; sleep 2; emacsClient'

#alias emacs='emacs26'
#alias emnw='emacs26 -nw -fg black  -bg white1'
#alias ew='emacsclient -n'
#function emd () { emacsclient -n --eval "(ediff-files \"$1\" \"$2\")" }
#export EDITOR='emacs26 -nw'

#------------------------------------------------------------------------------ cd stuff
function cv   () { builtin cd "$@"; ls --color=auto --format=vertical --time-style=long-iso -lr; }
alias cu='cv ..'
alias cw='cut -b -$COLUMNS'

# ----------------------------------------------------------------------------- process stuff

export NMON=CcdtJr

# ps -ejH
# pstree
# alias ptree='ps -ef --forest'

# get parent and grandparent of process
function pspar() {
    if [[ "$#" == "0" ]]; then
      myPid=$$
    else
      myPid=$1
    fi
    parPid=`ps -ef | awk '$2 ~ /\<'$myPid'\>/ { print $3; }'`
    echo "PARPID=$parPid"
    gparPid=`ps -ef | awk '$2 ~ /\<'${parPid}'\>/ { print $3; }'`
    echo "GPARPID=$gparPid"
    ggparPid=`ps -ef | awk '$2 ~ /\<'${gparPid}'\>/ { print $3; }'`
    echo "GGPARPID=$ggparPid"
    if [[ "$ggparPid" == "0" ]]; then
       pstree $gparPid
    else
       pstree $ggparPid
    fi
}

# grep for process
function psg () { ps -elf  | grep "$@"; }

function psprint(){
   echo "Process id = $1"
   cat /proc/$1/cmdline | sed -e 's/\x0/\n\t/g'
   echo "\n-------open files:"
   lsof -p $1 | egrep -v '\.jar|\.so'
}


# ENV ------------------------------------------------------------------------- env
alias pe='printenv'
function pg   () { printenv | grep "$@"; }
# list out ":"-separated env var vertically, defaults to listing PATH
function evp  () {
    if [[ "$#" == "0" ]]; then
      REF=PATH
    else
      REF=$1
    fi
    echo "XXX $REF XXX"
    # evaluate $REF twice..
    PATHTMP=$(echo ${!REF} | sed "s/ /_/g")
    #echo "PATHTMP=$PATHTMP"
    for p in $(echo $PATHTMP | sed "s/:/ /g")
    do
      echo $p;
    done
}
function evapp  () {
    PATH=$PATH:$1
    echo $PATH
}
function evprp  () {
    PATH=$1:$PATH
    echo $PATH
}
function evrm  () {
    # use = instead of / to in sed replacement expr
    PATH=$(echo $PATH | sed s=$1==)
    echo $PATH
}

alias myPath='echo $PATH'

# PRINTING -------------------------------------------------------------------- printing
# doesn't work as one-liner def
# function enscPort   () { enscript                       -c            -T 3 -P dh.g.51.col.1  --font=Courier$@ }
# function enscPortBw () { enscript                       -c            -T 3 -P dh.g.51.bw.1   --font=Courier$@ }
# function enscLand   () { enscript                       -cr           -T 3 -P dh.g.51.col.1  --font=Courier$@ }
# function enscLandBw () { enscript                       -cr           -T 3 -P dh.g.51.bw.1   --font=Courier$@ }
# function enscpy     () { enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.col.1  --font=Courier$@ }
# function enscpyBw   () { enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.bw.1   --font=Courier$@ }
# function enscjav    () { enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.col.1  --font=Courier$@ }
# function enscjavBw  () { enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.bw.1   --font=Courier$@ }

# -MA3  media
#enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html
#  719  enscript --pretty-print=python gda.py --language=html --color=true --output=gda.py.html
#  720  enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html
#  721  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 --output=gda.py.html
#  722  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 -P dh.g.51.col.1

# READLINE -------------------------------------------------------------------- readline bind keyboard shortcuts
# bind: 1) insert pwd; 2) expand line 3) e-x-ecute date command
bind '"\ep": "${PWD}"'
bind '"\ee": "\e\C-e"'
bind '"\er": reverse-search-history'
# bind -x '"\ed":"date +%Y%m%d_%H%M"'  conflict with emacs delte word
# bind: insert end of pwd
# bind '"\ee": "${PWD##*/}"'
# expand "\e\C-e"
# bind -x '"\eW":"who"'
# alias bk='bind -p | grep \'"\\e\' ; bind -p | grep \'"\\e'\'
# bind -p | grep '\\ed'
# "\ed": kill-word
# bind '"\ed": kill-word'  <- this is the fix
# bind -p | grep '\\e' | grep d  | grep -v lower | grep -v digit

# FIND/GREP ------------------------------------------------------------------- find/grep

# COLOR GREP  ---------------------------------------------------------------------- Colors
alias grep='grep --color=auto'                # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour

function utilFind () {
  #show greps
  echo "-------------------------------------------greps"
  alias | grep grep
  echo 'grep -ir --include \"*.m\" --exclude \"*foo*\" <word> <folder>'
  echo "-------------------------------------------finds"
  alias | grep find
  echo 'for a in $(find . -maxdepth 1 -mindepth 1 -type d); do echo $a; done'
  echo "find -maxdepth 1 -printf '%t %s %p\n'"
  echo "find . -iname '*.pst'  -printf \"%TY-%Tm-%Td %TH:%TM %p %m\n\""
  echo "find .  -type d \( -name media -o -name images -o -name backups \) -prune -o -print"
  echo "find .  -type d \( -name ./media -o -name ./images -o -name ./backups \) -prune -o -print"  
  echo "-------------------------------------------"
}


#find .  -type d \( -name media -o -name images -o -name backups \) -prune -o -print

#  find while excluding multiple directories
# find .  -type d \( -name media -o -name images -o -name backups \) -prune -o -print
# find . - Find all files in this directory (.)
#    -type d - directory or folder
#    -prune - ignore the proceding path of ...
#     \( -name media -o -name images -o -name backups \)
#    - The -o simply means OR
#    -print - Then if no match print the results, (prune the directories and print the remaining results)

# As always in Linux there are many ways to achieve the same result, and
# the patient may prefer to build up the find command using the path
# attribute. Please note that you may need to specify the path with a
# prefix of "./" and no trailing slash.
#
# find . -path './media' -prune -o -path './images' -prune -o -path './backups' -prune -o -print
#
# An important difference here is that the first command will prune ANY
# directory in the path that matches the name, such as './media' and
# './public/media', where as the second format will only prune the
# explict path './media'.


alias gr='egrep -i'
alias gv='egrep -iv'
alias rg=~/ubin/,rgrep.py

function rgrep()  { echo "1=$1"
                    echo "2=$2"
                    echo "3=$3"
                    echo "grep --color=auto -r --include=$2 $3 $1;"
                    # echo "grep -e --color=auto -r --include=$2 $3 $1;"  -e is differrent!!!!
                    grep --color=auto -r --include="$2" "$3" "$1" ;
                  }
function rgrepi() { echo "1=$1"
                    echo "2=$2"
                    echo "3=$3"
                    echo "grep --color=auto -r --include=$2 $3 $1;"
                    # echo "grep -e --color=auto -r --include=$2 $3 $1;"  -e is differrent!!!!
                    grep --color=auto -ir --include="$2" "$3" "$1" ;
                  }

# alias fd=find
# find with exclusion
function fd() {
     echo "Numargs=$# : $@ : ${@:3}"
     if [[ "$#" -le "2" ]]; then
      echo "fd \$1=dir \$2=pat"
     else
       find $1 -iname $2
       echo "status=$?"
     fi
}

function fe() {
     echo "Numargs=$# : $@"
     if [[ "$#" == "0" ]]; then
      echo "fe \$1=exludeDir \$2=searchPat"
     else
       # find . -type d -name $1 -prune -or -print -and -iname $2
       find . -type d -name $1 -prune -or -iname $2
     fi
}

function recent() {
     echo "Numargs=$# : $@"
     if [[ "$#" != "1" ]]; then
      echo "recent \$1=dir"
     else
           find $1 -mtime -1
     fi
}

function tstArgs() {
     if [[ "$#" == "0" ]]; then
      echo "No Args"
     else
      echo "Argnum=$# Args: $@"
     fi
}



# ----------------------------------------------------------------------------- start jobs
#  firefox &
#  emacs &
#  krdc &
function startJobs () {
  (microsoft-edge &)
  (sleep 5) && (thunderbird &)
  (sleep 5) && (chromium-browser &)
  (sleep 5) && (pavucontrol-qt &)
}

alias weather='curl wttr.in/oxford'

# manipulate symlink - "repoint"
function rp(){
    echo "repoint existing link arg1 -> arg2"
    if [[ "$#" == "2" ]]; then
        if [[ -h $1 ]]; then
            # echo "rm $1"
            rm -v $1
            # echo "ln -s $2 $1"
            ln -vs $2 $1
        else
            echo "file $1 is not a symlink"
        fi
    else
        echo "Argnum=$# Args: $@"
    fi
}

# ----------------------------------------------------------------------------- misc/old
# x windows mutiwindow
# alias sxw='startxwin'

# alias pyana='setenv PATH $PATH
# $echo $PATH
# drive/c/Program Files/TortoiseSVN/bin:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda/Scripts:/cygdrive/C/Users/kleyn/myDocs/ubin
# subversion
alias svns='svn status -v'
alias svnc='svn commit'
alias svnls='svn list -v'
alias svnlg='svn log'
alias svnu='svn update'
alias svna='svn add'
alias svnds='svn diff --summarize'
alias svnd='svn  --diff-cmd "diff" --extensions "-ywbB --width=220 --color" diff'
alias svndd='svn --diff-cmd "diff" --extensions "-ywbB --suppress-common-lines --width=220 --color" diff'

# powershell
# alias pws='powershell.exe - < '

alias forloop='echo "for a in *; do echo \$a; cmd \$a; done"'

# REM ------------------------------------------------------------------------- remoteing
alias remGem='ssh -p 8022 192.168.1.93'
alias remGemWired='ssh -p 8022 192.168.1.161'
alias remCos='ssh -p 8022 192.168.1.209'
alias remAstro='ssh -p 8022 192.168.1.92'
alias remNok='ssh -Y root@192.168.1.187'
alias remTuring='ssh -Y 192.168.1.180'
alias remCauchy='ssh -Y 192.168.1.107'
#alias remTuringS='screen /dev/ttyS0 38400'
alias remNfsMountEuler='sudo mount.cifs -o username=kleyn,uid=1000,gid=1000 //192.168.1.177/Users/kleyn ~/Euler'
alias remNfsMountMarie='sudo mount.cifs -o username=kleyn,uid=1000,gid=1000 //192.168.1.176/Users/kleyn ~/Marie'
alias apt-all='aptitude search ~i'

# misc
alias utilBlk='lsblk -o NAME,SIZE,TYPE,MOUNTPOINT,LABEL,FSTYPE,UUID'
alias utilUsb='lsusb'
alias utilHw='lshw  | grep product'
alias utilCpu='lscpu | egrep "Model name|Socket|Thread|NUMA|CPU\(s\)"'
alias utilGpu='glxinfo |grep -i -o "device|memory\|[0-9]\{1,12\} MB" |head -n 1'
alias utilInfo='inxi -F'
alias utilNet='ip a | grep inet'
alias utilNetstat='netstat -tlnp'
alias utilLsof='lsof -n -i'
alias utilJobs='jobs -l'
alias utilFuns='declare -F'
alias utilPstree='ps -ef --forest'
alias utilDf='watch -n 1 df -m'
alias utilAllPkgs='dpkg -l | cut -b 5-80'
alias utilLogs='tail -f /var/log/{kern.log,syslog,dmesg,faillog,Xorg.0.log,auth.log}'


# audio of new device
#dmesg -tW -l notice | gawk '{ if ($4 == "Attached") { system("echo New device attached | espeak") } }

# $(id -u) = 1000
# $(id -g) = 1000
# was remSyncToMaxwell on cosmo side
function remSyncFromCosmo () {
  # 1st do important, then all
  cosmoIp=192.168.1.160
  # cosmoIp=192.168.1.209
  echo "cosmoIp=$cosmoIp"
  rsync -lrv -e "ssh -p 8022" --size-only --delete --delete-excluded  \
                  $cosmoIp:/storage/9874-190B/Android/data/com.termux/files/MyDocs/aNotes/  \
    ~/mySystems/cosmo/root/storage/sdCard/Android/data/com.termux/files/MyDocs/aNotes

  rsync -lrv -e "ssh -p 8022" --size-only --delete --delete-excluded --exclude=files/home/.emacs.d/elpa/gnupg \
                  $cosmoIp:/data/data/com.termux/ \
    ~/mySystems/cosmo/root/data/data/com.termux

  rsync -lrv -e "ssh -p 8022" --size-only --delete --delete-excluded \
                       $cosmoIp:/storage/9874-190B/ \
    ~kleyn/mySystems/cosmo/root/storage/sdCard
  # --progress
  # --exclude=/storage
  # rsync -nlrvvv --size-only --delete --delete-excluded --port=8022  u0_a102@192.168.1.160:/storage/9874-190B/Android/data/com.termux/files/MyDocs/aNotes/  ~kleyn/mySystems/cosmo/root/storage/sdCard/Android/data/com.termux/files/MyDocs/aNotes
  # rsync -crv --delete --delete-excluded ~/dcim/   kleyn@192.168.1.89:/home/kleyn/mySystems/gem/dcim
  # rsync -crv --delete --delete-excluded ~/MyDocs/ kleyn@192.168.1.89:/home/kleyn/mySystems/gem/MyDocs
  # rsync -crv --delete --delete-excluded ~/        kleyn@192.168.1.89:/home/kleyn/mySystems/gem
 }

# M$ Windows
export DOTNET_CLI_TELEMETRY_OPTOUT=0

# greeting -------------------------------------------------------------------- greeting
# termLog :( messes up this file

py-def-env
export PYTHONPATH=.:/home/kleyn/ulib/python:$PYTHONPATH

echo ""
echo "PATH-----------------------------------------------------------"
export PATH=$PATH:/home/kleyn/ubin
echo $PATH
echo ""
echo "functions & aliases: al ---------------------------------------"
al
pwd

ls -l ~/history/lastS*
df -h | sort | grep /dev/sd 
du -sm ~/stromatolite/* | sort -n
echo -n "NextCloud number of folders (1385) :"
du ~/stromatolite/ | wc -l
echo -n "NextCloud number of files(29480) :"
find ~/stromatolite/ | wc -l

#------------------------------------------------------------------------------ docs/notes
# edit a given function in situ
#function efn {
#       echo       "function $1" > /tmp/edit_bash_fn
#       declare -f $1            > /tmp/edit_bash_fn
#       emacsnw                    /tmp/edit_bash_fn
#       cat                        /tmp/edit_bash_fn
#       source                     /tmp/edit_bash_fn
#}
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#

# Misc :)
# alias less='less -r'                          # raw control characters
# alias lesss='less -S'                         # trim to screen
# alias whence='type -a'                        # where, of a sort

# ------------------------------------------------------------------------------ Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# ------------------------------------------------------------------------------ Functions
#
# Some example functions:
#
# a) function settitle
# settitle ()
# {
#   echo -ne "\e]2;$@\a\e]1;$@\a";
# }
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# Alias cd=cd_func

# PROMPT MANGLING ----------------------------------------------------------------------------- prompt mangling notes
# PS1="\t:\w:"
# export PS1="\e[0;31m[\u@\h \W]\$ \e[m "
# export PS1="==\d\t:\w:\n>>"
# insert env var [\$FOO]
# use \! for numbering
# PROMPT_DIRTRIM=4  # number of trailing directory components
# export PS1="\e[0;36m==:\t:\w:>\e[m"
# export PS1="\e[0;36m==:\t:\w:\e[m\n>"
# CONDA_DEFAULT_ENV
# colour
# Color Code
# Black 0;30
# Blue  0;34
# Green 0;32
# Cyan  0;36
# Red   0;31
# Purple        0;35
# Brown 0;33
# Blue  0;34
# Green 0;32
# Cyan  0;36
# Red   0;31
# Purple        0;35
# Brown 0;33
# Note: You need to replace digit 0 with 1 to get light color version.
#
#       When  executing  interactively,  bash displays the primary
#       prompt PS1 when it is ready to read  a  command,  and  the
#       secondary  prompt PS2 when it needs more input to complete
#       a command.  Bash allows these prompt strings  to  be  cus­
#       tomized by inserting a number of backslash-escaped special
#       characters that are decoded as follows:
#              \a     an ASCII bell character (07)
#              \d     the date  in  "Weekday  Month  Date"  format
#                     (e.g., "Tue May 26")
#              \e     an ASCII escape character (033)
#              \h     the hostname up to the first `.'
#              \H     the hostname
#              \j     the  number of jobs currently managed by the
#                     shell
#              \l     the basename of the shell's terminal  device
#                     name
#              \n     newline
#              \r     carriage return
#              \s     the  name  of  the shell, the basename of $0
#                     (the portion following the final slash)
#              \t     the current time in 24-hour HH:MM:SS format
#              \T     the current time in 12-hour HH:MM:SS format
#              \@     the current time in 12-hour am/pm format
#              \u     the username of the current user
#              \v     the version of bash (e.g., 2.00)
#              \V     the release of bash,  version  +  patchlevel
#                     (e.g., 2.00.0)
#              \w     the current working directory
#              \W     the  basename  of the current working direc­
#                     tory
#              \!     the history number of this command
#              \#     the command number of this command
#              \$     if the effective UID is 0, a #, otherwise  a
#                     $
#              \nnn   the  character  corresponding  to  the octal
#                     number nnn
#              \\     a backslash
#              \[     begin a sequence of non-printing characters,
#                     which could be used to embed a terminal con­
#                     trol sequence into the prompt
#              \]     end a sequence of non-printing characters
#
