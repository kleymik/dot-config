 # MFK bash initialisation for my schroder account 20160204_14:41:36
echo "bashrc start"
# TBD make idempotent!

# watch
# while true; do
#     sleep 5
#     ls -l
# done
# while true; do ls -l; sleep .5; done
# while sleep 3 ; do ls -l ; done

# one line for loop: "for f in ~/l_rs1/*/.gitignore; do echo $f; done"

#if [[ "$-" == *i* ]]; then  # If running interactively test
if [[ "1" == "1" ]]; then

  # ############################################################################### PROMPT MANGLING (see bottom)
  PROMPT_DIRTRIM=20
  export PS1="\e[0;36m=[\h:\u:\$\$]=:\t:\w:\e[m\n>"
  # add pid to title
  echo -ne "\e]0;PID=$$\a"

  # backup TO C:DRIVE  codews, vc, history, MLINDICES, CITI, MATLABDesktop, cronstuff
  function dataFilesCopy () {
    echo "Files Copy Start..."

    echo "rsync: /LOCAL/USR/MK/codews --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_dataCollectionFI/LOCAL/USR/MK/codews ~/l_C/MyData/backups2/

    echo "rsync: /LOCAL/USR/MK/vc     --> ~/l_C/MyData/backups2/============================"
    rsync.exe -av ~/l_dataCollectionFI/LOCAL/USR/MK/vc     ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/History       --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/history           ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/History       --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/config           ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/dot           --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/dot               ~/l_C/MyData/backups2/

    #echo "rsync: C:MyMaqs             --> /C/MyData/backups2 =============================  cron stuff"
    #rsync.exe -av ~/l_C/MyMaqs                             ~/l_C/MyData/backups2/

    echo "rsync: /C/Users/kleyn*    --> /C/MyData/backups2 =============================  my profiles"
    rsync.exe -av ~/l_C/Users/kleynmi                      ~/l_C/MyData/backups2/profiles
    # rsync.exe -av ~/l_C/Users/kleynmi.SCHRODERSAD          ~/l_C/MyData/backups2/profiles

    #echo "cp: MERRILLS                --> /LOCAL/ML/MLINDICES/ =========================="
    #cp -rnv //lon0302/dfs/DATA/DTA/MLINDICES/* /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/

    #echo "cp: IDL CITI                --> /LOCAL/CITI/ =================================="
    #cp -nv //lon0673/IDL/PRD/DATA/SOURCE/CITI_INDEX/ARCHIVE/* /home/kleynmi/dataCollectionFI/LOCAL/CITI/ 2>&1 | grep -v 'not specified'

    echo "cp: C/Users/kleynmi/AppData/Roaming/MathWorks/MATLAB/R2015b/MATLABDesktop.xml ===="
    cp /home/kleynmi/C/Users/kleynmi/AppData/Roaming/MathWorks/MATLAB/R2015b/MATLABDesktop.xml /home/kleynmi/MyDocs/history/matlabDesktop/MATLABDesktop_$(date '+%Y%m%d').xml

    echo "...Files Copy Done"
    #cp -rv /home/kleynmi/MyDocs/history /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/
    #rsync.exe -rv /home/kleynmi/MyDocs/history /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/
    #cd /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/codews/
    #tar -czvf - . > /home/kleynmi/C/MyData/backups2/usr.mk.codews.tgz
    #tar -cvf /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/codews/maqsTfs.tar . | grep -v '$tf/|/SAM/'
    #tar -cvf - . > /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/maqsTfs.tar    | grep -v '/$tf/'

    #
    echo "Clear asv files========================================="
    find ~/l_vc/ -name '*.asv' -exec ls -ld {} \;
    find ~/l_vc/ -name '*.asv' -exec rm -v {} \;
  }

  function dataFilesCheck () {
   echo "----------------------- //lon0302/dfs/DATA/DTA/MLINDICES"
   ls -lrt //lon0302/dfs/DATA/DTA/MLINDICES | tail -10
   echo -n "NumFiles "
   ls -lrt //lon0302/dfs/DATA/DTA/MLINDICES | wc -l
   echo "-----------------------  dataCollectionFI/LOCAL/ML/MLINDICES/"
   ls -lrt /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/ | tail -10
   echo -n "NumFiles /MLINDICES/"
   ls -lrt /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/ | wc -l
   echo "----------------------- /home/kleynmi/dataCollectionFI/PROD/"
   ls -lrt /home/kleynmi/dataCollectionFI/PROD/ | tail -10
   echo -n "NumFiles /PROD/"
   ls -lrt /home/kleynmi/dataCollectionFI/PROD/ | wc -l
   echo "----------------------- du -sh /home/kleynmi/dataCollectionFI/*"
   du -sm /home/kleynmi/dataCollectionFI/* | sort -n
   echo "----------------------- du -sh /home/kleynmi/dataCollectionFI/LOCAL"
   du -sm /home/kleynmi/dataCollectionFI/LOCAL/* | sort -n

  }

  # ############################################################################### ALIASES, Small Functions
  alias al='declare -f | grep \(\); alias'
  function ag   () {
    declare -f | grep "$@";
    alias      | grep "$@";
  }
  alias af='declare -f | grep \(\)'
  # edit a given function in situ
  #function efn {
  #       echo       "function $1" > /tmp/edit_bash_fn
  #	declare -f $1            > /tmp/edit_bash_fn
  #	emacsnw                    /tmp/edit_bash_fn
  #	cat                        /tmp/edit_bash_fn
  #	source                     /tmp/edit_bash_fn
  #}
  #
  # Some example alias instructions
  # If these are enabled they will be used instead of any instructions
  # they may mask.  For example, alias rm='rm -i' will mask the rm
  # application.  To override the alias instruction use a \ before, ie
  # \rm will call the real rm not the alias.
  #
  # Interactive operation...
  # alias rm='rm -i'
  # alias cp='cp -i'
  # alias mv='mv -i'
  #
  # Default to human readable figures
  # alias df='df -h'
  # alias du='du -h'
  #
  # Misc :)
  # alias less='less -r'                          # raw control characters
  alias lesss='less -S'                           # trim to screen
  # alias whence='type -a'                        # where, of a sort
  # alias grep='grep --color'                     # show differences in colour
  # alias egrep='egrep --color=auto'              # show differences in colour
  # alias fgrep='fgrep --color=auto'              # show differences in colour
  #

  #export PATH=$PATH:/cygdrive/C %programfiles(x86)%/Microsoft Visual Studio 12.0\Common7\IDE
  # ---------------------------------------------------------------------------------------------------For tfs executable
  # !!!!! USE Y-DRIVE !!!!!!!
  # export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio\ 12.0/Common7/IDE/
  # export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017 12.0/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team\ Explorer/
  export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017/Professional/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team\ Explorer/
  export PATH=$PATH:/cygdrive/c/ProgramData/Anaconda3
  export PATH=$PATH:/cygdrive/c/ProgramData/Anaconda3/Scripts
  export PATH=$PATH:/cygdrive/c/ProgramData/Anaconda3/Library/bin

  #1) tf workspaces /collection:"http://tfs/tfs/"
  #2) cd /cygdrive/Y/LOCAL/USR/MK/vc/maqsLatest/AdvancedBeta/
  # !!!!! SET Y-DRIVE !!!!!!!

  #function tfh () {  tf history . /recursive }
  alias myPath='echo $PATH'
  # ensure cwd path is from a drive mapping
  alias tfcd='cd /cygdrive/Y/LOCAL/USR/MK/vc; pwd '
  alias tfdiffd='tf      folderdiff /recursive . | grep -v \$/MAQS |  sed  "/^[[:space:]]*$/d" '
  alias tfdiff='tf       diff /recursive . '
  alias tfw='tf          workspaces '
  alias tfh='tf          history /recursive . | tac'
  alias tfGetLatest='tf  get /recursive . '
  alias tfGetPreview='tf get /recursive /preview .'
  # add dot '.' to end of tf alias command
  # ---------------------------------------------------------------------------------------------------- ls
  # Some shortcuts for different directory listings
  # or glbally export TIME_STYLE=long-iso
  #--time-style=long-iso
  # alias ls='ls -hF --color=tty'                 # classify files in colour
  # alias dir='ls --color=auto --format=vertical'
  # alias vdir='ls --color=auto --format=long'
  alias ll='ls -l --time-style=long-iso'                              # long list
  # alias la='ls -A'                            # all but . and ..
  alias l='ls -CF'                              #
  alias la='ls -al --color=auto --time-style=long-iso'
  alias ll='ls -l --color=auto --time-style=long-iso'
  alias calcsum='paste -sd+ - | bc'
  # export fndDate="-printf '%TY-%Tm-%Td %TT %p\n'"

  # ---------------------------------------------------------------------------------------------------- history
  export HISTFILE=/cygdrive/L/myDocs/history/history.$$.$(date +%Y%m%d_%H%M)
  #export PROMPT_COMMAND='history -a' # not just yet.. no loger use hl?
  #alias h='history 30'
  #alias hf='history 300'
  #alias hs='history | tee /cygdrive/L/MyDocs/history/bash/history_`date +%Y%m%d_%H%M` | tail -30'
  # cat changed file of the local eclipse workspace
  #function eh   {} { ls -al --time-style=long-iso "$@"/.metadata/.plugins/org.eclipse.core.resources/.history/*/*  | sort -k 6 }
  # label history log file with a name
  function hs()      { history | tee /cygdrive/L/MyDocs/history/bash/history_`date +%Y%m%d_%H%M`_$1 | tail -30;  }
  function hg()      { history | grep "$@" | cut -b 8- | sort | uniq; }
  function hgg()     { grep "$@" /cygdrive/L/MyDocs/history/bash/hist*`date +%Y*` | tail -200;  }
  function hggg()    { grep "$@" /cygdrive/L/MyDocs/history/bash/hist*          ;  }
  function termLog() { script /home/kleyn/history/termLogs/termLog_"$@"_`date +%Y%m%d_%H%M`; }
  #findiso()         { find ~/scratchCode/matlab/vc -iname "mapCtryMa*.m" -exec ls -ld --time-style=long-iso {} \; | sort -k 7}

  # CMD: C:/cygwin64/bin/grep.exe -rs --include "*.m" tcostModelTotalLS ~/l_MK/vc/maqs*/*
  # function rgrep () { grep -r --include "*.m" cfg ~/l_MK/vc/maqsLatest/ | grep '~exist'}
  function rgrep() { echo "1=$1"
                     dosPath=$(cygpath -m $1)
                     echo "DOSPATH $dosPath";
                     echo "2=$2"
                     echo "3=$3"
                     echo "grep --color=auto -r --include $2 $3 $1;"
                     grep --color=auto -ir --include "$2" "$3" "$1"; }
  #function rgrep() { ls "$@"}

  alias excel='/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Office/Office16/EXCEL.EXE'
  alias outlook='/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Office/Office16/OUTLOOK.EXE &'

  # ---------------------------------------------------------------------------------------------------- kill
  alias kill_hup='kill -1'
  alias kill_int='kill -2'
  alias kill_term='kill -15'
  alias kill_hard='kill -9'
  alias jobs='jobs -l'
  # ---------------------------------------------------------------------------------------------------- misc
  alias pws2345='python -m SimpleHTTPServer 2345 &'
  alias showFuns='declare -F'
  #alias calc='bc -l <<<'
  function calc () { python -c "from math import *; print($@)"; }
  #alias gdaprocs='netstat -tlnp 2>/dev/null | grep java | sort -k 7'
  #alias jpps='/dls_sw/apps/java/x64/gda842/bin/jps'
  #alias rd='rdesktop -a 32 -x 0x80 -g 1920x1080 DIAMRL5319 -r sound:remote'
  function see () { more `which "$@"`; }

  # REMOTE ---------------------------------------------------------------------
  echo "----- rem commands"
  alias remTuringX='ssh -Y 192.168.1.243'
  alias remTuringS='screen /dev/ttyS0 38400'
  alias remKleyqs501='ssh kleyn@62.233.104.49'
  alias remKleyqs501root='ssh root@62.233.104.49'
  alias remMaxwell='ssh kleyn@192.168.1.130'
  alias remSshd='sshd -D -p 8022'
  alias remGem='ssh -p 8022 192.168.1.2'
  alias remSyncToMaxw='rsync -rv  ~/MyDocs/aNotes kleyn@192.168.1.130:/home/kleyn/mySystems/gem'
  #alias rsyncBckup='rsync -av /storage/C0A8-1F0C/Android/data/com.termux/files/MyDocs/aNotes/org kleyn@192.168.1.130:/home/kleyn/mySystems/gem'
  alias al='alias | less -S'

  #alias remNok='ssh -X root@192.168.1.187'
  #alias remkleyqs501='ssh kleymik@kleyqs501.easyvserver.com'
  #alias linux1xcxX='ssh -X sshtst@192.168.0.10'
  #alias remKleyqs501='ssh root@kleyqs501.easyvserver.com'

  # ---------------------------------------------------------------------------------------------------- eclipse
  #alias kepler='/dls_sw/apps/eclipse/eclipse432_linux64_20140725/eclipse'
  # ---------------------------------------------------------------------------------------------------- networky stuff
  alias netsl='netstat -tlnp'
  alias lsofi='lsof -n -i'
  # ---------------------------------------------------------------------------------------------------- subversion
  # alias svns='svn status -v'
  # alias svnc='svn commit'
  # alias svnls='svn list -v'
  # alias svnlg='svn log  | less'
  # alias svnu='svn update'
  # alias svna='svn add'
  # alias svng='alias | grep svn'

  # ---------------------------------------------------------------------------------------------------- hdf5/nexus
  alias h5dumpHeaders='h5dump -H'
  alias h5dumpContents='h5dump -n'

  # Schroders GIT
  #git config --global user.name "Mike Kleyn"
  #git config --global user.email "michael.kleyn@schroders.com"
  #git config --global core.editor "emacs-nox"
  #git config --global core.excludesfile ~/.gitignore_global

  # git clone/init
  # git add
  # git commit
  # git push origin master
  # git pull –all
  # git branch
  # git checkout (consider using –b instead of git branch)
  # git merge
  # git status

  # ---------------------------------------------------------------------------------------------------- git
  # only needed once?
function gitcfg () {
  # only needed once?
  git config --global core.editor "emacs -nw -fg black -bg white1"
  git config --global user.name "Mike Kleyn"
  git config --global user.email michfkl@btinternet.com
  git config --global color.status auto
  git config --global color.branch auto
  # git config --global core.excludesfile ~/.gitignore_global
  }

  # include git completions
  #. ~/.git-completion.bash

  # make a branch foo   = git checkout -b foo
  # git checkout master = switch back to master
  # git diff : git log -p is the only way to get the last commited diff to a given file
  # git delete branch -d <thebranch> or -D to force
  alias gita='git add'
  alias gitb='git branch -av'
  alias gitbd='git branch --edit-description'
  alias gitbm='git branch --merged'
  alias gitbpnm='git branch --no-merged'
  alias gitbc='git checkout -b '
  alias gitsb='git show-branch'
  alias gitc='git commit'
  alias gitg='git grep'
  alias gitca='git commit -a '
  alias gitc='git checkout'
  alias gitcln='git clone'
  alias gitf='git fetch'
  alias gitg='git grep'
  alias gith='git help'
  alias gitls='git ls-tree -r HEAD --name-only'
  alias gitmv='git mv'
  alias gitpl='git pull'
  alias gitps='git push'
  alias gitr='git reset -p'
  alias gitreps='git remote -v'
  alias gitrm='git rm'
  alias gits='echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git status; git stash list'
  alias gitcln='git clone'
  alias gitreps='git remote -v'
  alias gitl='git log'
  alias gitlg="git log   --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
  alias gitlgg="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

  #alias tbird='(export LC_TIME=en_DK.UTF-8; /usr/lib/thunderbird/thunderbird )'

  # ---------------------------------------------------------------------------------------------------- cd stuff
  function cv   () { builtin cd "$@"; ls --color=auto --format=vertical --time-style=long-iso -lr; }
  alias cu='cv ..'
  alias cw='cut -b -$COLUMNS'
  # ---------------------------------------------------------------------------------------------------- process stuff
  # ps -ejH
  # pstree
  # alias ptree='ps -ef --forest'

  # get parent and grandparent of process
  function pspar() {
      if [[ "$#" == "0" ]]; then
        myPid=$$
      else
        myPid=$1
      fi
      parPid=`ps -ef | awk '$2 ~ /\<'$myPid'\>/ { print $3; }'`
      echo "PARPID=$parPid"
      gparPid=`ps -ef | awk '$2 ~ /\<'${parPid}'\>/ { print $3; }'`
      echo "GPARPID=$gparPid"
      ggparPid=`ps -ef | awk '$2 ~ /\<'${gparPid}'\>/ { print $3; }'`
      echo "GGPARPID=$ggparPid"
      if [[ "$ggparPid" == "0" ]]; then
                  pstree $gparPid
      else
                  pstree $ggparPid
      fi


  }
  # grep for process
  function psg () { ps -elf  | grep "$@"; }

  # ---------------------------------------------------------------------------------------------------- env
  alias pe='printenv'
  function pg   () { printenv | grep "$@"; }
  # list out ":"-separated env var vertically, defaults to listing PATH
  function evp  () {
      if [[ "$#" == "0" ]]; then
        REF=PATH
      else
        REF=$1
      fi
      echo "XXX $REF XXX"
      # evaluate $REF twice..
      PATHTMP=$(echo ${!REF} | sed "s/ /_/g")
      #echo "PATHTMP=$PATHTMP"
      for p in $(echo $PATHTMP | sed "s/:/ /g")
      do
        echo $p;
      done
  }
  function evapp  () {
      PATH=$PATH:$1
      echo $PATH
  }
  function evprp  () {
      PATH=$1:$PATH
      echo $PATH
  }
  function evrm  () {
      # use = instead of / to in sed replacement expr
      PATH=$(echo $PATH | sed s=$1==)
      echo $PATH
  }

  # -MA3  media
  #--- enscript
  function enscPort () {
    enscript                       -c          -T 3 -P dh.g.51.col.1  --font=Courier$@
  }
  function enscPortBw () {
    enscript                       -c          -T 3 -P dh.g.51.bw.1  --font=Courier$@
  }
  function enscLand () {
   enscript                       -cr          -T 3 -P dh.g.51.col.1  --font=Courier$@
  }
  function enscLandBw () {
   enscript                       -cr           -T 3 -P dh.g.51.bw.1  --font=Courier$@
  }
  function enscpy   () {
    enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.col.1 --font=Courier$@
  }
  function enscpyBw   () {
    enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.bw.1 --font=Courier$@
  }
  function enscjav  () {
    enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.col.1 --font=Courier$@
  }
  function enscjavBw  () {
    enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.bw.1 --font=Courier$@
  }
  #enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html
  #  719  enscript --pretty-print=python gda.py --language=html --color=true --output=gda.py.html
  #  720  enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html
  #  721  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 --output=gda.py.html
  #  722  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 -P dh.g.51.col.1

  # ----------------------------- readline bind keyboard shortcuts
  if [[ "$-" != *i* ]]; then
   echo "running in cron"
  else
   # bind: 1) insert pwd; 2) expand line 3) e-x-ecute date command
   bind '"\ep": "${PWD}"'
   bind '"\ee": "\e\C-e"'
   bind '"\er": reverse-search-history'
   # bind -x '"\ed":"date +%Y%m%d_%H%M"'  conflict with emacs delte word
   # bind: insert end of pwd
   # bind '"\ee": "${PWD##*/}"'
   # expand "\e\C-e"
   # bind -x '"\eW":"who"'
   # alias bk='bind -p | grep \'"\\e\' ; bind -p | grep \'"\\e'\'
   #>bind -p | grep '\\ed'
   #"\ed": kill-word
   # bind '"\ed": kill-word'  <- this is the fix
   # bind -p | grep '\\e' | grep d  | grep -v lower | grep -v digit
  fi



  # ----------------------------- module
  # module avail - list of modules available and their respective directory path
  # module list - show a list of the modules currently available in the shell
  # module load X or unload X - load or unload a module in the shell, where X is the name of a module
  # module show X - show info on a module, where X is a loaded module (usefully shows the path to the module)
  # ---------------------------------------------------------------------------------------------------- find/grep
  alias rg='/cygdrive/C/Users/kleynmi/AppData/Local/Continuum/Anaconda3/python.exe L:\\MyDocs\\ubin\\py\\rgrep.py'
  alias gdaFiltServerLog='rep -vF -f ~/ubin/gda_server_filter.txt'
  alias gdaFiltClientLog='rep -vF -f ~/ubin/gda_client_filter.txt'
  # alias fd=find
  # find with exclusion
  function fe() {
       echo "Numargs=$# : $@"
       if [[ "$#" == "0" ]]; then
        echo "fe \$1=exludeDir \$2=searchPat"
       else
         # find . -type d -name $1 -prune -or -print -and -iname $2
         find . -type d -name $1 -prune -or -iname $2
       fi
  }
  function fd() {
       echo "Numargs=$# : $@"
       if [[ "$#" != "2" ]]; then
        echo "fe \$1=dir \$2=pat"
       else
         find $1 -iname $2
         echo "status=$?"
       fi
  }

  function recent() {
       echo "Numargs=$# : $@"
       if [[ "$#" != "1" ]]; then
        echo "recent \$1=dir"
       else
             find $1 -mtime -1
       fi
  }

  function tstArgs() {
       if [[ "$#" == "0" ]]; then
        echo "No Args"
       else
        echo "Argnum=$# Args: $@"
       fi
  }

  function msEdge () {
     explorer.exe 'shell:Appsfolder\Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge'
  }
  # ------------------------------------------------------------------------------- pewma
  # alias pewma-branch='        /dls_sw/dasc/pewma.py -qp git rev-parse --symbolic-full-name --abbrev-ref HEAD'
  # alias pewma-branch-status=' /dls_sw/dasc/pewma.py -qp git branch-status'
  # alias pewma-describe='      /dls_sw/dasc/pewma.py -qp git update-index --refresh ; /dls_sw/dasc/pewma.py -qp git describe'
  # alias pewma-describe-dirty='/dls_sw/dasc/pewma.py -qp git describe-dirty'
  # alias pewma-fetch='         /dls_sw/dasc/pewma.py -qp git fetch'
  # alias pewma-fetch-all='     /dls_sw/dasc/pewma.py -qp git fetch --all'
  # alias pewma-incoming='      /dls_sw/dasc/pewma.py -qp git fetch --dry-run'
  # alias pewma-incoming-all='  /dls_sw/dasc/pewma.py -qp git fetch --dry-run --all'
  # alias pewma-pull='          /dls_sw/dasc/pewma.py -qp git pull'
  # alias pewma-pull-all='      /dls_sw/dasc/pewma.py -qp git pull --all'
  # alias pewma-status='        /dls_sw/dasc/pewma.py -qp git status -s'
  # alias pewma='               /dls_sw/dasc/pewma.py'
  # --------------------------------------------------------------------------------- xterm colored
  alias xtm='xterm   -sl 2000 &'
  alias xtmr='xterm  -sl 20000 -bg darkred   -fg white  -cr lightblue     &'
  alias xtmg='xterm  -sl 20000 -bg darkgreen -fg yellow -cr lightblue     &'
  alias xtmb='xterm  -sl 20000 -bg darkblue  -fg white  -cr lightblue     &'
  alias xtmbl='xterm -sl 20000 -bg lightblue -fg black  -cr red           &'
  alias xtmy='xterm  -sl 20000 -bg darkgrey  -fg white  -cr lightblue     &'
  alias xtmo='xterm  -sl 20000 -bg orange4   -fg white  -cr lightgreen    &'
  alias xtmv='xterm  -sl 20000 -bg palevioletred -fg black -cr lightgreen &'

  # # -------------------------------------------------------------------------------- firefox
  alias ff='firefox  -P default -new-instance 2> /dev/null &'
  alias ffn='firefox -P news    -new-instance 2> /dev/null &'
  # ---------------------------------------------------------------------------------- window title
  # function my_set_screen_title() {
  #   echo -ne "\ekHELLO$1\e\\"
  #   PROMPT_COMMAND='echo -ne "\033]0;"myWindowTitle"\007"'
  #   currWindow=`xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)" | awk '{ print $5}'`
  #   xdotool set_window --name hello $currWindow
  # }

  function psprint(){
     echo "Process id = $1"
     cat /proc/$1/cmdline | sed -e 's/\x0/\n\t/g'
     echo "\n-------open files:"
     lsof -p $1 | egrep -v '\.jar|\.so'
  }

  function rp(){
      echo "repoint existing link arg1 -> arg2"
      if [[ "$#" == "2" ]]; then
          if [[ -h $1 ]]; then
              # echo "rm $1"
              rm -v $1
              # echo "ln -s $2 $1"
              ln -vs $2 $1
          else
              echo "file $1 is not a symlink"
          fi
      else
          echo "Argnum=$# Args: $@"
      fi
  }


  # function swtt(){
  #  currWCmd="xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\) \| awk '{print $5}'"
  #  currWindow=`$currWindowCmd`
  #  echo "Curr Window is $currWindow"
  #  xdotool set_window --name "$$:$1" `$currWindow
  # }

  # function swtt(){
  #  curWS=`xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\)`
  #  curW= awk '{print $5}'
  #  currWindow=`$currWindowCmd`
  #  echo "Curr Window is $currWindow"
  #  xdotool set_window --name "$$:$1" `$currWindow
  # }

  function rg_nxs () { # $1 = dir; remember to module load nexus
  # search nexus files
    for f in $(find $1 -name '*.nxs');
    do
     echo "----------------------- $f";
     nxtraverse -f $f -r -n 50;
    done;
  }

  # ---------------------------------------------------------------------------------------------------- misc/old
  # x windows mutiwindow
  # alias sxw='startxwin'

  #alias pyana='setenv PATH $PATH
  #$ echo $PATH
  # drive/c/Program Files/TortoiseSVN/bin:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda/Scripts:/cygdrive/C/Users/kleyn/myDocs/ubin

  # powershell
  #alias pws='powershell.exe - < '


  # some more ls aliases
  alias ll='ls -lF'
  alias la='ls -alF'
  alias lal='ls -lF'
  alias l='ls -CF'
  # search history
  set show-all-if-ambiguous on
  set completion-ignore-case on
  ## arrow up
  bind '"\e[A":history-search-backward'
  ## arrow down
  bind '"\e[B":history-search-forward'
  #
  alias hh='history | tee /cygdrive/L/MyDocs/history/bash/hist`date +%Y%m%d_%H%M%S`'
  #alias hg='history grep $1 /cygdrive/L/MyDocs/history/bash/hist`date +%Y%m*`'
  #alias hhg='grep $1 /cygdrive/L/MyDocs/history/bash/hist*`'
  #alias hhhg='grep $1 /cygdrive/L/MyDocs/history/bash/hist*`'
  #alias turingS='screen /dev/ttyS0 38400'
  alias remLoncshyappl001='ssh local_kleynm@loncshyappl001'
  #alias linux1xcxX='ssh -X sshtst@192.168.0.10'

  #alias diamond='ssh uri03204@nx-staff.diamond.ac.uk'
  #alias diamondNx='ssh -f -N -L 9876:ws141.diamond.ac.uk:4000 uri03204@nx-staff.diamond.ac.uk'
  #alias diamondFoo='Use localhost:4000 to connect directly'

  # ---------------------------------------------------------------------------------------------------- emacs
  alias emnw='emacs -nw -fg black  -bg white1'
  alias ew='emacsclient -n'
  function emd () {
   emacsclient -n --eval "(ediff-files \"$1\" \"$2\")"
  }
  export EDITOR='emacsnw'
  alias emacsCygwin='/usr/bin/emacs -l /cygdrive/L/MyDocs/dot/dotemacsCygwin.el  --debug-init &'
  alias runEmacs='/cygdrive/C/ProgramData/emacs-26.1/bin/runemacs.exe -l $(cygpath -d ~/l_myDocs/dot/dotEmacs.el) &'

  # ---------------------------------------------------------------------------------------------------- greeting
  echo "PATH------------------------------------------"
  echo $PATH
  if [[ "$-" != *i* ]]; then
    echo "running in cron"
  else
    # export PATH=$PATH:ubin
    echo "functions & aliases: al---------------------------------------"
    alias
    # tf workspaces /collection:"http://tfs/tfs/"
    cd /cygdrive/Y/LOCAL/USR/MK/vc/maqs/AdvancedBeta/
    pwd
  fi

fi
echo "bashrc done"


# ############################################################################### OTHER/UNUSED
# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
# settitle ()
# {
#   echo -ne "\e]2;$@\a\e]1;$@\a";
#   echo -ne '\e]0;Title\a'
#   echo -ne "\e]0;PID=$$\a"
# }
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# Alias cd=cd_func

# ############################################################################### PROMPT MANGLING
#PS1="\t:\w:"
#export PS1="\e[0;31m[\u@\h \W]\$ \e[m "
#export PS1="==\d\t:\w:\n>>"
# insert env var [\$FOO]
#use \! for numbering
#PROMPT_DIRTRIM=4  # number of trailing directory components
#export PS1="\e[0;36m==:\t:\w:>\e[m"
#export PS1="\e[0;36m==:\t:\w:\e[m\n>"
#CONDA_DEFAULT_ENV
# colour
# Color	Code
# Black	0;30
# Blue	0;34
# Green	0;32
# Cyan	0;36
# Red	0;31
# Purple	0;35
# Brown	0;33
# Blue	0;34
# Green	0;32
# Cyan	0;36
# Red	0;31
# Purple	0;35
# Brown	0;33
# Note: You need to replace digit 0 with 1 to get light color version.
#
#       When  executing  interactively,  bash displays the primary
#       prompt PS1 when it is ready to read  a  command,  and  the
#       secondary  prompt PS2 when it needs more input to complete
#       a command.  Bash allows these prompt strings  to  be  cus­
#       tomized by inserting a number of backslash-escaped special
#       characters that are decoded as follows:
#              \a     an ASCII bell character (07)
#              \d     the date  in  "Weekday  Month  Date"  format
#                     (e.g., "Tue May 26")
#              \e     an ASCII escape character (033)
#              \h     the hostname up to the first `.'
#              \H     the hostname
#              \j     the  number of jobs currently managed by the
#                     shell
#              \l     the basename of the shell's terminal  device
#                     name
#              \n     newline
#              \r     carriage return
#              \s     the  name  of  the shell, the basename of $0
#                     (the portion following the final slash)
#              \t     the current time in 24-hour HH:MM:SS format
#              \T     the current time in 12-hour HH:MM:SS format
#              \@     the current time in 12-hour am/pm format
#              \u     the username of the current user
#              \v     the version of bash (e.g., 2.00)
#              \V     the release of bash,  version  +  patchlevel
#                     (e.g., 2.00.0)
#              \w     the current working directory
#              \W     the  basename  of the current working direcÂ­
#                     tory
#              \!     the history number of this command
#              \#     the command number of this command
#              \$     if the effective UID is 0, a #, otherwise  a
#                     $
#              \nnn   the  character  corresponding  to  the octal
#                     number nnn
#              \\     a backslash
#              \[     begin a sequence of non-printing characters,
#                     which could be used to embed a terminal conÂ­
#                     trol sequence into the prompt
#              \]     end a sequence of non-printing characters
#
