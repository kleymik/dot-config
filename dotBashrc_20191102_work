# MFK bash initialisation for my schroder account 20160204_14:41:36
# TBD make idempotent!

# watch
# while true; do
#     sleep 5
#     ls -l
# done
# while true; do ls -l; sleep .5; done
# while sleep 3 ; do ls -l ; done

# one line for loop: "for f in ~/l_rs1/*/.gitignore; do echo $f; done"

#if [[ "$-" == *i* ]]; then  # If running interactively test
if [[ "1" == "1" ]]; then


  # ############################################################################### ALIASES, Small Functions
  alias al='declare -f | grep \(\); alias'
  function ag   () {
    declare -f | grep "$@";
    alias      | grep "$@";
  }
  alias af='declare -f | grep \(\)'
  # edit a given function in situ
  #function efn {
  #       echo       "function $1" > /tmp/edit_bash_fn
  #	declare -f $1            > /tmp/edit_bash_fn
  #	emacsnw                    /tmp/edit_bash_fn
  #	cat                        /tmp/edit_bash_fn
  #	source                     /tmp/edit_bash_fn
  #}
  #
  # Some example alias instructions
  # If these are enabled they will be used instead of any instructions
  # they may mask.  For example, alias rm='rm -i' will mask the rm
  # application.  To override the alias instruction use a \ before, ie
  # \rm will call the real rm not the alias.
  #
  # Interactive operation...
  # alias rm='rm -i'
  # alias cp='cp -i'
  # alias mv='mv -i'
  #
  # Default to human readable figures
  # alias df='df -h'
  # alias du='du -h'
  #
  # Misc :)
  # alias less='less -r'                          # raw control characters
  alias lesss='less -S'                           # trim to screen
  # alias whence='type -a'                        # where, of a sort
  # alias grep='grep --color'                     # show differences in colour
  # alias egrep='egrep --color=auto'              # show differences in colour
  # alias fgrep='fgrep --color=auto'              # show differences in colour
  #

  #export PATH=$PATH:/cygdrive/C %programfiles(x86)%/Microsoft Visual Studio 12.0\Common7\IDE
  # ---------------------------------------------------------------------------------------------------For tfs executable
  # !!!!! USE Y-DRIVE !!!!!!!
  # export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio\ 12.0/Common7/IDE/
  # export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017 12.0/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team\ Explorer/

  #export PATH=$PATH:/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017/Professional/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team\ Explorer/
  #export PATH=/cygdrive/c/ProgramData/Anaconda3:$PATH
  #export PATH=/cygdrive/c/ProgramData/Anaconda3/Scripts:$PATH
  #export PATH=/cygdrive/c/ProgramData/Anaconda3/Library/bin:$PATH
  export PATH=$PATH:/cygdrive/c/Program\ Files\ \(x86\)/Graphviz2.38/bin
  export PATH=$PATH:/cygdrive/l/MyDocs/ubin
  export PIP_INDEX_URL=https://packages.schroders.com/artifactory/api/pypi/pypi/simple
  #export GIT_SSL_CAINFO=/cygdrive/L/MyDocs/config/certs/SchrodersCA.pem
  export PATH=$PATH:/cygdrive/L/ulib/apache-maven-3.6.0/bin


  #export PATH=$PATH:  C:\Program Files\Git\usr\bin\

  #1) tf workspaces /collection:"http://tfs/tfs/"
  #2) cd /cygdrive/Y/LOCAL/USR/MK/vc/maqsLatest/AdvancedBeta/
  # !!!!! SET Y-DRIVE !!!!!!!

  #function tfh () {  tf history . /recursive }
  alias myPath='echo $PATH'
  # ensure cwd path is from a drive mapping
  # add dot '.' to end of tf alias command
  # ---------------------------------------------------------------------------------------------------- ls
  # Some shortcuts for different directory listings
  # or glbally export TIME_STYLE=long-iso
  #--time-style=long-iso
  # alias ls='ls -hF --color=tty'                 # classify files in colour
  # alias dir='ls --color=auto --format=vertical'
  # alias vdir='ls --color=auto --format=long'
  # alias la='ls -A'                            # all but . and ..
  alias l='ls -CF'                              #
  # alias la='ls -alF'
  alias la='ls -alF --color=auto --time-style=long-iso'
  #alias ll='ls -l --color=auto --time-style=long-iso'
  #alias ll='ls -lF'
  alias ll='ls -lGprt --color=auto --time-style=long-iso'                              # long list
  alias lal='ls -lF'
  function cl() { cd "$@";
                  ls -lGprt --color=auto --time-style=long-iso;
                }
  function cls() { cd "$@";
                   ls -lGprt --color=auto --time-style=long-iso;
                   gits
                }

  alias calcsum='paste -sd+ - | bc'
  # export fndDate="-printf '%TY-%Tm-%Td %TT %p\n'"

  # ---------------------------------------------------------------------------------------------------- history
  export HISTFILE=/cygdrive/L/myDocs/history/bash/history.$$.$(date +%Y%m%d_%H%M)
  #alias h='history 30'
  #alias hf='history 300'
  #alias hs='history | tee /cygdrive/L/MyDocs/history/bash/history_`date +%Y%m%d_%H%M` | tail -30'
  # cat changed file of the local eclipse workspace
  #function eh   {} { ls -al --time-style=long-iso "$@"/.metadata/.plugins/org.eclipse.core.resources/.history/*/*  | sort -k 6 }
  # label history log file with a name
  function hs()      { history | tee /cygdrive/L/MyDocs/history/bash/history_`date +%Y%m%d_%H%M`_$1 | tail -25;  }
  function hl()      { history | tail -80;  }
  function hg()      { history | grep -i "$@" | cut -b 8- | sort | uniq; }
  function hgg()     { grep -i "$@" /cygdrive/L/MyDocs/history/bash/hist*`date +%Y*` | cut -d: -f2- | tail -100;  }
  function hgg1()    { grep -i "$@" /cygdrive/L/MyDocs/history/bash/hist*`date +%Y*` | cut -d: -f2- | tail -5;  }
  function hggg()    { grep -i "$@" /cygdrive/L/MyDocs/history/bash/hist*          ;  }
  function termLog() { script /home/kleyn/history/termLogs/termLog_"$@"_`date +%Y%m%d_%H%M`; }
  #findiso()         { find ~/scratchCode/matlab/vc -iname "mapCtryMa*.m" -exec ls -ld --time-style=long-iso {} \; | sort -k 7}

  # CMD: C:/cygwin64/bin/grep.exe -rs --include "*.m" tcostModelTotalLS ~/l_MK/vc/maqs*/*
  # function rgrep () { grep -r --include "*.m" cfg ~/l_MK/vc/maqsLatest/ | grep '~exist'}
  function rgrep() { echo "1=$1"
                     dosPath=$(cygpath -m $1)
                     echo "DOSPATH $dosPath";
                     echo "2=$2"
                     echo "3=$3"
                     echo "grep --color=auto -ir --include=$2 $3 $1;"
                     # echo "grep -e --color=auto -ir --include=$2 $3 $1;"  -e is different!!!!
                     grep --color=auto -ir --include="$2" "$3" "$1" ; }
  function rfoo() { echo "1=$1"
                    dosPath=$(cygpath -m $1)
                    echo "DOSPATH $dosPath";
                    }

  alias rgrepy='/cygdrive/C/ProgramData/Anaconda3/python.exe L:\\MyDocs\\ubin\\py\\rgrep.py'
  #function rgrep() { ls "$@"}

  alias excel='/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Office/Office16/EXCEL.EXE'
  alias outlook='/cygdrive/C/Program\ Files\ \(x86\)/Microsoft\ Office/Office16/OUTLOOK.EXE &'

  # ---------------------------------------------------------------------------------------------------- kill
  alias kill_hup='kill -1'
  alias kill_int='kill -2'
  alias kill_term='kill -15'
  alias kill_hard='kill -9'
  alias jobs='jobs -l'
  # ---------------------------------------------------------------------------------------------------- misc
  alias pws2345='python -m SimpleHTTPServer 2345 &'
  alias showFuns='declare -F'
  #alias calc='bc -l <<<'
  function calc () { python -c "from math import *; print($@)"; }
  #alias gdaprocs='netstat -tlnp 2>/dev/null | grep java | sort -k 7'
  #alias jpps='/dls_sw/apps/java/x64/gda842/bin/jps'
  #alias rd='rdesktop -a 32 -x 0x80 -g 1920x1080 DIAMRL5319 -r sound:remote'
  function see () { more `which "$@"`; }

  # ---------------------------------------------------------------------------------------------------- eclipse
  #alias kepler='/dls_sw/apps/eclipse/eclipse432_linux64_20140725/eclipse'
  # ---------------------------------------------------------------------------------------------------- networky stuff
  alias netsl='netstat -tlnp'
  alias lsofi='lsof -n -i'
  # ---------------------------------------------------------------------------------------------------- subversion
  # alias svns='svn status -v'
  # alias svnc='svn commit'
  # alias svnls='svn list -v'
  # alias svnlg='svn log  | less'
  # alias svnu='svn update'
  # alias svna='svn add'
  # alias svng='alias | grep svn'

  # ---------------------------------------------------------------------------------------------------- hdf5/nexus
  alias h5dumpHeaders='h5dump -H'
  alias h5dumpContents='h5dump -n'

  # Schroders GIT
  #git config --global user.name "Mike Kleyn"
  #git config --global user.email "michael.kleyn@schroders.com"
  #git config --global core.editor "emacs-nox"
  #git config --global core.excludesfile ~/.gitignore_global

  # git clone/init
  # git add
  # git commit 
  # git push origin master
  # git pull –all
  # git branch
  # git checkout (consider using –b instead of git branch)
  # git merge
  # git status 
  
  # ---------------------------------------------------------------------------------------------------- git
  # only needed once?
  # git config --global core.editor "emacs -nw -fg black  -bg white1"
  # git config --global user.name "Mike Kleyn"
  # git config --global user.email michael.kleyn@diamond.ac.uk
  # git config --global color.status auto
  # git config --global color.branch auto
  # git config --global core.excludesfile ~/.gitignore_global

  # include git completions
  #. ~/.git-completion.bash

  # make a branch foo   = git checkout -b foo
  # git checkout master = switch back to master
  # git diff : git log -p is the only way to get the last commited diff to a given file
  # git delete branch -d <thebranch> or -D to force
  function gita() { git add "$@"; git status; }
     # git stash list;
     alias gitcma='git commit --amend -m'
     alias gitCfg='git config --global -l'
     alias gitb='git branch -av'
     #alias gitbd='git branch --edit-description'
     alias gitbDel='git branch -d'
     alias gitbm='git branch --merged'
     alias gitbnm='git branch --no-merged'
     alias gitbs='git show-branch'
     alias gitbstash='git stash push -m bstash'
     alias gitc='git checkout'
     alias gitcb='git checkout -b '
     alias gitcm='git commit -m'
     alias gitcl='git clone'

  function gitdx() { echo "STAGED ---------------------------";
                     git diff -w --cached --compact-summary;
                     echo "NOT STAGED ---------------------------";
                     git diff -w --compact-summary;
                    }
  alias gitd='git diff -w --compact-summary'

  # args are swapped to show what effect the *other" branch would have applied to current branch
  function gitdbca()  { git diff -w --compact-summary "$1"..."$2";  } # diff branches 3 dots: diff top current branch vs common ancestor point
  function gitddbca() { git diff -w                   "$1"..."$2";  } # diff branches 3 dots: diff top current branch vs common ancestor point
  function gitdbtt()  { git diff -w --compact-summary "$2".."$1";   } # diff branches 2 dots: diff tips of branches (same as no dots in this case)
  function gitddbtt() { git diff -w                   "$2".."$1";   } # diff branches 2 dots: diff tips of branches (same as no dots in this case)
     alias gitdd='git diff -w'
     alias gitdi='git diff -w --cached'
     alias gitdiss='git difftool -w --cached'
     alias gitdss='git difftool'

  #function gitdiff() { local width="${COLS:-$(tput cols)}"; GIT_EXTERNAL_DIFF="diff -yW$width \$2 \$5; echo >/dev/null"; git diff "$@" }
  #function gitdiff() { local width="${COLS:-$(tput cols)}";
  #                     GIT_EXTERNAL_DIFF="diff -yW$width \$2 \$5; echo >/dev/null"
  #                     git diff "$@" }
  alias gitf='git fetch -v'
  alias gitfo='git fetch -v origin'
  alias gitg='git grep'
  alias gitca='git commit -a '
  alias gitc='git checkout'
  alias gitcl='git clone'
  alias gitf='git fetch'
  alias gith='git help'
  alias gitls='git ls-tree -r HEAD --name-only'
  alias gitmv='git mv'
  alias gitpl='git pull'
  alias gitps='git push'
  alias gitr='git reset -p'
  alias gitrm='git rm'
  alias gitDrop='git checkout -- '
  # alias gits='pwd; echo $(git rev-parse --abbrev-ref HEAD); git config branch.$(git rev-parse --abbrev-ref HEAD).description;  git branch -av; git status'
  function gits() { pwd;
                    echo $(git rev-parse --abbrev-ref HEAD);
                    git config branch.$(git rev-parse --abbrev-ref HEAD).description;
                    git branch -v;
                    git status -uno --ahead-behind;
                    git log -n 10 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)';
                    echo '';
                  }
  function gitsa() { pwd;
                    echo $(git rev-parse --abbrev-ref HEAD);
                    git config branch.$(git rev-parse --abbrev-ref HEAD).description;
                    git branch -av;
                    git status -uall --ahead-behind;
                    git log -n 10 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)';
                    git stash list;
                    echo '';
                  }
  alias gitcln='git clone'
  alias gitreps='git remote -v'
  alias gitl="git    log -n 60  --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
  alias gitll="git   log -n 160 --pretty=oneline --abbrev-commit  --no-merges --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
  alias gitlm="git   log -n 60  --pretty=oneline --abbrev-commit              --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
  alias gitl2="git   log -n 20  --pretty=short   --abbrev-commit "
  alias gitl3="git   log -n 20  --pretty=medium  --abbrev-commit "
  alias gitlg="git   log -n 30  --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --no-merges --all"
  alias gitlgm="git  log -n 30  --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
  alias gitlgg="git  log -n 150 --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold yellow)%d%C(reset)  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
  alias gitlggt="git log -n 150 --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''       %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
  alias gitlf="git log -p --follow"
## more git aliases


#A more modern way to undo a merge is:

#git merge --abort
#And the slightly older way:
#git reset --merge
#The old-school way described in previous answers (warning: will discard all your local changes):
#git reset --hard
#But actually, it is worth noticing that git merge --abort is only equivalent to git reset --merge given that MERGE_HEAD is present. This can be read in the git help for merge command.
#git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.


  #alias tbird='(export LC_TIME=en_DK.UTF-8; /usr/lib/thunderbird/thunderbird )'

  # ---------------------------------------------------------------------------------------------------- cd stuff
  function cv   () { builtin cd "$@"; ls --color=auto --format=vertical --time-style=long-iso -lr; }
  alias cu='cv ..'
  alias cw='cut -b -$COLUMNS'
  # ---------------------------------------------------------------------------------------------------- process stuff
  # ps -ejH
  # pstree
  # alias ptree='ps -ef --forest'

  # get parent and grandparent of process
  function pspar() { 
      if [[ "$#" == "0" ]]; then
        myPid=$$
      else
        myPid=$1
      fi
      parPid=`ps -ef | awk '$2 ~ /\<'$myPid'\>/ { print $3; }'`
      echo "PARPID=$parPid"
      gparPid=`ps -ef | awk '$2 ~ /\<'${parPid}'\>/ { print $3; }'`
      echo "GPARPID=$gparPid"
      ggparPid=`ps -ef | awk '$2 ~ /\<'${gparPid}'\>/ { print $3; }'`
      echo "GGPARPID=$ggparPid"
      if [[ "$ggparPid" == "0" ]]; then
                  pstree $gparPid
      else
                  pstree $ggparPid
      fi


  }
  # grep for process 
  function psg () { ps -elf  | grep "$@"; }

  # ---------------------------------------------------------------------------------------------------- env
  alias pe='printenv'
  function pg   () { printenv | grep "$@"; }
  # list out ":"-separated env var vertically, defaults to listing PATH
  function evp  () {
      if [[ "$#" == "0" ]]; then
        REF=PATH
      else
        REF=$1
      fi
      echo "XXX $REF XXX"
      # evaluate $REF twice..
      PATHTMP=$(echo ${!REF} | sed "s/ /_/g")
      #echo "PATHTMP=$PATHTMP"
      for p in $(echo $PATHTMP | sed "s/:/ /g") 
      do  
        echo $p; 
      done
  }
  function evapp  () {
      PATH=$PATH:$1
      echo $PATH
  }
  function evprp  () {
      PATH=$1:$PATH
      echo $PATH
  }
  function evrm  () {
      # use = instead of / to in sed replacement expr
      PATH=$(echo $PATH | sed s=$1==)
      echo $PATH
  }

  # -MA3  media
  #--- enscript
  function enscPort () { 
    enscript                       -c          -T 3 -P dh.g.51.col.1  --font=Courier$@ 
  }
  function enscPortBw () { 
    enscript                       -c          -T 3 -P dh.g.51.bw.1  --font=Courier$@ 
  }
  function enscLand () { 
   enscript                       -cr          -T 3 -P dh.g.51.col.1  --font=Courier$@ 
  }
  function enscLandBw () { 
   enscript                       -cr           -T 3 -P dh.g.51.bw.1  --font=Courier$@ 
  }
  function enscpy   () { 
    enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.col.1 --font=Courier$@ 
  }
  function enscpyBw   () { 
    enscript --pretty-print=python -c  --color=1 -T 3 -P dh.g.51.bw.1 --font=Courier$@ 
  }
  function enscjav  () { 
    enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.col.1 --font=Courier$@ 
  }
  function enscjavBw  () { 
    enscript --pretty-print=java   -c  --color=1 -T 3 -P dh.g.51.bw.1 --font=Courier$@ 
  }
  #enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html 
  #  719  enscript --pretty-print=python gda.py --language=html --color=true --output=gda.py.html
  #  720  enscript --pretty-print=python gda.py --language=html --color=1 --output=gda.py.html
  #  721  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 --output=gda.py.html
  #  722  enscript --pretty-print=python gda.py --language=html --color=1 --font=Courier8 -P dh.g.51.col.1

  # ----------------------------- readline bind keyboard shortcuts
  if [[ "$-" != *i* ]]; then
   echo "running in cron"
  else
   # bind: 1) insert pwd; 2) expand line 3) e-x-ecute date command
   bind '"\ep": "${PWD}"'
   bind '"\ee": "\e\C-e"'
   bind '"\er": reverse-search-history'
   # bind -x '"\ed":"date +%Y%m%d_%H%M"'  conflict with emacs delte word
   # bind: insert end of pwd
   # bind '"\ee": "${PWD##*/}"'
   # expand "\e\C-e"
   # bind -x '"\eW":"who"'
   # alias bk='bind -p | grep \'"\\e\' ; bind -p | grep \'"\\e'\'
   #>bind -p | grep '\\ed'
   #"\ed": kill-word
   # bind '"\ed": kill-word'  <- this is the fix
   # bind -p | grep '\\e' | grep d  | grep -v lower | grep -v digit
  fi



  # ----------------------------- module
  # module avail - list of modules available and their respective directory path
  # module list - show a list of the modules currently available in the shell
  # module load X or unload X - load or unload a module in the shell, where X is the name of a module
  # module show X - show info on a module, where X is a loaded module (usefully shows the path to the module)
  # ---------------------------------------------------------------------------------------------------- find/grep
  #alias python='/cygdrive/C/ProgramData/Anaconda3/python.exe'
  alias pythonac='/cygdrive/C/ProgramData/Anaconda3/python.exe'
  alias pyline=~/l_MyDocs/ubin/py/pyline
  alias pyWs2345='python -m SimpleHTTPServer 2345 &'
  function pycalc () { python -c "from math import *; print($@)"; }
  alias gdaFiltServerLog='rep -vF -f ~/ubin/gda_server_filter.txt'
  alias gdaFiltClientLog='rep -vF -f ~/ubin/gda_client_filter.txt'
  # alias fd=find
  # find with exclusion
  function fe() { 
       echo "Numargs=$# : $@"
       if [[ "$#" == "0" ]]; then
        echo "fe \$1=exludeDir \$2=searchPat"
       else
         # find . -type d -name $1 -prune -or -print -and -iname $2
         find . -type d -name $1 -prune -or -iname $2
       fi
  }
  function fd() { 
       echo "Numargs=$# : $@"
       if [[ "$#" != "2" ]]; then
        echo "fe \$1=dir \$2=pat"
       else
         find $1 -iname "$2"
         echo "status=$?"
       fi
  }

  function recent() { 
       echo "Numargs=$# : $@"
       if [[ "$#" != "1" ]]; then
        echo "recent \$1=dir"
       else
             find $1 -mtime -1
       fi
  }

  function tstArgs() { 
       if [[ "$#" == "0" ]]; then
        echo "No Args"
       else
        echo "Argnum=$# Args: $@"
       fi
  }

  function msEdge () {
     explorer.exe 'shell:Appsfolder\Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge'
  }
  # ------------------------------------------------------------------------------- pewma
  # --------------------------------------------------------------------------------- xterm colored
  alias xtm='xterm   -sl 2000 &'
  alias xtmr='xterm  -sl 20000 -bg darkred   -fg white  -cr lightblue     &'
  alias xtmg='xterm  -sl 20000 -bg darkgreen -fg yellow -cr lightblue     &'
  alias xtmb='xterm  -sl 20000 -bg darkblue  -fg white  -cr lightblue     &'
  alias xtmbl='xterm -sl 20000 -bg lightblue -fg black  -cr red           &'
  alias xtmy='xterm  -sl 20000 -bg darkgrey  -fg white  -cr lightblue     &'
  alias xtmo='xterm  -sl 20000 -bg orange4   -fg white  -cr lightgreen    &'
  alias xtmv='xterm  -sl 20000 -bg palevioletred -fg black -cr lightgreen &'

  # # -------------------------------------------------------------------------------- firefox
  alias ff='firefox  -P default -new-instance 2> /dev/null &'
  alias ffn='firefox -P news    -new-instance 2> /dev/null &'



  # ############################################################################### FUNCTIONS

  # backup TO C:DRIVE  codews, vc, history, MLINDICES, CITI, MATLABDesktop, cronstuff
  function dataFilesCopy () {
    echo "Files Copy Start..."

    echo "rsync: /LOCAL/USR/MK/codews --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_dataCollectionFI/LOCAL/USR/MK/codews ~/l_C/MyData/backups2/

    echo "rsync: /LOCAL/USR/MK/vc     --> ~/l_C/MyData/backups2/============================"
    rsync.exe -av ~/l_dataCollectionFI/LOCAL/USR/MK/vc     ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/History       --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/history                       ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/History       --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/config                        ~/l_C/MyData/backups2/

    echo "rsync: MyDocs/dot           --> /C/MyData/backups2 ============================="
    rsync.exe -av ~/l_MyDocs/dot                           ~/l_C/MyData/backups2/

    #echo "rsync: C:MyMaqs             --> /C/MyData/backups2 =============================  cron stuff"
    #rsync.exe -av ~/l_C/MyMaqs                            ~/l_C/MyData/backups2/

    echo "rsync: /C/Users/kleyn*    --> /C/MyData/backups2 =============================  my profiles"
    rsync.exe -av ~/l_C/Users/kleynmi                      ~/l_C/MyData/backups2/profiles
    # rsync.exe -av ~/l_C/Users/kleynmi.SCHRODERSAD        ~/l_C/MyData/backups2/profiles

    #echo "cp: MERRILLS                --> /LOCAL/ML/MLINDICES/ =========================="
    #cp -rnv //lon0302/dfs/DATA/DTA/MLINDICES/* /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/

    #echo "cp: IDL CITI                --> /LOCAL/CITI/ =================================="
    #cp -nv //lon0673/IDL/PRD/DATA/SOURCE/CITI_INDEX/ARCHIVE/* /home/kleynmi/dataCollectionFI/LOCAL/CITI/ 2>&1 | grep -v 'not specified'

    echo "cp: C/Users/kleynmi/AppData/Roaming/MathWorks/MATLAB/R2015b/MATLABDesktop.xml ===="
    cp /home/kleynmi/C/Users/kleynmi/AppData/Roaming/MathWorks/MATLAB/R2015b/MATLABDesktop.xml /home/kleynmi/MyDocs/history/matlabDesktop/MATLABDesktop_$(date '+%Y%m%d').xml

    echo "...Files Copy Done"
    #cp -rv /home/kleynmi/MyDocs/history /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/
    #rsync.exe -rv /home/kleynmi/MyDocs/history /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/
    #cd /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/codews/
    #tar -czvf - . > /home/kleynmi/C/MyData/backups2/usr.mk.codews.tgz
    #tar -cvf /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/codews/maqsTfs.tar . | grep -v '$tf/|/SAM/'
    #tar -cvf - . > /home/kleynmi/dataCollectionFI/LOCAL/USR/MK/maqsTfs.tar    | grep -v '/$tf/'
    #
    echo "Clear asv files========================================="
    find ~/l_MK/vc/ -name '*.asv' -exec ls -ld {} \;
    find ~/l_MK/vc/ -name '*.asv' -exec rm -v {} \;
  }

  function defaultPyEnv() {
   source ~/l_MK/vc/pyEnvs/env2_inhrtSite/Scripts/activate.cygwin
   # source ~/l_MK/vc/pyEnvs/env4_tst/Scripts/activate.cygwin
  }

  function hsIpy() {
     pushd  /cygdrive/C/Users/kleynmi/.ipython/profile_default
     ls -l
     sqlite3.exe -readonly history.sqlite "SELECT source_raw FROM HISTORY" >> ~/l_MyDocs/history/python/python_$(date '+%Y%m%d').txt
     ls -lrt ~/l_MyDocs/history/python/
     popd
  }
  function hgIpy() {
     grep -i $1 ~/l_myDocs/history/python/*
  }

  function runJup() {
        echo "jupyter starting"
        # launch exe
        echo "jupyter spawned"
        sleep 10
        tasklist.exe  /V | grep -i python

        # >jupyter --help
        # usage: jupyter [-h] [--version] [--config-dir] [--data-dir] [--runtime-dir]
        #                [--paths] [--json]
        #                [subcommand]
        # Jupyter: Interactive Computing
        # positional arguments:
        #   subcommand     the subcommand to launch
        # optional arguments:
        #   -h, --help     show this help message and exit
        #   --version      show the jupyter command's version and exit 4.4.0
        #   --config-dir   show Jupyter config dir
        #   --data-dir     show Jupyter data dir
        #   --runtime-dir  show Jupyter runtime dir
        #   --paths        show all Jupyter paths. Add --json for machine-readable
        #                  format.
        #   --json         output paths as machine-readable json

        # Available subcommands: bundlerextension console kernel kernelspec lab
        # labextension labhub migrate nbconvert nbextension notebook qtconsole run
        # script serverextension troubleshoot trust
  }

  function runMatlab() {
          # runTestAll('runDerivedData', false, 'rWSJTqa_runWeeklyStockJobTQA')
          # runTestAll('runDerivedData', true, 'rWSJTqa_rWSJTqa_MarketStats_bash')
          # res = runTestAll('rEBsktMJ', false, 'rEBsktMJ_dataDeps')
          # res = runTestAll('rEBsktMJ', false, 'rEBsktMJ_dataDeps_GMFE_1723')
          # res = runTestAll('runDerivedData', false, 'rEBsktMJ_QuantileFactorCovJob')
          mlCmd="runTestAll('rEBsktMJ', false, 'rEBsktMJ_dataDeps_GMFE_1723')"
          echo "Matlab starting: $mlCmd"
          (/cygdrive/c/Program\ Files/MATLAB/R2018b/bin/matlab -automation -nosplash -wait -logfile 'C:\MyData\bashRunMatlab_'$(date '+%Y%m%d').log -r "pth = aaaSetMlEnv(1); $mlCmd ; quit" )
          echo "Matlab done"
          # sleep 10
          # tasklist.exe  /V | grep -i matlab
          # /cygdrive/c/Program Files/MATLAB/R2018b/bin/matlab' -aaaSetMlEnv('') -noFigureWindows -nosplash -sd "startdir"  -wait
          #   -automation
          #   -c license file
          #   -jdb portnumber
          #   -logfile filename
          #   -noFigureWindows
          #   -nosplash
          #   -nouserjavapath
          #   -r statement
          #   -sd "startdir"
          #   shieldOption
          #   -singleCompThread
          #   -unregserver
          #   -wait
          #/cygdrive/c/Program\ Files/MATLAB/R2018b/bin/matlab -h
          #/cygdrive/c/Program\ Files/MATLAB/R2018b/bin/matlab -automation -nosplash -r "path"
          #/cygdrive/c/Program\ Files/MATLAB/R2018b/bin/matlab -automation -nosplash -r "pth = aaaSetMlEnv(1);"
  }

  runPyDbg () {
    echo "1=$1"
    srcPath=$(cygpath -am $1)
    echo "1=$srcPath"
    # Y:/LOCAL/usr/MK/vc/rs1/SSI.derived-data/src/
    #cygstart.exe PowerShell.exe -noe -c ". mode.com con: lines=10000 cols=500"
    export PYTHONPATH=$srcPath
    printenv PYTHONPATH
    cygstart.exe PowerShell.exe -noe -c ". mode.com con: lines=10000 cols=1000"
  }

  runPy () {
    echo "task: $1 $2 $3"
    #echo "rest:  ${@:2}"

    subDir=$1
    #subDir=MAQ.datasets/src
    echo "subDir=$subDir"
    pushd Y:/LOCAL/USR/MK/vc/rs1/$subDir

    export FERNET_KEY=MNwA0fHDrq9LIeQDMMSdjLj4c-X-Mz3d7XSLVabIoZ0\=
    #echo "FERNET_KEY=$FERNET_KEY"

    export PYTHONPATH=Y:/LOCAL/usr/MK/vc/rs1/$subDir
    echo  "PYTHONPATH=$PYTHONPATH"

    # echo "rest:  ${@:2}"
    echo "python $subDir/$2 --task $3 --env mikek.s3"
    python Y:/LOCAL/USR/MK/vc/rs1/$subDir/$2 --task $3 --env mikek.s3
    popd

    # python ${@:2}
    # PYTHONUNBUFFERED=1;
    # PYDEVD_USE_FRAME_EVAL=NO;
    # FERNET_KEY=MNwA0fHDrq9LIeQDMMSdjLj4c-X-Mz3d7XSLVabIoZ0\=
    # Y:/LOCAL/USR/MK/vc/rs1/MAQ.datasets/src/main.py  --task fx_pair_spot_rates_export --env mikek.s3
    # Y:/LOCAL/USR/MK/vc/rs1/MAQ.datasets/src

  }

  function dockerPyCharm() {
    docker run --rm \
    -e DISPLAY=${DISPLAY} \
      -v /tmp/.X11-unix:/tmp/.X11-unix \
      -v ~/.PyCharm:/home/developer/.PyCharm \
      -v ~/.PyCharm.java:/home/developer/.java \
      -v ~/.PyCharm.py2:/usr/local/lib/python2.7 \
      -v ~/.PyCharm.py3:/usr/local/lib/python3.4 \
      -v ~/Project:/home/developer/Project \
      --name pycharm-$(head -c 4 /dev/urandom | xxd -p)-$(date +'%Y%m%d-%H%M%S') \
      rycus86/pycharm:latest
  }

#>date '+%Y%m%d' -d "+4days"

  function checkLogs() {
     echo  "--- Daily Jobs"
     tail   //lon06179/ProdData/AdvancedBeta/DailyLogger.log
     wc -l //lon06179/Logs/Prod/Reporting/collectBasketPerformanceReturns_2019*.log | sort -k 2 | tail -10
     echo  "--- Weekly Jobs"
     tail -10  //lon06179/ProdData/AdvancedBeta/WeeklyLogger.log
     echo ""
     tail -10  //lon06179/ProdData/AdvancedBeta/WeeklyLoggerErrors.log | cut -b -150
     echo  "--- Weekly Jobs Mike Test"
     wc -l  /home/kleynmi/l_06179/Logs/Dev/Testing/TST_rWSJTqa_*_$(date '+%Y%m')*.log
     echo  "--- Prod Jobs UI"
     find ~/l_06179/Logs/Prod -mtime -2 -regex '.*\(log\|txt\)$' -printf '%TY-%Tm-%Td %TT %p\n' | sort | tail -10
     echo  "---------- Stock Baskets"
     find ~/l_StockBaskets/ \( -name ChinaA -o -name venv -o -name .ipynb_checkpoints -o -name .git \) -prune -o -mtime -1  -printf '%TY-%Tm-%Td %TT %p\n'
     echo  "------------------------"
  }

  function gitUpdateRepos() {
     # check/update repos
     cd ~/l_MK/vc/rs1
     ls -ld *

     # $(find ~/l_MK/vc/rs1 -maxdepth 1 -type d  -name 'MAQ.*' )
     # faded >3 months MAQ.cookiecutter MAQ.qa-dashboard MAQ.reverse-proxy MAQ.market-data MAQ.opto-capture-db MAQ.python-docker-base-image MAQ.quantres-db MAQ.social-value-data MAQ.sql-bulk-copier
     #  MAQ.qa-dashboard MAQ.quant-datawarehouse MAQ.quantres-db MAQ.rebalance-data MAQ.research
     #  MAQ.scheduler MAQ.social-value-data MAQ.sql-bulk-copier MAQ.tqa-holdings-check MAQ.tqa-monitoring SSI.ParquetBCP
     for a in maqs MAQ.advanced-beta MAQ.datasets MAQ.Data-Quality MAQ.locates MAQ.package MAQ.SSI-DW  MAQ.quant-datawarehouse MAQ.rebalance-data MAQ.research MAQ.scheduler MAQ.tqa-holdings-check MAQ.tqa-monitoring
     do
       daysAgo=$(date -d "-10 days" +%Y%m%d)
       echo "--------------------------------------------------------------------------------------------- $daysAgo"
       pushd $a
       gitpla
       #git log --since=$daysAgo --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold yellow)%d%C(reset)  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
       git  log -n 20              --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold yellow)%d%C(reset)  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
       echo ""
       popd
     done
     echo "================================================================================================"
     echo "================================================================================================"
     echo "================================================================================================"

     # $(find ~/l_MK/vc/rs1 -maxdepth 1 -type d  -name 'SSI.*' )
     # SSI.derived-data SSI.matlab SSI.quanthub SSI.scratch SSI.security-master SSI.signal-library SSI.wind maqs
     for a in SSI.derived-data SSI.matlab MAQ.common
     do
       echo "----------------------------------------------------------------------------------------------- $a"
       pushd $a
       git  log -n 30 --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold yellow)%d%C(reset)  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
       echo ""
       popd
     done
  }

  function dataFilesCheck () {
     echo "----------------------- //lon0302/dfs/DATA/DTA/MLINDICES"
     ls -lrt //lon0302/dfs/DATA/DTA/MLINDICES | tail -10

     echo -n "NumFiles "
     ls -lrt //lon0302/dfs/DATA/DTA/MLINDICES | wc -l

     echo "-----------------------  dataCollectionFI/LOCAL/ML/MLINDICES/"
     ls -lrt /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/ | tail -10

     echo -n "NumFiles /MLINDICES/"
     ls -lrt /home/kleynmi/dataCollectionFI/LOCAL/ML/MLINDICES/ | wc -l

     echo "----------------------- /home/kleynmi/dataCollectionFI/PROD/"
     ls -lrt /home/kleynmi/dataCollectionFI/PROD/ | tail -10

     echo -n "NumFiles /PROD/"
     ls -lrt /home/kleynmi/dataCollectionFI/PROD/ | wc -l

     echo "----------------------- du -sh /home/kleynmi/dataCollectionFI/*"
     du -sm /home/kleynmi/dataCollectionFI/* | sort -n

     echo "----------------------- du -sh /home/kleynmi/dataCollectionFI/LOCAL"
     du -sm /home/kleynmi/dataCollectionFI/LOCAL/* | sort -n

  }


  # ------------------------------------------------------------------------------- More Functions
  function psprint(){
     echo "Process id = $1"
     cat /proc/$1/cmdline | sed -e 's/\x0/\n\t/g'
     echo "\n-------open files:"
     lsof -p $1 | egrep -v '\.jar|\.so'
  }

  function rp(){
      echo "repoint existing link arg1 -> arg2"
      if [[ "$#" == "2" ]]; then
          if [[ -h $1 ]]; then
              # echo "rm $1"
              rm -v $1
              # echo "ln -s $2 $1"
              ln -vs $2 $1
          else
              echo "file $1 is not a symlink"
          fi
      else
          echo "Argnum=$# Args: $@"
      fi
  }


  # function swtt(){
  #  currWCmd="xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\) \| awk '{print $5}'"
  #  currWindow=`$currWindowCmd`
  #  echo "Curr Window is $currWindow"
  #  xdotool set_window --name "$$:$1" `$currWindow
  # }

  # function swtt(){
  #  curWS=`xprop -root \| grep _NET_ACTIVE_WINDOW\(WINDOW\)`
  #  curW= awk '{print $5}'
  #  currWindow=`$currWindowCmd`
  #  echo "Curr Window is $currWindow"
  #  xdotool set_window --name "$$:$1" `$currWindow
  # }

  function rg_nxs () { # $1 = dir; remember to module load nexus
  # search nexus files
    for f in $(find $1 -name '*.nxs');
    do
     echo "----------------------- $f";
     nxtraverse -f $f -r -n 50;
    done;
  }
 
  # ---------------------------------------------------------------------------------------------------- misc/old
  # x windows mutiwindow
  # alias sxw='startxwin'

  #alias pyana='setenv PATH $PATH
  #$ echo $PATH
  # drive/c/Program Files/TortoiseSVN/bin:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda:/cygdrive/c/Users/kleyn/myDocs/Apps/Anaconda/Scripts:/cygdrive/C/Users/kleyn/myDocs/ubin

  # powershell
  #alias pws='powershell.exe - < '


  # some more ls aliases
  alias ll='ls -lF'
  alias la='ls -alF'
  alias lal='ls -lF'
  alias l='ls -CF'
  # search history
  set show-all-if-ambiguous on
  set completion-ignore-case on
  ## arrow up
  bind '"\e[A":history-search-backward'
  ## arrow down
  bind '"\e[B":history-search-forward'
  #
  alias hh='history | tee /cygdrive/L/MyDocs/history/bash/hist`date +%Y%m%d_%H%M%S`'
  #alias hg='history grep $1 /cygdrive/L/MyDocs/history/bash/hist`date +%Y%m*`'
  #alias hhg='grep $1 /cygdrive/L/MyDocs/history/bash/hist*`'
  #alias hhhg='grep $1 /cygdrive/L/MyDocs/history/bash/hist*`'
  # startXwin
  alias remLoncshyappl001='ssh -Y local_kleynm@loncshyappl001'
  alias remLondmaqdkrl005='ssh -Y -l kleynmix3 londmaqdkrl005'
  #alias linux1xcxX='ssh -X sshtst@192.168.0.10'

  #alias diamond='ssh uri03204@nx-staff.diamond.ac.uk'
  #alias diamondNx='ssh -f -N -L 9876:ws141.diamond.ac.uk:4000 uri03204@nx-staff.diamond.ac.uk'
  #alias diamondFoo='Use localhost:4000 to connect directly'

  # ---------------------------------------------------------------------------------------------------- emacs
  alias emnw='emacs -nw -fg black  -bg white1'
  alias ew='emacsclient -n'
  function emd () {
   emacsclient -n --eval "(ediff-files \"$1\" \"$2\")"
  }
  export EDITOR='emacsnw'
  alias emacsCygwin='/usr/bin/emacs -l /cygdrive/L/MyDocs/dot/dotemacsCygwin.el  --debug-init &'
  alias runEmacs='/cygdrive/C/ProgramData/emacs-26.1/bin/runemacs.exe -l $(cygpath -d ~/l_myDocs/dot/dotEmacs.el) &'

  # ---------------------------------------------------------------------------------------------------- greeting
  # ------------------------------------------------------------------------------------"
  hsIpy
  echo "PATH----------------------------------------------------------------------------"
  echo $PATH
  if [[ "$-" != *i* ]]; then
    echo "running in cron"
  else
    # export PATH=$PATH:ubin
    echo "functions & aliases: al--------------------------------------------------------"
    alias
    # tf workspaces /collection:"http://tfs/tfs/"
    # cd /cygdrive/Y/LOCAL/USR/MK/vc/rs1
    pwd
  fi

  # ############################################################################### PROMPT MANGLING (see bottom)

  # ---------------------------------------------------------------------------------- window title
  # function my_set_screen_title() {
  #   echo -ne "\ekHELLO$1\e\\"
  #   PROMPT_COMMAND='echo -ne "\033]0;"myWindowTitle"\007"'
  #   currWindow=`xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)" | awk '{ print $5}'`
  #   xdotool set_window --name hello $currWindow
  # }

  parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }

  parse_pyvenv() {
   if [ -z "$VIRTUAL_ENV" ]; then
     echo " "
   else
     echo $(basename $VIRTUAL_ENV)
   fi
  }

  promptFunc() {
    # right before prompting for the
    # next command, save the previous
      # command in a file. $(hostname)
      echo "$(date +%Y-%m-%d--%H-%M-%S) : $$ : $PWD: $(history 1)" >> ~/l_MyDocs/history/bash/history_$(date +%Y-%V)
  }
  PROMPT_COMMAND=promptFunc

  PROMPT_DIRTRIM=20
  # export PS1="\e[0;36m=[\h:\u:\$\$]=:\t:\w:\e[m\n>"
  # export PS1="\e[0;36m=[\$(parse_git_branch) \$(parse_pyvenv)]=:\t:\w:\e[m\n>\e]0;CWD=\$PWD VENV=\$VIRTUAL_ENV\a"
  # add pid to title (doesn't update on prompt)
  # echo -ne "\e]0;PID=$$ ::  :: $PWD\a"
  # echo -ne "\e]0;CWD=$PWD\a"
  export PS1="\e[0;36m=[\$(parse_git_branch) \$(parse_pyvenv)]=:\t:\w:\e[m\n>"

  #export PROMPT_COMMAND='history -a' # not just yet.. no loger use hl?
fi


# ############################################################################### OTHER/UNUSED
# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
# settitle ()
# {
#   echo -ne "\e]2;$@\a\e]1;$@\a";
#   echo -ne '\e]0;Title\a'
#   echo -ne "\e]0;PID=$$\a"
# }
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# Alias cd=cd_func

#  Prompt Mangling
#PS1="\t:\w:"
#export PS1="\e[0;31m[\u@\h \W]\$ \e[m "
#export PS1="==\d\t:\w:\n>>"
# insert env var [\$FOO]
#use \! for numbering
#PROMPT_DIRTRIM=4  # number of trailing directory components
#export PS1="\e[0;36m==:\t:\w:>\e[m"
#export PS1="\e[0;36m==:\t:\w:\e[m\n>"
#CONDA_DEFAULT_ENV
# colour
# Color	Code
# Black	0;30
# Blue	0;34
# Green	0;32
# Cyan	0;36
# Red	0;31
# Purple	0;35
# Brown	0;33
# Blue	0;34
# Green	0;32
# Cyan	0;36
# Red	0;31
# Purple	0;35
# Brown	0;33
# Note: You need to replace digit 0 with 1 to get light color version.
#
#       When  executing  interactively,  bash displays the primary
#       prompt PS1 when it is ready to read  a  command,  and  the
#       secondary  prompt PS2 when it needs more input to complete
#       a command.  Bash allows these prompt strings  to  be  cus­
#       tomized by inserting a number of backslash-escaped special
#       characters that are decoded as follows:
#              \a     an ASCII bell character (07)
#              \d     the date  in  "Weekday  Month  Date"  format
#                     (e.g., "Tue May 26")
#              \e     an ASCII escape character (033)
#              \h     the hostname up to the first `.'
#              \H     the hostname
#              \j     the  number of jobs currently managed by the
#                     shell
#              \l     the basename of the shell's terminal  device
#                     name
#              \n     newline
#              \r     carriage return
#              \s     the  name  of  the shell, the basename of $0
#                     (the portion following the final slash)
#              \t     the current time in 24-hour HH:MM:SS format
#              \T     the current time in 12-hour HH:MM:SS format
#              \@     the current time in 12-hour am/pm format
#              \u     the username of the current user
#              \v     the version of bash (e.g., 2.00)
#              \V     the release of bash,  version  +  patchlevel
#                     (e.g., 2.00.0)
#              \w     the current working directory
#              \W     the  basename  of the current working direcÂ­
#                     tory
#              \!     the history number of this command
#              \#     the command number of this command
#              \$     if the effective UID is 0, a #, otherwise  a
#                     $
#              \nnn   the  character  corresponding  to  the octal
#                     number nnn
#              \\     a backslash
#              \[     begin a sequence of non-printing characters,
#                     which could be used to embed a terminal conÂ­
#                     trol sequence into the prompt
#              \]     end a sequence of non-printing characters
#
